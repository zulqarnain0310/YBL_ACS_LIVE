SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO






--USE YES_MISDB
Create PROCEDURE  [dbo].[ColletralDetailUploadDataInUp]
	@Timekey INT,
	@UserLoginID VARCHAR(100),
	@OperationFlag INT,
	@MenuId INT,
	@AuthMode	CHAR(1),
	@filepath VARCHAR(MAX),
	@EffectiveFromTimeKey INT,
	@EffectiveToTimeKey	INT,
    @Result		INT=0 OUTPUT,
	@UniqueUploadID INT
	--@Authlevel varchar(5)

AS

--DECLARE @Timekey INT=24928,
--	@UserLoginID VARCHAR(100)='FNAOPERATOR',
--	@OperationFlag INT=1,
--	@MenuId INT=163,
--	@AuthMode	CHAR(1)='N',
--	@filepath VARCHAR(MAX)='',
--	@EffectiveFromTimeKey INT=24928,
--	@EffectiveToTimeKey	INT=49999,
--    @Result		INT=0 ,
--	@UniqueUploadID INT=41
BEGIN
SET DATEFORMAT DMY
	SET NOCOUNT ON;
	Declare @CollIDAutoGenerated   Int
    Declare @CollateralID		   varchar(30)=''
   --DECLARE @Timekey INT
   --SET @Timekey=(SELECT MAX(TIMEKEY) FROM dbo.SysProcessingCycle
			--	WHERE ProcessType='Quarterly')

			Set @Timekey=(
			select CAST(B.timekey as int)from SysDataMatrix A
			Inner Join SysDayMatrix B ON A.TimeKey=B.TimeKey
			 where A.CurrentStatus='C'
			 )

	PRINT @TIMEKEY

	SET @EffectiveFromTimeKey=@TimeKey
	SET @EffectiveToTimeKey=49999


	DECLARE @FilePathUpload	VARCHAR(100)
				   SET @FilePathUpload=@UserLoginId+'_'+@filepath
					PRINT '@FilePathUpload'
					PRINT @FilePathUpload


		BEGIN TRY

		--BEGIN TRAN
		
IF (@MenuId=24702)
BEGIN
 --Set @FilePathUpload='mismaker_CollateralUpload_3.xlsx'

	IF (@OperationFlag=1)

	BEGIN

		IF NOT (EXISTS (SELECT 1 FROM CollateralDetail_stg  where sheetname=@FilePathUpload))

							BEGIN
									 --Rollback tran
									SET @Result=-8

								RETURN @Result
							END
			
                   Print 'Sachin'
				   
		IF EXISTS(SELECT 1 FROM CollateralDetail_stg WHERE sheetname=@FilePathUpload)
		BEGIN
		
		INSERT INTO ExcelUploadHistory
	(
		UploadedBy	
		,DateofUpload	
		,AuthorisationStatus	
		--,Action	
		,UploadType
		,EffectiveFromTimeKey	
		,EffectiveToTimeKey	
		,CreatedBy	
		,DateCreated	
		
	)

	SELECT @UserLoginID
		   ,GETDATE()
		   ,'NP'
		   --,'NP'
		   ,'Colletral Detail Upload'
		   ,@EffectiveFromTimeKey
		   ,@EffectiveToTimeKey
		   ,@UserLoginID
		   ,GETDATE()

		   --sp
			   PRINT @@ROWCOUNT

		   DECLARE @ExcelUploadId INT
	SET 	@ExcelUploadId=(
	SELECT MAX(UniqueUploadID) FROM  ExcelUploadHistory
	)
		
			Insert into UploadStatus (FileNames,UploadedBy,UploadDateTime,UploadType)
		Values(@filepath,@UserLoginID ,GETDATE(),'Colletral Detail Upload')


		SET @CollIDAutoGenerated=0
				
         
					Select @CollIDAutoGenerated= MAX(Convert(Int,ISNULL(CollateralID,0))) From(
					Select MAX(Convert(Int,ISNULL(CollateralID,0))) as CollateralID from Curdat.AdvSecurityDetail
					UNION ALL
					Select MAX(Convert(Int,ISNULL(CollateralID,0))) as CollateralID from DBO.AdvSecurityDetail_Mod
					UNION ALL
					Select MAX(Convert(Int,ISNULL(CollateralID,0))) as CollateralID from Curdat.AdvSecurityValueDetail
					UNION ALL
					 Select MAX(Convert(Int,ISNULL(CollateralID,0))) as CollateralID from DBO.AdvSecurityValueDetail_Mod
					 UNION ALL
					 Select MAX(Convert(Int,ISNULL(CollateralID,0))) as CollateralID from DBO.CollateralDetailUpload_Mod
					 )X

					IF (@CollIDAutoGenerated IS NULL)

						SET   @CollIDAutoGenerated=1000001

					ELSE 
					   -- SET    @CollIDAutoGenerated=Convert(Int,@CollIDAutoGenerated)

						--Print '@CollIDAutoGenerated'
						--Print @CollIDAutoGenerated
					 
					 SET @CollateralID=Convert(Varchar(30),@CollIDAutoGenerated)

					 PRINT '@ExcelUploadId'
					 PRINT @ExcelUploadId

					 Print 'SachinModInsert'
					 --PRINT '@CollateralID'
					 --PRINT @CollateralID
					 --PRINT '@ExcelUploadId'
					 --PRINT @ExcelUploadId
					 --PRINT '@FilePathUpload'
					 --PRINT @FilePathUpload
	 SET dateformat DMY

		INSERT INTO [CollateralDetailUpload_Mod]
		(
						SrNo,
						UploadID,
						CollateralID,
						LiabID,
						UCIC,
						CustName,
						AssetID,
						Segment,
						CRE,
						CollateralSubType,
						NameSecuPv,
						SeniorityCharge,
						SecurityStatus,
						FDNO,
						ISINNo_FolioNumber,
						QtyShares_MutualFunds_Bonds,
						Line_No,
						CrossCollateral_LiabID,
						PropertyAdd,
						PIN,
						DtStockAudit,
						SBLCIssuingBank,
						SBLCNumber,
						CurSBLCissued,
						SBLCFCY,
						DtexpirySBLC,
						DtexpiryLIC,
						ModeOperation,
						ExceApproval,
						ValSource_ExpBusinessRule,
						DtofValuation,
						ValueConsidered,
						SecondDtofValuation,
						SecondValuation,
					    Expirydate,
						CreatedBy,
						DateCreated,
						AuthorisationStatus,
						EffectiveFromTimeKey,
						EffectiveToTimeKey,
						CollateralIDModification,
						[Action]
		)
		
		SELECT
			SrNo,
			@ExcelUploadId,
			CASE WHEN [ACTION] in('M','S') then NULL ELSE @CollateralID+Row_Number()Over(order by (Select 1)) END,
		    LiabID,
			UCIC,
			CustName,
			AssetID,
			Segment,
			CRE,
			CollateralSubType,
			NameSecuPv,
			SeniorityCharge,
			SecurityStatus,
			FDNO,
			ISINNo_FolioNumber,
			QtyShares_MutualFunds_Bonds,
			Line_No,
			CrossCollateral_LiabID,
			PropertyAdd,
			PIN,
			Case When DtStockAudit<>'' Then  Convert(date,DtStockAudit) Else NULL END as DtStockAudit,
			SBLCIssuingBank,
			SBLCNumber,
			CurSBLCissued,
			Case When SBLCFCY<>'' Then Convert(decimal(16,2),ISNULL(SBLCFCY,0)) Else 0 End SBLCFCY,
			Case When DtexpirySBLC<>'' Then  Convert(date,DtexpirySBLC) Else NULL END as DtexpirySBLC,
			Case When DtexpiryLIC<>'' Then  Convert(date,DtexpiryLIC) Else NULL END as DtexpiryLIC,
			ModeOperation,
			ExceApproval,
			ValSource_ExpBusinessRule,
			Case When DtofValuation<>'' Then  Convert(date,DtofValuation) Else NULL END as DtofValuation,
			

            Case When ValueConsidered<>'' Then Convert(decimal(16,2),ISNULL(ValueConsidered,'0')) Else 0 End,
			Case When SecondDtofValuation<>'' Then  Convert(date,SecondDtofValuation) Else NULL END as SecondDtofValuation,
			Case When SecondValuation<>'' Then Convert(decimal(16,2),ISNULL(SecondValuation,'0')) Else 0 End,
			Case When Expirydate<>'' Then  Convert(date,Expirydate) Else NULL END as Expirydate,
		    @UserLoginID,
			GETDATE(),
			'NP',
			@Timekey,
			49999,
			CollateralID,
			[Action]
		FROM CollateralDetail_stg
		where sheetname=@FilePathUpload

		                                                                                                                                   



		
		---DELETE FROM STAGING DATA Sachin
		 DELETE FROM CollateralDetail_stg
		 WHERE sheetname=@FilePathUpload

		  DELETE FROM CollateralDetails_stg
		 WHERE filname=@FilePathUpload
		 --RETURN @ExcelUploadId

		  

END
	
	END


--------------------------------------------

	IF (@OperationFlag=16)----AUTHORIZE

	BEGIN
		
		UPDATE 
			[CollateralDetailUpload_Mod] 
			SET 
			AuthorisationStatus	='A'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			
			WHERE UploadId=@UniqueUploadID

			UPDATE 
			[CollateralDetailUpload_Mod] 
			SET 
			AuthorisationStatus	='A'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			WHERE UploadId=@UniqueUploadID
			
			--Update  A
			--Set A.EffectiveToTimeKey=A.EffectiveFromTimeKey-1
			--from [CollateralDetailUpload] A
			--inner join [CollateralDetailUpload_Mod] B
			--ON A.AccountID=B.AccountID
			--AND B.EffectiveFromTimeKey <=@Timekey
			--AND B.EffectiveToTimeKey >=@Timekey
			--Where B.UploadId=@UniqueUploadID
			--AND A.EffectiveToTimeKey >=49999

		
		Declare @SecurityEntityID      Bigint

	    Declare @ENTITYKEY      Bigint

		 Select @SecurityEntityID=  MAX(ISNULL(SecurityEntityID,0)) from [Curdat].[AdvSecurityDetail]

					 IF (@SecurityEntityID IS NULL)
					    Begin 
							SET   @SecurityEntityID=1
						END
					ELSE 
					    SET @SecurityEntityID=@SecurityEntityID+1

			Select @ENTITYKEY=  MAX(ISNULL(ENTITYKEY,0)) from [Curdat].[AdvSecurityDetail]

					 IF (@ENTITYKEY IS NULL)
					    Begin 
							SET   @ENTITYKEY=1
						END
					ELSE 
					    SET    @ENTITYKEY=@ENTITYKEY+1
						
			
						
						PRINT '@SecurityEntityID'
					    PRINT @SecurityEntityID

						 SET dateformat DMY

			INSERT INTO [Curdat].[AdvSecurityDetail]
		(
		   ENTITYKEY,
			CollateralID,
			LiabID,
				UCICID,
				CustomerName,
				AssetID,
				Segment,
				CRE,
				CollateralSubTypeAlt_Key,
				NameSecuPvd,
				SeniorityofCharge,
				SecurityStatus,
				FDNO,
				ISINNo,
				FolioNo,
				QtyShares_MutualFunds_Bonds,
				Line_No,
				CrossCollateral_LiabID,
				PropertyAdd,
				PIN,
				DtStockAudit,
				SBLCIssuingBank,
				SBLCNumber,
				CurSBLCissued,
				SBLCFCY,
				DtexpirySBLC,
				DtexpiryLIC,
				ModeOperation,
				ExceApproval,
			SecurityEntityID,
			TaggingAlt_Key,
				 AuthorisationStatus,
		     EffectiveFromTimeKey,
			EffectiveToTimeKey,
			CreatedBy,
			DateCreated,
			ModifiedBy,
			DateModified,
			ApprovedBy,
			DateApproved,
			EntryType,
			SecurityType
		   																					
						
		)
			SELECT 
			@ENTITYKEY+Row_Number()Over(order by (Select 1)) as ENTITYKEY,
			CollateralID,
			LiabID,
						UCIC,
						CustName,
						AssetID,
						B.SegmentAlt_Key,
						Case When A.CollateralSubType='Immovable Fixed assets' Then 10 Else 20 END CRE,
						--H.ParameterAlt_Key as CRE,
						C.CollateralSubTypeAltKey,
						NameSecuPv,
						I.ParameterAlt_Key as SeniorityCharge,
						K.ParameterAlt_Key as   SecurityStatus,
						FDNO,
						ISINNo_FolioNumber,
						ISINNo_FolioNumber,

						QtyShares_MutualFunds_Bonds,
						Line_No,
						CrossCollateral_LiabID,
						PropertyAdd,
						PIN,
						DtStockAudit,
						O.BankAlt_Key as SBLCIssuingBank,
						SBLCNumber,
						Z.CurrencyAlt_Key as CurSBLCissued,
						SBLCFCY,
						DtexpirySBLC,
						DtexpiryLIC,
					    L.ParameterAlt_Key as   ModeOperation,
						M.ParameterAlt_Key ExceApproval,
				@SecurityEntityID+Row_Number()Over(order by (Select 1)),
				 4,
					A.AuthorisationStatus,
					@Timekey,
					49999,
					A.CreatedBy,
					A.DateCreated,
					A.ModifiedBy,
					A.DateModified,
					@UserLoginID,
					Getdate(),
					'Corporate',
					'C'
					
					
			FROM [CollateralDetailUpload_Mod] A
			
			LEFT JOIN DimCollateralSubType C ON A.CollateralSubType=C.CollateralSubTypeDescription
			LEFT JOIN DimSegment  B ON A.Segment=B.SegmentName
			LEFT JOIN DimCurrency  Z ON A.CurSBLCissued=Z.CurrencyName
   --         Left Join DimCollateralOwnerType D ON A.CollateralOwnerType=D.CollOwnerDescription
			--Left Join DimCollateralChargeType F ON A.ChargeType=F.CollChargeDescription
			--Left Join DimSecurityChargeType G ON A.ChargeNature =G.SecurityChargeTypeName
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'CREMaster' as Tablename 
						from DimParameter where DimParameterName='DimYesNo'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)H
						ON H.ParameterName=A.CRE
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'SeniorityOfChargeMaster' as Tablename 
						from DimParameter where DimParameterName='DimSeniorityOfCharge'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)I
						ON I.ParameterName=A.SeniorityCharge
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'SecurityStatusMaster' as Tablename 
						from DimParameter where DimParameterName='DimSecuritySt'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)K
						ON K.ParameterName=A.SecurityStatus
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'ModeOfOperationMaster' as Tablename 
						from DimParameter where DimParameterName='DimModOperation'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)L
						ON L.ParameterName=A.ModeOperation
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'ExceptionalApprovalMaster' as Tablename 
						from DimParameter where DimParameterName='DimExceptionalAppr'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)M
						ON M.ParameterName=A.ExceApproval
			left joIN ( Select  BankAlt_Key,BankName
						from DimBank A 	 where	 A.EffectiveFromTimeKey<=@TimeKey		
						AND A.EffectiveToTimeKey >=@TimeKey)O		
						ON A.sblcissuingBank = O.BankName			 
									
									
												

						
			WHERE  A.UploadId=@UniqueUploadID and A.EffectiveToTimeKey>=@Timekey AND A.ACTION='A'

			Update A	
			SET A.CustomerEntityId=B.CustomerEntityID
			FROM Curdat.AdvSecurityDetail A
			INNER JOIN PRO.CustomerCal B ON A.UCICID=B.UCIF_ID
			Where  B.UCIF_ID In( Select UCIC from CollateralDetailUpload_Mod
			WHERE  UploadId=@UniqueUploadID and EffectiveToTimeKey>=@Timekey AND ACTION='A')
 

		Select @SecurityEntityID=  MAX(ISNULL(SecurityEntityID,0)) from [Curdat].[AdvSecurityValueDetail]

					 IF (@SecurityEntityID IS NULL)
					    Begin 
							SET   @SecurityEntityID=1
						END
					ELSE 
					    SET    @SecurityEntityID=@SecurityEntityID+1

						SET @ENTITYKEY=0
						
			Select @ENTITYKEY=  MAX(ISNULL(ENTITYKEY,0)) from [Curdat].[AdvSecurityValueDetail]

					 IF (@ENTITYKEY IS NULL)
					    Begin 
							SET   @ENTITYKEY=1
						END
					ELSE 
					    SET    @ENTITYKEY=@ENTITYKEY+1
						
						PRINT '@SecurityEntityID'
					    PRINT @SecurityEntityID

			INSERT INTO [Curdat].[AdvSecurityValueDetail](
					
					 CollateralID,
					 ExpiryBusinessRule,
					 ValuationDate,
					  CurrentValue,
					SecurityEntityID,
					Periodinmonth,
					ValuationExpiryDate
					 
					
					,EffectiveFromTimeKey
					,EffectiveToTimeKey
					,CreatedBy
					,DateCreated
					,ModifiedBy
					,DateModified
					,ApprovedBy
					,DateApproved
					 ,ENTITYKEY
						
						)

			Select CollateralID,ValSource_ExpBusinessRule,DtofValuation,ValueConsidered,SecurityEntityID,Periodinmonth,ValuationExpiryDate,
			EffectiveFromTimeKey,EffectiveToTimeKey,CreatedBy,DateCreated,ModifiedBy,DateModified,UserNm,Userdt,ENTITYKEY from(
			SELECT    ROW_NUMBER() OVER(PARTITION BY A.CollateralID  ORDER BY  A.CollateralID) as Rownumber , CollateralID,
			           ValSource_ExpBusinessRule,
					DtofValuation	,
				 Convert(decimal(16,2),ISNULL(ValueConsidered,'0')) as ValueConsidered,
					
					@SecurityEntityID+Row_Number()Over(order by (Select 1)) SecurityEntityID,
					D.ExpirationPeriod as Periodinmonth,
					 Case When D.ExpirationPeriod<>0 Then DATEADD(M,Convert(int,	D.ExpirationPeriod),A.DtofValuation) Else A.Expirydate END as ValuationExpiryDate
					,@Timekey EffectiveFromTimeKey,49999 EffectiveToTimeKey
					,A.CreatedBy
					,A.DateCreated
					,A.ModifiedBy
					,A.DateModified
					,@UserLoginID UserNm
					,Getdate() Userdt
					,@ENTITYKEY+Row_Number()Over(order by (Select 1))  as ENTITYKEY
                   FROM [CollateralDetailUpload_Mod] A
				   LEFT JOIN DimCollateralSubType C ON A.CollateralSubType=C.CollateralSubTypeDescription
				   Left JOIN DimValueExpiration D  ON A.ValSource_ExpBusinessRule=D.Documents
			WHERE  A.UploadId=@UniqueUploadID and A.EffectiveToTimeKey>=@Timekey AND A.ACTION='A'
			
) X Where X.Rownumber=1

			Select @SecurityEntityID=  MAX(ISNULL(SecurityEntityID,0)) from [Curdat].[AdvSecurityValueDetail]

					 IF (@SecurityEntityID IS NULL)
					    Begin 
							SET   @SecurityEntityID=1
						END
					ELSE 
					    SET    @SecurityEntityID=@SecurityEntityID+1
						
			
						
						PRINT '@SecurityEntityID'
					    PRINT @SecurityEntityID

						SET @ENTITYKEY=0

						Select @ENTITYKEY=  MAX(ISNULL(ENTITYKEY,0)) from [Curdat].[AdvSecurityValueDetail]

					 IF (@ENTITYKEY IS NULL)
					    Begin 
							SET   @ENTITYKEY=1
						END
					ELSE 
					    SET    @ENTITYKEY=@ENTITYKEY+1

				INSERT INTO [Curdat].[AdvSecurityValueDetail](
					 
					 CollateralID,
					 ExpiryBusinessRule,
					 ValuationDate,
					  CurrentValue,
					SecurityEntityID,
					Periodinmonth,
					ValuationExpiryDate
					 
					
					,EffectiveFromTimeKey
					,EffectiveToTimeKey
					,CreatedBy
					,DateCreated
					,ModifiedBy
					,DateModified
					,ApprovedBy
					,DateApproved
					,ENTITYKEY
						
						)

			Select CollateralID,ValSource_ExpBusinessRule,DtofValuation,ValueConsidered,SecurityEntityID,Periodinmonth,ValuationExpiryDate,
			EffectiveFromTimeKey,EffectiveToTimeKey,CreatedBy,DateCreated,ModifiedBy,DateModified,UserNm,Userdt,ENTITYKEY from(
			SELECT    ROW_NUMBER() OVER(PARTITION BY A.CollateralID  ORDER BY  A.CollateralID) as Rownumber , 
			           CollateralID,
			           ValSource_ExpBusinessRule,
					  SecondDtofValuation as  DtofValuation	,
				     Convert(decimal(16,2),ISNULL(SecondValuation,'0'))   as ValueConsidered,
					
					@SecurityEntityID+Row_Number()Over(order by (Select 1)) SecurityEntityID,
					D.ExpirationPeriod as Periodinmonth,
					 Case When D.ExpirationPeriod<>0 Then DATEADD(M,Convert(int,	D.ExpirationPeriod),A.SecondDtofValuation) Else A.Expirydate END as ValuationExpiryDate
					,@Timekey EffectiveFromTimeKey,49999 EffectiveToTimeKey
					,A.CreatedBy
					,A.DateCreated
					,A.ModifiedBy
					,A.DateModified
					,@UserLoginID UserNm
					,Getdate() Userdt
					,@ENTITYKEY+Row_Number()Over(order by (Select 1))  as ENTITYKEY
                   FROM [CollateralDetailUpload_Mod] A
				   LEFT JOIN DimCollateralSubType C ON A.CollateralSubType=C.CollateralSubTypeDescription
				   Left JOIN DimValueExpiration D  ON A.ValSource_ExpBusinessRule=D.Documents
			WHERE  A.UploadId=@UniqueUploadID and A.EffectiveToTimeKey>=@Timekey and A.CollateralSubType in('Immovable Fixed assets')
			and DtofValuation is not NULL and ValueConsidered<>0 AND A.ACTION='A'
			and SecondDtofValuation is not NULL and SecondValuation<>0
			
) X Where X.Rownumber=1

----For Modification----
--[Curdat].[AdvSecurityDetail]
Update P
SET 
			P.LiabID=A.LiabID,
				P.UCICID=A.UCIC,
				P.CustomerName=A.CustName,
				P.AssetID=A.AssetID,
				P.Segment=B.SegmentAlt_Key,
				--P.CRE=H.ParameterAlt_Key,
				P.CRE=Case When A.CollateralSubType='Immovable Fixed assets' Then 10 Else 20 END ,
				P.CollateralSubTypeAlt_Key=C.CollateralSubTypeAltKey,
				P.NameSecuPvd=A.NameSecuPv,
				P.SeniorityofCharge=I.ParameterAlt_Key ,
				P.SecurityStatus=K.ParameterAlt_Key ,
				P.FDNO=A.FDNO,
				P.ISINNo=A.ISINNo_FolioNumber,
				P.FolioNo=A.ISINNo_FolioNumber,
				P.QtyShares_MutualFunds_Bonds=A.QtyShares_MutualFunds_Bonds,
				P.Line_No=A.Line_No,
				P.CrossCollateral_LiabID=A.CrossCollateral_LiabID,
				P.PropertyAdd=A.PropertyAdd,
				P.PIN=A.PIN,
				P.DtStockAudit=A.DtStockAudit,
				P.SBLCIssuingBank=O.BankAlt_Key,
				P.SBLCNumber=A.SBLCNumber,
				P.CurSBLCissued=A.CurSBLCissued,
				P.SBLCFCY=A.SBLCFCY,
				P.DtexpirySBLC=A.DtexpirySBLC,
				P.DtexpiryLIC=A.DtexpiryLIC,
				P.ModeOperation=L.ParameterAlt_Key,
				P.ExceApproval=M.ParameterAlt_Key,
			
	
				 AuthorisationStatus='A',
		
			
			ModifiedBy=@UserLoginID,
			DateModified=Getdate()
			
			FROM [CollateralDetailUpload_Mod] A
			INNER JOIN [Curdat].[AdvSecurityDetail] P ON P.CollateralID=A.CollateralIDModification
			LEFT JOIN DimCollateralSubType C ON A.CollateralSubType=C.CollateralSubTypeDescription
			LEFT JOIN DimSegment  B ON A.Segment=B.SegmentName
  
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'CREMaster' as Tablename 
						from DimParameter where DimParameterName='DimYesNo'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)H
						ON H.ParameterName=A.CRE
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'SeniorityOfChargeMaster' as Tablename 
						from DimParameter where DimParameterName='DimSeniorityOfCharge'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)I
						ON I.ParameterName=A.SeniorityCharge
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'SecurityStatusMaster' as Tablename 
						from DimParameter where DimParameterName='DimSecuritySt'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)K
						ON K.ParameterName=A.SecurityStatus
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'ModeOfOperationMaster' as Tablename 
						from DimParameter where DimParameterName='DimModOperation'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)L
						ON L.ParameterName=A.ModeOperation
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'ExceptionalApprovalMaster' as Tablename 
						from DimParameter where DimParameterName='DimExceptionalAppr'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)M
						ON M.ParameterName=A.ExceApproval
			left joIN ( Select  BankAlt_Key,BankName
						from DimBank A 	 where	 A.EffectiveFromTimeKey<=@TimeKey		
						AND A.EffectiveToTimeKey >=@TimeKey)O		
						ON A.sblcissuingBank = O.BankName			 
									
									
												

						
			WHERE  A.UploadId=@UniqueUploadID and A.EffectiveToTimeKey>=@Timekey AND A.ACTION='M'

	 IF OBJECT_ID('TempDB..#temp13') IS NOT NULL DROP TABLE  #temp13;
	 IF OBJECT_ID('TempDB..#TEMP12') IS NOT NULL DROP TABLE  #TEMP12;
	 IF OBJECT_ID('TempDB..#TEMP') IS NOT NULL DROP TABLE #TEMP;
	 IF OBJECT_ID('TempDB..#TEMP1') IS NOT NULL DROP TABLE #TEMP1;

	CREATE TABLE [dbo].[#temp13](
	[RowNumber] [bigint] NULL,
	[CollateralID] [varchar](30) NULL,
	[1stValDoc] [varchar](100) NULL,
	[1stValuationDate] [date] NULL,
	[1stValuationAmount] [decimal](16, 2) NULL,
	[1stValuationExpiryDate] [date] NULL,
	[SecurityEntityID] [bigint] NULL
) 
		

Select Distinct CollateralIDModification into #TEMP12 from [CollateralDetailUpload_Mod] A
WHERE   A.UploadId=@UniqueUploadID and A.EffectiveToTimeKey>=@Timekey AND A.Action='M'
--Select * from #TEMP12

SELECT * INTO #TEMP FROM(		
Select  ROW_NUMBER() OVER(Partition BY CollateralID ORDER BY CollateralID,ValuationExpiryDate) 
AS RowNumber,ExpiryBusinessRule, ValuationDate,	CurrentValue as ValuationAmount,
ValuationExpiryDate,CollateralID,SecurityEntityID  from [Curdat].[AdvSecurityValueDetail]
Where CollateralID in(Select Distinct CollateralIDModification from #TEMP12 )

Group By CollateralID,ValuationExpiryDate,ValuationDate,CurrentValue,ExpiryBusinessRule,SecurityEntityID
)X

--Select * from #TEMP

--Select ExpiryBusinessRule, ValuationDate,	CurrentValue as ValuationAmount,
--ValuationExpiryDate,CollateralID,SecurityEntityID from [Curdat].[AdvSecurityValueDetail] 
--WHERE CollateralID='1000218'

Declare @CollateralID1 Varchar(30)
Declare @ValuationDate datetime	
Declare @ValuationAmount decimal(16, 2)	
Declare @ValuationExpiryDate datetime
DEclare @ExpiryBusinessRule Varchar(100)
Declare @Count INT,@I INT,@MaxRowNumber INT,@SecondMaxRowNumber INT
Declare @SecurityID BigINT

Select ROW_NUMBER() OVER( ORDER BY (select 1)) ROWID,CollateralID INTO #TEMP1 from(
Select   Distinct CollateralID  from #TEMP
)Y

--Select * from #TEMP
--Select * from #TEMP1
SET @CollateralID1=''
SET @ValuationDate=NULL
SET @ValuationAmount=0
SET @ValuationExpiryDate=NULL
SET @ExpiryBusinessRule=''
SET @Count=0
SET @I=1
SET @MaxRowNumber=0
SET @SecondMaxRowNumber=0
SET @SecurityID=0

Select @Count=Count(*) from #TEMP1
PRINT 'SacStart'
WHILE(@I<=@Count)
  BEGIN
  PRINT 'Sac'
       SELECT @CollateralID1=CollateralID from #TEMP1 WHERE ROWID=@I
	   PRINT '@CollateralID1'
	   PRINT @CollateralID1
	   SELECT @MaxRowNumber=MAX(RowNumber) from #TEMP WHERE CollateralID=@CollateralID1
	   PRINT '@MaxRowNumber'
	   PRINT @MaxRowNumber
	   IF (@MaxRowNumber)>0
			BEGIN
			  Select @ExpiryBusinessRule=ISNULL(ExpiryBusinessRule,''),@ValuationDate=ValuationDate,
			  @ValuationAmount=ValuationAmount,@ValuationExpiryDate=ValuationExpiryDate,@SecurityID=SecurityEntityID
			  from #TEMP where RowNumber= @MaxRowNumber AND CollateralID=@CollateralID1
			END
			INSERT INTO #temp13([RowNumber],[1stValDoc],[1stValuationDate],[1stValuationAmount],[1stValuationExpiryDate],
			[CollateralID],[SecurityEntityID]) 
			Values(1,@ExpiryBusinessRule,Convert(date,@ValuationDate),@ValuationAmount,Convert(date,@ValuationExpiryDate),
			@CollateralID1,@SecurityID)
				--select '#temp13',* from #temp13	
			SET @MaxRowNumber=@MaxRowNumber-1
		
		     --SET @CollateralID=''
			SET @ValuationDate=NULL
			SET @ValuationAmount=0
			SET @ValuationExpiryDate=NULL
			SET @ExpiryBusinessRule=''
			SET @SecurityID=0

		IF (@MaxRowNumber)>0
		    BEGIN
			  Select @ExpiryBusinessRule=ISNULL(ExpiryBusinessRule,''),@ValuationDate=ValuationDate,
			  @ValuationAmount=ValuationAmount,@ValuationExpiryDate=ValuationExpiryDate,@SecurityID=SecurityEntityID
			  from #TEMP where RowNumber= @MaxRowNumber AND CollateralID=@CollateralID1
			
			INSERT INTO #temp13([RowNumber],[1stValDoc],[1stValuationDate],[1stValuationAmount],[1stValuationExpiryDate],
			[CollateralID],[SecurityEntityID]) 
			Values(2,@ExpiryBusinessRule,Convert(date,@ValuationDate),@ValuationAmount,Convert(date,@ValuationExpiryDate),
			@CollateralID1,@SecurityID)
			END
			SET @I=@I+1

			 SET @CollateralID1=''
			SET @ValuationDate=NULL
			SET @ValuationAmount=0
			SET @ValuationExpiryDate=NULL
			SET @ExpiryBusinessRule=''

  END
					

				
			------select '#temp13',* from #temp13		
					
	Update P
	SET P.ExpiryBusinessRule=A.ValSource_ExpBusinessRule,
		P.ValuationDate=A.DtofValuation,
		P.CurrentValue=A.ValueConsidered,
	     P. ValuationExpiryDate= Case When D.ExpirationPeriod<>0 Then DATEADD(M,Convert(int,	D.ExpirationPeriod),A.DtofValuation) Else A.Expirydate END 

	FROM [CollateralDetailUpload_Mod] A
	Left JOIN [Curdat].[AdvSecurityValueDetail] P ON P.CollateralID=A.CollateralIDModification
	Left JOIN #temp13 C  ON C.CollateralID=A.CollateralIDModification
	Left JOIN DimValueExpiration D  ON A.ValSource_ExpBusinessRule=D.Documents
 		WHERE    A.UploadId=@UniqueUploadID and A.EffectiveToTimeKey>=@Timekey

		and C.RowNumber=1  --and A.CollateralSubType in('Immovable Fixed assets')
			and DtofValuation is not NULL and ValueConsidered<>0 AND A.ACTION='M'
			And P.SecurityEntityID in(
			Select Min(SecurityEntityID) from #temp13 group By CollateralID
			)


	--		Select A.*,P.SecurityEntityID	
	--FROM [CollateralDetailUpload_Mod] A
	--Left JOIN [Curdat].[AdvSecurityValueDetail] P ON P.CollateralID=A.CollateralIDModification
	--Left JOIN #temp13 C  ON C.CollateralID=A.CollateralIDModification
 --		WHERE  A.UploadId=142 and A.EffectiveToTimeKey>=26002 

	--	and C.RowNumber=2  and A.CollateralSubType in('Immovable Fixed assets')
	--		and DtofValuation is not NULL and ValueConsidered<>0 AND A.ACTION='M'
	--		And P.SecurityEntityID in(
	--		Select Max(SecurityEntityID) from #temp13 group By CollateralID
	--		)
			                                
			
	Update P
	SET P.ExpiryBusinessRule=A.ValSource_ExpBusinessRule,
		P.ValuationDate=A.SecondDtofValuation,
		P.CurrentValue=A.SecondValuation,
		   P. ValuationExpiryDate= Case When D.ExpirationPeriod<>0 Then DATEADD(M,Convert(int,	D.ExpirationPeriod),A.SecondDtofValuation) Else A.Expirydate END 

	
	FROM [CollateralDetailUpload_Mod] A
	INNER JOIN [Curdat].[AdvSecurityValueDetail] P ON P.CollateralID=A.CollateralIDModification
   INNER JOIN #temp13 C  ON C.CollateralID=A.CollateralIDModification
   Left JOIN DimValueExpiration D  ON A.ValSource_ExpBusinessRule=D.Documents
			WHERE   A.UploadId=@UniqueUploadID and A.EffectiveToTimeKey>=@Timekey and A.CollateralSubType in('Immovable Fixed assets')
			 and C.RowNumber=2
			and DtofValuation is not NULL and ValueConsidered<>0 AND A.ACTION='M'
			And P.SecurityEntityID in(
			Select MAX(SecurityEntityID) from #temp13 group By CollateralID
			)


	--			Select A.*,P.SecurityEntityID
	--FROM [CollateralDetailUpload_Mod] A
	--INNER JOIN [Curdat].[AdvSecurityValueDetail] P ON P.CollateralID=A.CollateralIDModification
 --  INNER JOIN #temp13 C  ON C.CollateralID=A.CollateralIDModification
	--		WHERE   A.UploadId=142 and A.EffectiveToTimeKey>=26002 and A.CollateralSubType in('Immovable Fixed assets')
	--		 and C.RowNumber=2
	--		and DtofValuation is not NULL and ValueConsidered<>0 AND A.ACTION='M'
	--		And P.SecurityEntityID in(
	--		Select MAX(SecurityEntityID) from #temp13 group By CollateralID
	--		)

----For Subsequent----


			Update  A
			Set A.EffectiveToTimeKey=A.EffectiveFromTimeKey-1
			from [Curdat].[AdvSecurityDetail] A
			inner join [CollateralDetailUpload_Mod] B
			ON A.CollateralID=B.CollateralIDModification
			AND B.EffectiveFromTimeKey <=@Timekey
			AND B.EffectiveToTimeKey >=@Timekey
			Where B.UploadId=@UniqueUploadID
			 AND B.ACTION='S'
			
			

		
		--Declare @SecurityEntityID      Bigint

		 Select @SecurityEntityID=  MAX(ISNULL(SecurityEntityID,0)) from [Curdat].[AdvSecurityDetail]

					 IF (@SecurityEntityID IS NULL)
					    Begin 
							SET   @SecurityEntityID=1
						END
					ELSE 
					    SET    @SecurityEntityID=@SecurityEntityID+1
						
			
						
						PRINT '@SecurityEntityID'
					    PRINT @SecurityEntityID

						 SET dateformat DMY

			INSERT INTO [Curdat].[AdvSecurityDetail]
		(
			CollateralID,
			LiabID,
				UCICID,
				CustomerName,
				AssetID,
				Segment,
				CRE,
				CollateralSubTypeAlt_Key,
				NameSecuPvd,
				SeniorityofCharge,
				SecurityStatus,
				FDNO,
				ISINNo,
				FolioNo,
				QtyShares_MutualFunds_Bonds,
				Line_No,
				CrossCollateral_LiabID,
				PropertyAdd,
				PIN,
				DtStockAudit,
				SBLCIssuingBank,
				SBLCNumber,
				CurSBLCissued,
				SBLCFCY,
				DtexpirySBLC,
				DtexpiryLIC,
				ModeOperation,
				ExceApproval,
			SecurityEntityID,
			TaggingAlt_Key,
				 AuthorisationStatus,
		     EffectiveFromTimeKey,
			EffectiveToTimeKey,
			CreatedBy,
			DateCreated,
			ModifiedBy,
			DateModified,
			ApprovedBy,
			DateApproved
		   																					
						
		)
			SELECT 
			CollateralIDModification,
			LiabID,
						UCIC,
						CustName,
						AssetID,
						B.SegmentAlt_Key,
						H.ParameterAlt_Key as CRE,
						C.CollateralSubTypeAltKey,
						NameSecuPv,
						I.ParameterAlt_Key as SeniorityCharge,
						K.ParameterAlt_Key as   SecurityStatus,
						FDNO,
						ISINNo_FolioNumber,
						ISINNo_FolioNumber,

						QtyShares_MutualFunds_Bonds,
						Line_No,
						CrossCollateral_LiabID,
						PropertyAdd,
						PIN,
						DtStockAudit,
						O.BankAlt_Key as SBLCIssuingBank,
						SBLCNumber,
						CurSBLCissued,
						SBLCFCY,
						DtexpirySBLC,
						DtexpiryLIC,
					    L.ParameterAlt_Key as   ModeOperation,
						M.ParameterAlt_Key ExceApproval,
				@SecurityEntityID+Row_Number()Over(order by (Select 1)),
				 4,
					A.AuthorisationStatus,
					@Timekey,
					49999,
					A.CreatedBy,
					A.DateCreated,
					A.ModifiedBy,
					A.DateModified,
					@UserLoginID,
					Getdate()
					
					
			FROM [CollateralDetailUpload_Mod] A
			
			LEFT JOIN DimCollateralSubType C ON A.CollateralSubType=C.CollateralSubTypeDescription
			LEFT JOIN DimSegment  B ON A.Segment=B.SegmentName
   --         Left Join DimCollateralOwnerType D ON A.CollateralOwnerType=D.CollOwnerDescription
			--Left Join DimCollateralChargeType F ON A.ChargeType=F.CollChargeDescription
			--Left Join DimSecurityChargeType G ON A.ChargeNature =G.SecurityChargeTypeName
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'CREMaster' as Tablename 
						from DimParameter where DimParameterName='DimYesNo'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)H
						ON H.ParameterName=A.CRE
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'SeniorityOfChargeMaster' as Tablename 
						from DimParameter where DimParameterName='DimSeniorityOfCharge'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)I
						ON I.ParameterName=A.SeniorityCharge
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'SecurityStatusMaster' as Tablename 
						from DimParameter where DimParameterName='DimSecuritySt'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)K
						ON K.ParameterName=A.SecurityStatus
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'ModeOfOperationMaster' as Tablename 
						from DimParameter where DimParameterName='DimModOperation'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)L
						ON L.ParameterName=A.ModeOperation
			LEFT Join (

						Select  ParameterAlt_Key,ParameterName,'ExceptionalApprovalMaster' as Tablename 
						from DimParameter where DimParameterName='DimExceptionalAppr'
						And EffectiveFromTimeKey<=@TimeKey And EffectiveToTimeKey>=@TimeKey)M
						ON M.ParameterName=A.ExceApproval
			left joIN ( Select  BankAlt_Key,BankName
						from DimBank A 	 where	 A.EffectiveFromTimeKey<=@TimeKey		
						AND A.EffectiveToTimeKey >=@TimeKey)O		
						ON A.sblcissuingBank = O.BankName			 
									
									
												

						
			WHERE  A.UploadId=@UniqueUploadID and A.EffectiveToTimeKey>=@Timekey AND A.ACTION='S'

			Select @SecurityEntityID=  MAX(ISNULL(SecurityEntityID,0)) from [Curdat].[AdvSecurityValueDetail]

					 IF (@SecurityEntityID IS NULL)
					    Begin 
							SET   @SecurityEntityID=1
						END
					ELSE 
					    SET    @SecurityEntityID=@SecurityEntityID+1
						
			
						
						PRINT '@SecurityEntityID'
					    PRINT @SecurityEntityID

			INSERT INTO [Curdat].[AdvSecurityValueDetail](
					 
					 CollateralID,
					 ExpiryBusinessRule,
					 ValuationDate,
					  CurrentValue,
					SecurityEntityID,
					Periodinmonth,
					ValuationExpiryDate
					 
					
					,EffectiveFromTimeKey
					,EffectiveToTimeKey
					,CreatedBy
					,DateCreated
					,ModifiedBy
					,DateModified
					,ApprovedBy
					,DateApproved
					
						
						)

			Select CollateralIDModification,ValSource_ExpBusinessRule,DtofValuation,ValueConsidered,SecurityEntityID,Periodinmonth,ValuationExpiryDate,
			EffectiveFromTimeKey,EffectiveToTimeKey,CreatedBy,DateCreated,ModifiedBy,DateModified,UserNm,Userdt from(
			SELECT    ROW_NUMBER() OVER(PARTITION BY A.CollateralID  ORDER BY  A.CollateralID) as Rownumber ,
			CollateralIDModification,
			           ValSource_ExpBusinessRule,
					DtofValuation	,
				 Convert(decimal(16,2),ISNULL(ValueConsidered,'0')) as ValueConsidered,
					
					@SecurityEntityID+Row_Number()Over(order by (Select 1)) SecurityEntityID,
					D.ExpirationPeriod as Periodinmonth,
					 Case When D.ExpirationPeriod<>0 Then DATEADD(M,Convert(int,	D.ExpirationPeriod),A.DtofValuation) Else A.Expirydate END as ValuationExpiryDate
					,@Timekey EffectiveFromTimeKey,49999 EffectiveToTimeKey
					,A.CreatedBy
					,A.DateCreated
					,A.ModifiedBy
					,A.DateModified
					,@UserLoginID UserNm
					,Getdate() Userdt
                   FROM [CollateralDetailUpload_Mod] A
				   LEFT JOIN DimCollateralSubType C ON A.CollateralSubType=C.CollateralSubTypeDescription
				   Left JOIN DimValueExpiration D  ON A.ValSource_ExpBusinessRule=D.Documents
			WHERE  A.UploadId=@UniqueUploadID and A.EffectiveToTimeKey>=@Timekey AND A.ACTION='S'
			
) X Where X.Rownumber=1


SET @SecurityEntityID=0

               
			Select @SecurityEntityID=  MAX(ISNULL(SecurityEntityID,0)) from [Curdat].[AdvSecurityValueDetail]

					 IF (@SecurityEntityID IS NULL)
					    Begin 
							SET   @SecurityEntityID=1
						END
					ELSE 
					    SET    @SecurityEntityID=@SecurityEntityID+1
						
			
						
						PRINT '@SecurityEntityID'
					    PRINT @SecurityEntityID

				INSERT INTO [Curdat].[AdvSecurityValueDetail](
					 
					 CollateralID,
					 ExpiryBusinessRule,
					 ValuationDate,
					  CurrentValue,
					SecurityEntityID,
					Periodinmonth,
					ValuationExpiryDate
					 
					
					,EffectiveFromTimeKey
					,EffectiveToTimeKey
					,CreatedBy
					,DateCreated
					,ModifiedBy
					,DateModified
					,ApprovedBy
					,DateApproved
					
						
						)

			Select CollateralIDModification,ValSource_ExpBusinessRule,DtofValuation,ValueConsidered,SecurityEntityID,Periodinmonth,ValuationExpiryDate,
			EffectiveFromTimeKey,EffectiveToTimeKey,CreatedBy,DateCreated,ModifiedBy,DateModified,UserNm,Userdt from(
			SELECT    ROW_NUMBER() OVER(PARTITION BY A.CollateralID  ORDER BY  A.CollateralID) as Rownumber , 
			           CollateralIDModification,
			           ValSource_ExpBusinessRule,
					  SecondDtofValuation as  DtofValuation	,
				     Convert(decimal(16,2),ISNULL(SecondValuation,'0'))   as ValueConsidered,
					
					@SecurityEntityID+Row_Number()Over(order by (Select 1)) SecurityEntityID,
					D.ExpirationPeriod as Periodinmonth,
					 Case When D.ExpirationPeriod<>0 Then DATEADD(M,Convert(int,	D.ExpirationPeriod),A.SecondDtofValuation) Else A.Expirydate END as ValuationExpiryDate
					,@Timekey EffectiveFromTimeKey,49999 EffectiveToTimeKey
					,A.CreatedBy
					,A.DateCreated
					,A.ModifiedBy
					,A.DateModified
					,@UserLoginID UserNm
					,Getdate() Userdt
                   FROM [CollateralDetailUpload_Mod] A
				   LEFT JOIN DimCollateralSubType C ON A.CollateralSubType=C.CollateralSubTypeDescription
				   Left JOIN DimValueExpiration D  ON A.ValSource_ExpBusinessRule=D.Documents
			WHERE  A.UploadId=@UniqueUploadID and A.EffectiveToTimeKey>=@Timekey and A.CollateralSubType in('Immovable Fixed assets')
			and DtofValuation is not NULL and ValueConsidered<>0 AND A.ACTION='S'
			and SecondDtofValuation is not NULL and SecondValuation<>0
			
) X Where X.Rownumber=1


				UPDATE
				ExcelUploadHistory
				SET AuthorisationStatus='A',ApprovedBy=@UserLoginID,DateApproved=GETDATE()
				WHERE EffectiveFromTimeKey<=@Timekey AND EffectiveToTimeKey>=@Timekey
				AND UniqueUploadID=@UniqueUploadID
				AND UploadType='Colletral Detail Upload'

				


	END


	IF (@OperationFlag=17)----REJECT

	BEGIN
		
		UPDATE 
			[CollateralDetailUpload_Mod] 
			SET 
			AuthorisationStatus	='R'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			
			WHERE UploadId=@UniqueUploadID
			AND AuthorisationStatus='NP'

			UPDATE 
			[CollateralDetailUpload_Mod] 
			SET 
			AuthorisationStatus	='R'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			
			WHERE UploadId=@UniqueUploadID
			AND AuthorisationStatus='NP'
			----SELECT * FROM IBPCPoolDetail

			UPDATE
				ExcelUploadHistory
				SET AuthorisationStatus='R',ApprovedBy=@UserLoginID,DateApproved=GETDATE()
				WHERE EffectiveFromTimeKey<=@Timekey AND EffectiveToTimeKey>=@Timekey
				AND UniqueUploadID=@UniqueUploadID
				AND UploadType='Colletral Detail Upload'



	END

IF (@OperationFlag=21)----REJECT

	BEGIN
		
		UPDATE 
			[CollateralDetailUpload_Mod] 
			SET 
			AuthorisationStatus	='R'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			
			WHERE UploadId=@UniqueUploadID
			AND AuthorisationStatus in('NP','1A')

			UPDATE 
			[CollateralDetailUpload_Mod] 
			SET 
			AuthorisationStatus	='R'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			
			WHERE UploadId=@UniqueUploadID
			AND AuthorisationStatus in('NP','1A')
			----SELECT * FROM IBPCPoolDetail

			UPDATE
				ExcelUploadHistory
				SET AuthorisationStatus='R',ApprovedBy=@UserLoginID,DateApproved=GETDATE()
				WHERE EffectiveFromTimeKey<=@Timekey AND EffectiveToTimeKey>=@Timekey
				AND UniqueUploadID=@UniqueUploadID
				AND UploadType='Colletral Detail Upload'



	END


END


	--COMMIT TRAN
		---SET @Result=CASE WHEN  @OperationFlag=1 THEN @UniqueUploadID ELSE 1 END
		SET @Result=CASE WHEN  @OperationFlag=1 AND @MenuId=24702 THEN @ExcelUploadId 
					ELSE 1 END

		
		 Update UploadStatus Set InsertionOfData='Y',InsertionCompletedOn=GETDATE() where FileNames=@filepath

		 ---- IF EXISTS(SELECT 1 FROM IBPCPoolDetail_stg WHERE filEname=@FilePathUpload)
		 ----BEGIN
			----	 DELETE FROM IBPCPoolDetail_stg
			----	 WHERE filEname=@FilePathUpload

			----	 PRINT 'ROWS DELETED FROM IBPCPoolDetail_stg'+CAST(@@ROWCOUNT AS VARCHAR(100))
		 ----END
		 

		RETURN @Result
		--RETURN @ExcelUploadId
	END TRY
	BEGIN CATCH 
	   --ROLLBACK TRAN
	   --PRINT 'CatchDelete'
	   --PRINT 'UniqueUploadID'
	   --PRINT @UniqueUploadID
	   --PRINT 'ExcelUploadId'
	   --PRINT @ExcelUploadId

	   Delete from ExcelUploadHistory WHERE UniqueUploadID=@ExcelUploadId
				--AND UniqueUploadID=@UniqueUploadID
				--AND UploadType='Colletral Detail Upload'
	SELECT ERROR_MESSAGE(),ERROR_LINE()
	SET @Result=-1
	 Update UploadStatus Set InsertionOfData='Y',InsertionCompletedOn=GETDATE() where FileNames=@filepath
	RETURN -1
	END CATCH

END


GO