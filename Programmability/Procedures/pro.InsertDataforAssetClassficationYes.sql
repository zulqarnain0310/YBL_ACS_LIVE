SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO


/*=========================================
 AUTHER : SANJEEV KUMAR SHARMA
 CREATE DATE : 15-04-2018
 MODIFY DATE : 15-04-2018
 MODIFY DATE : 06-09-2022 --TRILOKI KHANNA
 DESCRIPTION : INSERT DATA FOR PRO.CUSTOMER CAL AND PRO.ACCOUNT CAL TABLE AND UPDATE SOME OTHER COLUMN
 EXEC [PRO].[INSERTDATAFORASSETCLASSFICATIONYES]  @TIMEKEY=26052
=============================================*/

CREATE PROCEDURE [pro].[InsertDataforAssetClassficationYes]
--@TIMEKEY INT 
WITH RECOMPILE
AS
BEGIN 
     SET NOCOUNT ON
  BEGIN  TRY-

DECLARE @TIMEKEY INT = (SELECT TIMEKEY FROM PRO.EXTDATE_MISDB WHERE FLG = 'Y')
DECLARE @PROCESSINGDATE DATE=(SELECT DATE FROM SYSDAYMATRIX WHERE TIMEKEY=@TIMEKEY)
DECLARE @SETID INT =(SELECT ISNULL(MAX(ISNULL(SETID,0)),0)+1 FROM [PRO].[PROCESSMONITOR] WHERE TIMEKEY=@TIMEKEY)
DECLARE @LastQtrDateKey INT=(select LastQtrDateKey from sysdaymatrix where timekey=@TIMEKEY)
DECLARE @LastFinYearKey INT=(select LastFinYearKey from sysdaymatrix where timekey=@TIMEKEY)
select @PROCESSINGDATE,@TIMEKEY,@LastQtrDateKey
----COVID PHASE II -------

DECLARE @PROCESSDATE DATE=(SELECT DATE FROM SYSDAYMATRIX WHERE TIMEKEY=@TIMEKEY)
DECLARE @PrevProcessingDate DATE=(select ISNULL(MAX(ProcessDate),'2019-12-31') from FraudAccountsDetails)
----Declare @Morotorium_Days int=184
----Declare @EffectiveFromDateMot date ='2020-03-01'
----Declare @EffectiveToDateMot date ='2020-08-31'

----------COVID PHASE II End-------

DECLARE @PANCARDFLAG CHAR(1)=(SELECT REFVALUE FROM PRO.REFPERIOD WHERE BUSINESSRULE='PANCARDNO' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
DECLARE @AADHARCARDFLAG CHAR(1)=(SELECT REFVALUE FROM PRO.REFPERIOD WHERE BUSINESSRULE='AADHARCARD' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
DECLARE @JOINTACCOUNTFLAG CHAR(1)=(SELECT REFVALUE FROM PRO.REFPERIOD WHERE BUSINESSRULE='JOINT ACCOUNT' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
DECLARE @UCFICFLAG CHAR(1)=(SELECT REFVALUE FROM PRO.REFPERIOD WHERE BUSINESSRULE='UCFIC' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
Declare @LookBackPeriod int
SELECT @LookBackPeriod=RefValue FROM pro.RefPeriod  WHERE BusinessRule = 'LookBackPeriod' AND EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY	
Declare @StartDt DATE

---Day one  changed by Tushar
--SELECT  @StartDt=DATEADD(day,-@LookBackPeriod,DATE) FROM SysDayMAtrix
--		      WHERE TimeKEy=@TimeKey

SELECT  @StartDt=DATEADD(day,-@LookBackPeriod,DATE) + 1 FROM SysDayMAtrix
		      WHERE TimeKEy=@TimeKey


Declare  @Timekey1 int
	select  @Timekey1=timekey from SysDayMatrix where Date =@StartDt


		TRUNCATE TABLE  PRO.CUSTOMERCAL
		TRUNCATE TABLE  PRO.ACCOUNTCAL
		--DELETE FROM    PRO.PROCESSMONITOR  WHERE TIMEKEY=@TIMEKEY   --Condition Added on [dbo].[DUPLICATEREMOVES] sp

		UPDATE PRO.ACLRUNNINGPROCESSSTATUS SET COMPLETED='N',COUNT=0,ERRORDESCRIPTION=NULL , ERRORDATE=NULL

		--New Condition Added where rat_conv_TCLCY More than 102  dated 13/06/2022
		Update YBL_ACS_MIS.DBO.ODS_FCR_CH_NOBOOK_CURR set rat_conv_TCLCY=1	FROM YBL_ACS_MIS.DBO.ODS_FCR_CH_NOBOOK_CURR WHERE ISNULL(rat_conv_TCLCY,0)>102

		-----AssetClass column length issue in pro.accountcal for GS ,so converting it 22-July-2020
		update YBL_ACS_MIS..ACCOUNTDATA set AssetClass ='WRITEOFF' where sourcesystemname ='GANASEVA' and AssetClass ='WRITTEN-OFF'

/*Added By Sourangshu BRNET ON LOCAL 20250101 ON UAT 20250107*/
		update YBL_ACS_MIS..ACCOUNTDATA 
		set AssetClass ='WRITEOFF' 
		where 
		sourcesystemname ='BRNET' 
		and AssetClass ='WRITTEN-OFF'
/*Added By Sourangshu BRNET ON LOCAL 20250101 ON UAT 20250107 END*/
		--------Change done on 20-April-2021 ,reference mail from Prasad CC on 09-April-2021
		-------Writeoff charge off accounts ,technically closed accounts
		delete from YBL_ACS_MIS..ACCOUNTDATA where sourcesystemname='visionplus' and accountstatus='Z' and isnull(TotalBalanceOutstandingINR,0) < =0

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'INSERT DATA FOR PRO.CUSTOMERCAL CAL TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

 /*------------------INSERT DATA FOR PRO.CUSTOMERCAL CAL TABLE------------------*/
INSERT INTO PRO.CUSTOMERCAL
(
EFFECTIVEFROMTIMEKEY
,EFFECTIVETOTIMEKEY				
,BRANCHCODE							
,CUSTOMERENTITYID	 
,REFCUSTOMERID	
,SOURCESYSTEMCUSTOMERID		 
,CUSTOMERNAME		                    	             
,CONSTITUTIONALT_KEY
,PROCESSINGDT
,FLGDEG
,FLGUPG
,FLGMOC
,FLGSMA
,FLGPROCESSING
,FLGEROSION
,FLGPNPA
,FLGPERCOLATION
,FLGINMONTH
,FLGDIRTYROW
,SRCNPA_DT
,SYSNPA_DT
,SPLCATG1ALT_KEY
,SPLCATG2ALT_KEY
,SPLCATG3ALT_KEY
,SPLCATG4ALT_KEY
,ASSET_NORM
,INMONTHMARK
,PRVQTRRV	
,CURNTQTRRV	
,TOTPROVISION
,SOURCEALT_KEY
,RBITOTPROVISION
,BANKTOTPROVISION
,CUST_EXPO
,MOCSTATUSMARK
,SRCASSETCLASSALT_KEY
,SYSASSETCLASSALT_KEY
)
SELECT                            
@TIMEKEY  EFFECTIVEFROMTIMEKEY
,@TIMEKEY EFFECTIVETOTIMEKEY
,'0' 
,CUSTOMERENTITYID
,'0' REFCUSTOMERID
, SOURCECUSTOMERID AS SOURCESYSTEMCUSTOMERID
,CUSTOMERNAME=NULL		                    	             
,CONSTITUTIONALT_KEY =0	
,PROCESSINGDT=@PROCESSINGDATE
,FLGDEG='N'
,FLGUPG='N'
,FLGMOC='N'
,FLGSMA='N'
,FLGPROCESSING='N'
,FLGEROSION='N'
,FLGPNPA='N'
,FLGPERCOLATION='N'
,FLGINMONTH='N'
,FLGDIRTYROW='N'
,SRCNPA_DT=NULL
,SYSNPA_DT=NULL
,SPLCATG1ALT_KEY=0
,SPLCATG2ALT_KEY=0
,SPLCATG3ALT_KEY=0
,SPLCATG4ALT_KEY=0
,'NORMAL' ASSET_NORM
,'N' INMONTHMARK
,0.00 PRVQTRRV	
,0.00 CURNTQTRRV	
,0.00 TOTPROVISION
,0 SOURCEALT_KEY
,0.00 RBITOTPROVISION
,0.00 BANKTOTPROVISION
,0.00 CUST_EXPO
,'N' MOCSTATUSMARK
,1 AS SRCASSETCLASSALT_KEY
,1 AS SYSASSETCLASSALT_KEY
FROM PRO.CUSTOMERMASTER A 
WHERE A.EFFECTIVETOTIMEKEY=49999

--UPDATE PRO.CUSTOMERCAL SET REFCUSTOMERID=SOURCESYSTEMCUSTOMERID WHERE REFCUSTOMERID='XXXXXXXXX'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='INSERT DATA FOR PRO.CUSTOMERCAL CAL TABLE'
/*------------------UPDATE SOURCEALT_KEY IN CUSTOMER CAL TABLE------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SOURCEALT_KEY IN CUSTOMER CAL TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


UPDATE A SET A.SOURCEALT_KEY=C.SOURCEALT_KEY,A.DATEOFDATA=B.DATA_DATE
FROM PRO.CUSTOMERCAL A INNER JOIN  YBL_ACS_MIS..CUSTOMERDATA B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
INNER JOIN DIMSOURCEDB C ON C.SOURCENAME=B.SOURCESYSTEMNAME
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)


---METAGRID TO GOLD
UPDATE  A SET A.SOURCEALT_KEY= (SELECT SOURCEALT_KEY FROM DIMSOURCEDB WHERE SOURCENAME='GOLD' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
FROM PRO.CUSTOMERCAL A INNER JOIN  YBL_ACS_MIS..CUSTOMERDATA B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE B.SOURCESYSTEMNAME='GOLD' AND ISNULL(SOURCEALT_KEY,0) =0

/*------------COMMENT DUE TO MUREX BASE PRESNT IN FCC/FCR  TRILOKI 14/01/2019-------------------*/
--UPDATE A SET A.SOURCEALT_KEY= (SELECT SOURCEALT_KEY FROM DIMSOURCEDB WHERE SOURCENAME='MUREX' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
--FROM PRO.CUSTOMERCAL A INNER JOIN YBL_ACS_MIS..ODS_MUREX_DPD_NPA B 
--ON A.SOURCESYSTEMCUSTOMERID='INV'+CAST( B.CONTRACTORIGINREFERENCE AS VARCHAR(60))
--AND  ISNULL(SOURCEALT_KEY,0) =0

UPDATE A SET A.SOURCEALT_KEY= (SELECT SOURCEALT_KEY FROM DIMSOURCEDB WHERE SOURCENAME='MUREX' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
FROM PRO.CUSTOMERCAL A INNER JOIN YBL_ACS_MIS..ODS_MUREX_DPD_NPA B 
ON A.SOURCESYSTEMCUSTOMERID=B.FCC_CUSTOMERID
AND  ISNULL(SOURCEALT_KEY,0) =0 --AND B.MATCH_FCR='N'

 --E-CBF TO ECBF
UPDATE A SET A.SOURCEALT_KEY= (SELECT SOURCEALT_KEY FROM DIMSOURCEDB WHERE SOURCENAME='ECBF' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
FROM PRO.CUSTOMERCAL A INNER JOIN YBL_ACS_MIS.[DBO].[ODS_ECBF_BORROWERMST]  B 
ON A.SOURCESYSTEMCUSTOMERID=B.UBSCUSTOMERID
AND  ISNULL(SOURCEALT_KEY,0) =0
--E-IFS TO EIFS
UPDATE  A SET A.SOURCEALT_KEY= (SELECT SOURCEALT_KEY FROM DIMSOURCEDB WHERE SOURCENAME='EIFS' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
FROM PRO.CUSTOMERCAL A INNER JOIN  YBL_ACS_MIS..CUSTOMERDATA B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE B.SOURCESYSTEMNAME='EIFS' AND ISNULL(SOURCEALT_KEY,0) =0

UPDATE A SET A.SOURCEALT_KEY=C.SOURCEALT_KEY
FROM PRO.CUSTOMERCAL A INNER JOIN  YBL_ACS_MIS..CUSTOMERDATA B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
INNER JOIN DIMSOURCEDB C ON C.SOURCENAME=B.SOURCESYSTEMNAME
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE B.SOURCESYSTEMNAME='FCR'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SOURCEALT_KEY IN CUSTOMER CAL TABLE'

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SOURCEALT_KEY IN CUSTOMER CAL TABLE CREDAVENUE_DA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE  A SET A.SOURCEALT_KEY= (SELECT SOURCEALT_KEY FROM DIMSOURCEDB WHERE SOURCENAME='CREDAVENUE_DA' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
FROM PRO.CUSTOMERCAL A INNER JOIN  YBL_ACS_MIS..CustomerData_CA B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE B.SOURCESYSTEMNAME='CREDAVENUE_DA' AND ISNULL(SOURCEALT_KEY,0) =0

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND 
 TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SOURCEALT_KEY IN CUSTOMER CAL TABLE CREDAVENUE_DA'


/*-----UPDATE CUSTOMER NAME|CUSTSEGMENTCODE|REFCUSTOMERID|BRANCHCODE -----------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE CUSTOMER NAME|CUSTSEGMENTCODE|REFCUSTOMERID|BRANCHCODE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A  SET A.CUSTOMERNAME=B.CUSTOMERNAME
             ,A.CUSTSEGMENTCODE=B.CUSTOMERBUSINESSSEGMENT
			 ,A.REFCUSTOMERID=B.FCR_CUSTOMERID
			 ,A.BRANCHCODE=B.BRANCHCODE
FROM PRO.CUSTOMERCAL A INNER JOIN YBL_ACS_MIS..CUSTOMERDATA B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID

--E-CBF TO ECBF
UPDATE C SET C.CUSTSEGMENTCODE=B.SEGMENTCODE
FROM YBL_ACS_MIS.[DBO].[ODS_ECBF_BORROWERMST] A  INNER JOIN YBL_ACS_MIS.DBO.ODS_ECBF_SEGMENTMST B ON A.SEGMENTID=B.SEGMENTID
INNER JOIN PRO.CUSTOMERCAL C ON C.SOURCESYSTEMCUSTOMERID=A.UBSCUSTOMERID
INNER JOIN DIMSOURCEDB D ON D.SOURCEALT_KEY=C.SOURCEALT_KEY
AND D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY
AND D.SOURCENAME='ECBF'

/*------------------MUREX CUSTOMER DATA------------------*/
--UPDATE A SET A.CUSTOMERNAME=B.COUNTERPARTLABEL,
--             A.REFCUSTOMERID=B.FCC_CUSTOMERID
--FROM   PRO.CUSTOMERCAL A INNER JOIN  YBL_ACS_MIS..ODS_MUREX_DPD_NPA B 
--ON A.SOURCESYSTEMCUSTOMERID= 'INV'+CAST(B.CONTRACTORIGINREFERENCE AS VARCHAR(60))
--INNER JOIN DIMSOURCEDB C ON A.SOURCEALT_KEY=C.SOURCEALT_KEY
--WHERE C.SOURCENAME = 'MUREX'AND A.CUSTOMERNAME IS NULL 
-- AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY

UPDATE A SET A.CUSTOMERNAME=B.COUNTERPARTLABEL,
             A.REFCUSTOMERID=B.FCC_CUSTOMERID
			 FROM   PRO.CUSTOMERCAL A INNER JOIN  YBL_ACS_MIS..ODS_MUREX_DPD_NPA B 
ON A.SOURCESYSTEMCUSTOMERID= B.FCC_CUSTOMERID
INNER JOIN DIMSOURCEDB C ON A.SOURCEALT_KEY=C.SOURCEALT_KEY
WHERE C.SOURCENAME = 'MUREX'AND A.CUSTOMERNAME IS NULL 
 AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY
 --AND B.MATCH_FCR='N'

 
 --UPDATE A SET A.DATEOFDATA=B.DATE_OF_DATA
 UPDATE A SET A.DATEOFDATA = @PROCESSINGDATE
FROM   PRO.CUSTOMERCAL A INNER JOIN  YBL_ACS_MIS..ODS_MUREX_DPD_NPA B 
ON A.SOURCESYSTEMCUSTOMERID= B.FCC_CUSTOMERID
INNER JOIN DIMSOURCEDB C ON A.SOURCEALT_KEY=C.SOURCEALT_KEY
WHERE C.SOURCENAME = 'MUREX'
AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CUSTOMER NAME|CUSTSEGMENTCODE|REFCUSTOMERID|BRANCHCODE'

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE CUSTOMER NAME|CUSTSEGMENTCODE|REFCUSTOMERID|BRANCHCODE CREDAVENUE_DA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A  SET A.CUSTOMERNAME=B.CUSTOMERNAME
             ,A.CUSTSEGMENTCODE=B.CUSTOMERBUSINESSSEGMENT
			 ,A.REFCUSTOMERID=B.FCR_CUSTOMERID
			 ,A.BRANCHCODE=B.BRANCHCODE
FROM PRO.CUSTOMERCAL A INNER JOIN YBL_ACS_MIS..CustomerData_CA B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
INNER JOIN DIMSOURCEDB C ON A.SOURCEALT_KEY=C.SOURCEALT_KEY
WHERE C.SOURCENAME = 'CREDAVENUE_DA'AND A.CUSTOMERNAME IS NULL 


 UPDATE A SET A.DATEOFDATA=B.Data_Date
FROM   PRO.CUSTOMERCAL A INNER JOIN  YBL_ACS_MIS..CustomerData_CA B 
ON A.SOURCESYSTEMCUSTOMERID= B.SourceSystemCustomerID
INNER JOIN DIMSOURCEDB C ON A.SOURCEALT_KEY=C.SOURCEALT_KEY
WHERE C.SOURCENAME = 'CREDAVENUE_DA'
 AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND 
 TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CUSTOMER NAME|CUSTSEGMENTCODE|REFCUSTOMERID|BRANCHCODE CREDAVENUE_DA'


/*------------------UPDATE REFCUSTOMERID FOR MUREX IN PRO.CUSTOMERCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE REFCUSTOMERID FOR MUREX IN PRO.CUSTOMERCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.REFCUSTOMERID=A.SOURCESYSTEMCUSTOMERID
FROM PRO.CUSTOMERCAL A INNER JOIN DIMSOURCEDB B ON A.SOURCEALT_KEY=B.SOURCEALT_KEY
WHERE (REFCUSTOMERID IS NULL OR REFCUSTOMERID='' ) AND B.SOURCENAME = 'MUREX'  
AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY

UPDATE C SET C.REFCUSTOMERID=A.UBSCUSTOMERID
FROM YBL_ACS_MIS.[DBO].[ODS_ECBF_BORROWERMST] A 
INNER JOIN PRO.CUSTOMERCAL C ON C.SOURCESYSTEMCUSTOMERID=A.UBSCUSTOMERID
INNER JOIN DIMSOURCEDB D ON D.SOURCEALT_KEY=C.SOURCEALT_KEY
AND D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY
AND D.SOURCENAME='ECBF'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE REFCUSTOMERID FOR MUREX IN PRO.CUSTOMERCAL'
/*------------------UPDATE UCIC ID/UCIC ENTITY ID------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE UCIC ID/UCIC ENTITY ID','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.UCIFENTITYID=C.UCIFENTITYID
            ,A.UCIF_ID=C.UCIFID
FROM PRO.CUSTOMERCAL A 
INNER JOIN YBL_ACS_MIS..CUSTOMERDATA B 
ON A.REFCUSTOMERID=B.FCR_CUSTOMERID
INNER JOIN PRO.UCIFIDMASTER C ON B.UCIC_ID=C.UCIFID

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE UCIC ID/UCIC ENTITY ID'

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE UCIC ID/UCIC ENTITY ID CREDAVENUE_DA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.UCIFENTITYID=C.UCIFENTITYID
            ,A.UCIF_ID=C.UCIFID
FROM PRO.CUSTOMERCAL A 
INNER JOIN YBL_ACS_MIS..CustomerData_CA B 
ON A.REFCUSTOMERID=B.FCR_CUSTOMERID
INNER JOIN PRO.UCIFIDMASTER C ON B.UCIC_ID=C.UCIFID

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND 
 TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE UCIC ID/UCIC ENTITY ID CREDAVENUE_DA'

/*------------------UPDATE PANNO IN CUSTOMER CAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE PANNO','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.PANNO=B.PAN FROM PRO.CUSTOMERCAL A 
INNER JOIN YBL_ACS_MIS..CUSTOMERDATA B 
ON  A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE (B.PAN LIKE '%[A-Z][A-Z][A-Z][A-Z][A-Z][0-9][0-9][0-9][0-9][A-Z]%')
AND( PAN NOT LIKE '%FORMO%' AND PAN NOT LIKE '%FORPM%' AND PAN NOT LIKE '%FORMF%' )


UPDATE PRO.CUSTOMERCAL SET  PANNO=NULL WHERE PANNO='FORMO6161O'
UPDATE PRO.CUSTOMERCAL SET  PANNO=NULL WHERE PANNO='FORPM6060F'
UPDATE PRO.CUSTOMERCAL SET PANNO=NULL WHERE PANNO='FORPM6060P'
UPDATE PRO.CUSTOMERCAL SET  PANNO=NULL WHERE PANNO='FORMF6060F'
UPDATE PRO.CUSTOMERCAL SET PANNO=NULL WHERE PANNO='AAAAA1111A'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE PANNO'

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE PANNO CREDAVENUE_DA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.PANNO=B.PAN FROM PRO.CUSTOMERCAL A 
INNER JOIN YBL_ACS_MIS..CustomerData_CA B 
ON  A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE (B.PAN LIKE '%[A-Z][A-Z][A-Z][A-Z][A-Z][0-9][0-9][0-9][0-9][A-Z]%')
AND( PAN NOT LIKE '%FORMO%' AND PAN NOT LIKE '%FORPM%' AND PAN NOT LIKE '%FORMF%' )
AND A.PANNO IS NULL

UPDATE PRO.CUSTOMERCAL SET  PANNO=NULL WHERE PANNO='FORMO6161O'
UPDATE PRO.CUSTOMERCAL SET  PANNO=NULL WHERE PANNO='FORPM6060F'
UPDATE PRO.CUSTOMERCAL SET PANNO=NULL WHERE PANNO='FORPM6060P'
UPDATE PRO.CUSTOMERCAL SET  PANNO=NULL WHERE PANNO='FORMF6060F'
UPDATE PRO.CUSTOMERCAL SET PANNO=NULL WHERE PANNO='AAAAA1111A'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND 
 TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE PANNO CREDAVENUE_DA'


/*------------------UPDATE AADHAR NUMBER IN CUSTOMER CAL------------------*/

--INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
--SELECT ORIGINAL_LOGIN(),'UPDATE AADHAR NUMBER IN CUSTOMER CAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID
----AS PER MAIL DATED 13/02/2019 AADHARCARD NUMBER SHOULD NOT BE UPDATED IN CRISMAC SYSTEM---
----UPDATE A SET A.AADHARCARDNO=B.AADHARCARD FROM PRO.CUSTOMERCAL A 
----INNER JOIN YBL_ACS_MIS..CUSTOMERDATA B 
----ON  A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
----WHERE LEN(LTRIM(RTRIM(B.AADHARCARD)))=12 AND B.AADHARCARD LIKE '%[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%'

--UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='000000000000'
--UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='111111111111'
--UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='222222222222'
--UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='333333333333'
--UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='444444444444'
--UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='555555555555'
--UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='666666666666'
--UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='777777777777'
--UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='888888888888'
--UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='999999999999'

--UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE AADHAR NUMBER IN CUSTOMER CAL'

/*------------------INSERT INVALID PANCARDNO|AADHARCARDNO------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'INSERT INVALID PANCARDNO|AADHARCARDNO','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

 DELETE  FROM  PRO.INVALIDPANAADHAR WHERE EFFECTIVEFROMTIMEKEY=@TIMEKEY AND EFFECTIVETOTIMEKEY=@TIMEKEY

INSERT INTO PRO.INVALIDPANAADHAR
(
DATEOFDATA
,CUSTOMERID
,SOURCESYSTEMCUSTOMERID
,CUSTOMERNAME
,SOURCESYSTEMNAME
,PANNO
,AADHARCARD
,EFFECTIVEFROMTIMEKEY
,EFFECTIVETOTIMEKEY
)
SELECT @PROCESSINGDATE,B.FCR_CUSTOMERID,B.SOURCESYSTEMCUSTOMERID,B.CUSTOMERNAME ,B.SOURCESYSTEMNAME,B.PAN,NULL,@TIMEKEY,@TIMEKEY FROM PRO.CUSTOMERCAL A 
INNER JOIN YBL_ACS_MIS..CUSTOMERDATA B 
ON  A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE (B.PAN NOT LIKE '%[A-Z][A-Z][A-Z][A-Z][A-Z][0-9][0-9][0-9][0-9][A-Z]%')
AND (B.PAN IS NOT NULL)
UNION ALL

SELECT @PROCESSINGDATE,B.FCR_CUSTOMERID,B.SOURCESYSTEMCUSTOMERID,B.CUSTOMERNAME ,B.SOURCESYSTEMNAME,B.PAN,NULL,@TIMEKEY,@TIMEKEY FROM PRO.CUSTOMERCAL A 
INNER JOIN YBL_ACS_MIS..CUSTOMERDATA B 
ON  A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE  ( PAN  LIKE '%FORMO%'  OR  PAN  LIKE '%FORPM%')
UNION ALL
SELECT @PROCESSINGDATE,B.FCR_CUSTOMERID,B.SOURCESYSTEMCUSTOMERID,B.CUSTOMERNAME ,B.SOURCESYSTEMNAME,B.PAN,NULL,@TIMEKEY,@TIMEKEY FROM PRO.CUSTOMERCAL A 
INNER JOIN YBL_ACS_MIS..CustomerData_CA B 
ON  A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE (B.PAN NOT LIKE '%[A-Z][A-Z][A-Z][A-Z][A-Z][0-9][0-9][0-9][0-9][A-Z]%')
AND (B.PAN IS NOT NULL)
UNION ALL

SELECT @PROCESSINGDATE,B.FCR_CUSTOMERID,B.SOURCESYSTEMCUSTOMERID,B.CUSTOMERNAME ,B.SOURCESYSTEMNAME,B.PAN,NULL,@TIMEKEY,@TIMEKEY FROM PRO.CUSTOMERCAL A 
INNER JOIN YBL_ACS_MIS..CustomerData_CA B 
ON  A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE  ( PAN  LIKE '%FORMO%'  OR  PAN  LIKE '%FORPM%')


INSERT INTO PRO.INVALIDPANAADHAR
(
DATEOFDATA
,CUSTOMERID
,SOURCESYSTEMCUSTOMERID
,CUSTOMERNAME
,SOURCESYSTEMNAME
,PANNO
,AADHARCARD
,EFFECTIVEFROMTIMEKEY
,EFFECTIVETOTIMEKEY
)
SELECT @PROCESSINGDATE,B.FCR_CUSTOMERID,B.SOURCESYSTEMCUSTOMERID,B.CUSTOMERNAME ,B.SOURCESYSTEMNAME,NULL,B.AADHARCARD,@TIMEKEY,@TIMEKEY FROM PRO.CUSTOMERCAL A 
INNER JOIN YBL_ACS_MIS..CUSTOMERDATA B 
ON  A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE  B.AADHARCARD NOT LIKE '%[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%'
AND (B.AADHARCARD IS NOT NULL) 
union all
SELECT @PROCESSINGDATE,B.FCR_CUSTOMERID,B.SOURCESYSTEMCUSTOMERID,B.CUSTOMERNAME ,B.SOURCESYSTEMNAME,NULL,B.AADHARCARD,@TIMEKEY,@TIMEKEY FROM PRO.CUSTOMERCAL A 
INNER JOIN YBL_ACS_MIS..CustomerData_CA B 
ON  A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE  B.AADHARCARD NOT LIKE '%[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%'
AND (B.AADHARCARD IS NOT NULL) 

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='INSERT INVALID PANCARDNO|AADHARCARDNO'


/*------------------UPDATE SRCASSETCLASSALT_KEY|SYSASSETCLASSALT_KEY|SYSNPA_DT|SRCNPA_DT------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SRCASSETCLASSALT_KEY|SYSASSETCLASSALT_KEY|SYSNPA_DT|SRCNPA_DT','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

----As per Bank Mail Only Src Asset Class and Date Should be Updated from Soure System Triloki Khanna 30112022

UPDATE B SET B.SRCASSETCLASSALT_KEY= (CASE WHEN A.ASSETCLASS IN(1,2) THEN 1 
                                           WHEN A.ASSETCLASS IN(3,4) THEN 2
										   WHEN ISNULL(A.ASSETCLASS,'N') ='Y' THEN 2
                                          ELSE 1 END )
             --,B.SYSASSETCLASSALT_KEY=(CASE WHEN A.ASSETCLASS IN(1,2) THEN 1 
             --                              WHEN A.ASSETCLASS IN(3,4) THEN 2
										   --WHEN ISNULL(A.ASSETCLASS,'N') ='Y' THEN 2
             --                             ELSE 1 END )
			-- ,B.SYSNPA_DT= (CASE WHEN  (A.ASSETCLASS IN(1,2) OR ISNULL(A.ASSETCLASS,'N')='N' ) THEN NULL ELSE  A.CUSTOMERNPA_DATE END) 
			 ,B.SRCNPA_DT= (CASE WHEN  (A.ASSETCLASS IN(1,2) OR ISNULL(A.ASSETCLASS,'N')='N') THEN NULL ELSE A.CUSTOMERNPA_DATE END)
FROM YBL_ACS_MIS..CUSTOMERDATA  A RIGHT OUTER JOIN PRO.CUSTOMERCAL B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID

----As per Bank Mail Only Src Asset Class and Date Should be Updated from Soure System Triloki Khanna 30112022

UPDATE B SET B.SRCASSETCLASSALT_KEY= (CASE WHEN A.ASSETCLASS IN(1,2) THEN 1 
                                           WHEN A.ASSETCLASS IN(3,4) THEN 2
										   WHEN ISNULL(A.ASSETCLASS,'N') ='Y' THEN 2
                                          ELSE 1 END )
             --,B.SYSASSETCLASSALT_KEY=(CASE WHEN A.ASSETCLASS IN(1,2) THEN 1 
             --                              WHEN A.ASSETCLASS IN(3,4) THEN 2
										   --WHEN ISNULL(A.ASSETCLASS,'N') ='Y' THEN 2
             --                             ELSE 1 END )
			-- ,B.SYSNPA_DT= (CASE WHEN  (A.ASSETCLASS IN(1,2) OR ISNULL(A.ASSETCLASS,'N')='N' ) THEN NULL ELSE  A.CUSTOMERNPA_DATE END) 
			 ,B.SRCNPA_DT= (CASE WHEN  (A.ASSETCLASS IN(1,2) OR ISNULL(A.ASSETCLASS,'N')='N') THEN NULL ELSE A.CUSTOMERNPA_DATE END)
FROM YBL_ACS_MIS..CUSTOMERDATA  A RIGHT OUTER JOIN PRO.CUSTOMERCAL B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE A.SOURCESYSTEMNAME='FCR'


UPDATE B SET BANKASSETCLASS=A.ASSETCLASS
FROM YBL_ACS_MIS..CUSTOMERDATA A
INNER JOIN  PRO.CUSTOMERCAL B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID


----As per Bank Mail Only Src Asset Class and Date Should be Updated from Soure System Triloki Khanna 30112022

IF OBJECT_ID('TEMPDB..#TEMPTABLEFINNONE_ASSETCLASS') IS NOT NULL
  DROP TABLE #TEMPTABLEFINNONE_ASSETCLASS

SELECT  SOURCESYSTEMCUSTOMERID,  MAX(CASE WHEN ASSETCLASS IN('NPA') THEN 2 WHEN ASSETCLASS ='REGULAR' THEN 1 ELSE 1 END) ASSETCLASS ,
MIN(CASE WHEN ASSETCLASS ='REGULAR' THEN NULL ELSE  NPADATE END) NPADATE  
INTO #TEMPTABLEFINNONE_ASSETCLASS
FROM YBL_ACS_MIS.[DBO].ACCOUNTDATA  
WHERE SOURCESYSTEMNAME='FINNONE'
AND YBL_ACS_MIS.[DBO].ACCOUNTDATA.ASSETCLASS='NPA'
GROUP BY SOURCESYSTEMCUSTOMERID

IF OBJECT_ID('TEMPDB..#MAXNPADPDFINNONE') IS NOT NULL
  DROP TABLE #MAXNPADPDFINNONE

SELECT A.SOURCESYSTEMCUSTOMERID,MAX(B.MAXDPD) AS MAXDPD INTO #MAXNPADPDFINNONE  FROM #TEMPTABLEFINNONE_ASSETCLASS A
INNER JOIN YBL_ACS_MIS.[DBO].ACCOUNTDATA B  ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE  A.ASSETCLASS=2 AND B.MAXDPD>0
GROUP BY  A.SOURCESYSTEMCUSTOMERID


UPDATE B SET NPADATE=DATEADD(DAY,-A.MAXDPD,@PROCESSINGDATE)
FROM #MAXNPADPDFINNONE A INNER JOIN #TEMPTABLEFINNONE_ASSETCLASS B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE B.NPADATE IS NULL

UPDATE A SET A.SRCASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
           -- ,A.SYSASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
		    ,A.SRCNPA_DT=B.NPADATE
		   -- ,A.SYSNPA_DT=B.NPADATE
FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEFINNONE_ASSETCLASS B
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID





IF OBJECT_ID('TEMPDB..#TEMPTABLEFINNONE_ASSETCLASSWriteOff') IS NOT NULL
  DROP TABLE #TEMPTABLEFINNONE_ASSETCLASSWriteOff

SELECT  SOURCESYSTEMCUSTOMERID,  MAX(CASE WHEN ASSETCLASS IN('WRITEOFF') THEN 2 WHEN ASSETCLASS ='REGULAR' THEN 1 ELSE 1 END) ASSETCLASS ,
MIN(CASE WHEN ASSETCLASS ='REGULAR' THEN NULL ELSE  NPADATE END) NPADATE  
INTO #TEMPTABLEFINNONE_ASSETCLASSWriteOff
FROM YBL_ACS_MIS.[DBO].ACCOUNTDATA  
WHERE SOURCESYSTEMNAME='FINNONE'
AND YBL_ACS_MIS.[DBO].ACCOUNTDATA.ASSETCLASS='WRITEOFF'
GROUP BY SOURCESYSTEMCUSTOMERID

IF OBJECT_ID('TEMPDB..#MAXNPADPDFINNONEWRITEOFF') IS NOT NULL
  DROP TABLE #MAXNPADPDFINNONEWRITEOFF

SELECT A.SOURCESYSTEMCUSTOMERID,MAX(B.MAXDPD) AS MAXDPD INTO #MAXNPADPDFINNONEWRITEOFF  FROM #TEMPTABLEFINNONE_ASSETCLASSWriteOff A
INNER JOIN YBL_ACS_MIS.[DBO].ACCOUNTDATA B  ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE  A.ASSETCLASS=2 AND B.MAXDPD>0
GROUP BY  A.SOURCESYSTEMCUSTOMERID


UPDATE B SET NPADATE=DATEADD(DAY,-A.MAXDPD,@PROCESSINGDATE)
FROM #MAXNPADPDFINNONEWRITEOFF A INNER JOIN #TEMPTABLEFINNONE_ASSETCLASSWriteOff B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE B.NPADATE IS NULL

UPDATE A SET A.SRCASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
           ,A.SYSASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
		    ,A.SRCNPA_DT=B.NPADATE
		    ,A.SYSNPA_DT=B.NPADATE
FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEFINNONE_ASSETCLASSWriteOff B
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID


IF OBJECT_ID('TEMPDB..#TEMPTABLEGANASEVA_ASSETCLASS') IS NOT NULL
  DROP TABLE #TEMPTABLEGANASEVA_ASSETCLASS

SELECT  SOURCESYSTEMCUSTOMERID,
MAX(CASE WHEN NPADATE IS NOT NULL THEN 2 ELSE 1 END ) ASSETCLASS
,MIN(CASE WHEN NPADATE IS NOT NULL THEN NPADATE ELSE  NPADATE END) NPADATE   
INTO #TEMPTABLEGANASEVA_ASSETCLASS
FROM YBL_ACS_MIS.[DBO].ACCOUNTDATA  
WHERE SOURCESYSTEMNAME='GANASEVA' AND NPADATE IS NOT NULL
GROUP BY SOURCESYSTEMCUSTOMERID---,NPADATE   group by condition changed 18/11/2019

----As per Bank Mail Only Src Asset Class and Date Should be Updated from Soure System Triloki Khanna 30112022

UPDATE A SET A.SRCASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
           -- ,A.SYSASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
		    ,A.SRCNPA_DT=B.NPADATE
		    --,A.SYSNPA_DT=B.NPADATE
FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEGANASEVA_ASSETCLASS B
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID

/*Added By Sourangshu BRNET ON LOCAL 20250101 ON UAT 20250107*/

IF OBJECT_ID('TEMPDB..#TEMPTABLEBRNET_ASSETCLASS') IS NOT NULL
  DROP TABLE #TEMPTABLEBRNET_ASSETCLASS

SELECT  SOURCESYSTEMCUSTOMERID,
MAX(
CASE WHEN NPADATE IS NOT NULL 
THEN 2 
ELSE 1 
END ) ASSETCLASS
,MIN(
CASE WHEN NPADATE IS NOT NULL 
THEN NPADATE 
ELSE  NPADATE 
END) NPADATE   
INTO #TEMPTABLEBRNET_ASSETCLASS
FROM YBL_ACS_MIS..ACCOUNTDATA
WHERE SOURCESYSTEMNAME='BRNET' 
AND NPADATE IS NOT NULL
GROUP BY SOURCESYSTEMCUSTOMERID


UPDATE A SET A.SRCASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
           -- ,A.SYSASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
		    ,A.SRCNPA_DT=B.NPADATE
		    --,A.SYSNPA_DT=B.NPADATE
FROM PRO.CUSTOMERCAL A 
INNER JOIN #TEMPTABLEBRNET_ASSETCLASS B
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID

/*Added By Sourangshu BRNET ON LOCAL 20250101 ON UAT 20250107 END*/

IF OBJECT_ID('TEMPDB..#TEMPTABLEFCC_ASSETCLASS') IS NOT NULL
  DROP TABLE #TEMPTABLEFCC_ASSETCLASS

SELECT  SOURCESYSTEMCUSTOMERID,  MAX(CASE WHEN ASSETCLASS IN('NPA','NPA1') THEN 2  ELSE 1 END) ASSETCLASS 
,MIN(CASE WHEN NPADATE IS NOT NULL THEN NPADATE ELSE  NPADATE END) NPADATE   
INTO #TEMPTABLEFCC_ASSETCLASS
FROM YBL_ACS_MIS.[DBO].ACCOUNTDATA  
WHERE SOURCESYSTEMNAME='FCC' AND ASSETCLASS IN('NPA','NPA1')
GROUP BY SOURCESYSTEMCUSTOMERID

----As per Bank Mail Only Src Asset Class and Date Should be Updated from Soure System Triloki Khanna 30112022

UPDATE A SET A.SRCASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
            --,A.SYSASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
		    ,A.SRCNPA_DT=B.NPADATE
		   -- ,A.SYSNPA_DT=B.NPADATE
FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEFCC_ASSETCLASS B
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
--HANDLE NPA DATE CONDITION IS BOTH CUSTOMER PRESENT IN FCC AND FCR 09082019-------
WHERE  A.SRCNPA_DT>B.NPADATE  

----As per Bank Mail Only Src Asset Class and Date Should be Updated from Soure System Triloki Khanna 30112022

UPDATE A SET A.SRCASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
           -- ,A.SYSASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
		    ,A.SRCNPA_DT=B.NPADATE
		    --,A.SYSNPA_DT=B.NPADATE
FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEFCC_ASSETCLASS B
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE  A.SRCNPA_DT IS NULL --4) FCC source system asset class issue AS PER MAIL Changes in ENPA system as per Audit Observatio 29/12/2021

-----FCC Writeoff cases to be Mark NPA 29-05-2020---------------------

IF OBJECT_ID('TEMPDB..#TEMPTABLEFCC_ASSETCLASSWF') IS NOT NULL
  DROP TABLE #TEMPTABLEFCC_ASSETCLASSWF

 --Audit changes on 01/06/2022
--SELECT  SOURCESYSTEMCUSTOMERID,  2 as ASSETCLASS   
--INTO #TEMPTABLEFCC_ASSETCLASSWF
--FROM YBL_ACS_MIS.[DBO].ACCOUNTDATA  
--WHERE SOURCESYSTEMNAME in ('FCC','FCR') AND productcode in  ('WA01','WA02','WA03','WA04' )
--GROUP BY SOURCESYSTEMCUSTOMERID

SELECT  SOURCESYSTEMCUSTOMERID,  2 as ASSETCLASS   
INTO #TEMPTABLEFCC_ASSETCLASSWF
FROM YBL_ACS_MIS.[DBO].ACCOUNTDATA  
WHERE SOURCESYSTEMNAME in ('FCC') AND productcode like 'WA%' ----New added --Audit changes on 01/06/2022
GROUP BY SOURCESYSTEMCUSTOMERID

UPDATE A SET --A.SRCASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
            A.SYSASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEFCC_ASSETCLASSWF B
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
where SYSASSETCLASSALT_KEY =1

----FCC Writeoff END------------------------

------IF OBJECT_ID('TEMPDB..#TEMPTABLE_VISIONPLUS_ASSETCLASS') IS NOT NULL
------  DROP TABLE #TEMPTABLE_VISIONPLUS_ASSETCLASS

--SELECT  SOURCESYSTEMCUSTOMERID,MAX(CASE WHEN CD IN(5,6,7,8,9) OR ISNULL(ACCOUNTSTATUS,'N')='Z' THEN 2 ELSE 1 END ) ASSETCLASS ,
--MIN(CASE WHEN CD IN(5,6,7,8,9) THEN NPADATE ELSE NULL END) NPADATE  
--INTO #TEMPTABLE_VISIONPLUS_ASSETCLASS
--FROM YBL_ACS_MIS.[DBO].ACCOUNTDATA  
--WHERE SOURCESYSTEMNAME='VISIONPLUS'
--GROUP BY SOURCESYSTEMCUSTOMERID
---AS PER DISCUSSION STICK NPA SHOULD ALSO PART OF NPA 14/05/2019------
--comment 31Aug2021
--SELECT  SOURCESYSTEMCUSTOMERID,
--MAX(CASE WHEN CD IN(5,6,7,8,9) OR ISNULL(ACCOUNTSTATUS,'N')='Z'  OR  (ACCOUNTBLKCODE1 ='A' 
--AND CD IN (2,3,4) AND ISNULL(ACCOUNTSTATUS,'N')<>'Z') THEN 2 ELSE 1 END ) ASSETCLASS ,
--MIN(CASE WHEN CD IN(5,6,7,8,9) THEN NPADATE ELSE NULL END) NPADATE  
--INTO #TEMPTABLE_VISIONPLUS_ASSETCLASS
--FROM YBL_ACS_MIS.[DBO].ACCOUNTDATA  
--WHERE SOURCESYSTEMNAME='VISIONPLUS'
--GROUP BY SOURCESYSTEMCUSTOMERID
----VisionPlus Sticky NPA Patch 31Aug2021 by TRILOKI
------------ Live a.	Existing check for Block Code 1 = A to be removed and the NPA date passed from V+ (MISC_USER_7) field to be validated 04/06/2021--

------SELECT  SOURCESYSTEMCUSTOMERID,
------MAX(CASE WHEN CD IN(5,6,7,8,9) OR ISNULL(ACCOUNTSTATUS,'N')='Z'  OR  (NPADATE is not null
------AND CD IN (2,3,4) AND ISNULL(ACCOUNTSTATUS,'N')<>'Z') THEN 2 ELSE 1 END ) ASSETCLASS ,
------MIN(CASE WHEN CD IN(5,6,7,8,9) THEN NPADATE ELSE NULL END) NPADATE  
------INTO #TEMPTABLE_VISIONPLUS_ASSETCLASS
------FROM YBL_ACS_MIS.[DBO].ACCOUNTDATA  
------WHERE SOURCESYSTEMNAME='VISIONPLUS'
------GROUP BY SOURCESYSTEMCUSTOMERID

------IF OBJECT_ID('TEMPDB..#MAXDPD') IS NOT NULL
------  DROP TABLE #MAXDPD

------SELECT A.SOURCESYSTEMCUSTOMERID,MIN(B.MAXDPD) AS MAXDPD INTO #MAXDPD  FROM #TEMPTABLE_VISIONPLUS_ASSETCLASS A
------INNER JOIN YBL_ACS_MIS.[DBO].ACCOUNTDATA B  ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
------WHERE  A.ASSETCLASS=2 AND B.MAXDPD>0
------GROUP BY  A.SOURCESYSTEMCUSTOMERID

-----------Deduction of 89 days from DPD as NPA date will be always after 89 days (29-May-2019)
-----------Deduction of 90 days from DPD as NPA date will be always after 89 days (mail dated :19-Nov-2020 from somasunder)

------UPDATE B SET NPADATE=DATEADD(DAY,-(A.MAXDPD-90),@PROCESSINGDATE)
------FROM #MAXDPD A INNER JOIN #TEMPTABLE_VISIONPLUS_ASSETCLASS B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
------WHERE B.NPADATE IS NULL and A.MAXDPD>=90
-----------------------------------

------UPDATE B SET NPADATE=DATEADD(DAY,-A.MAXDPD,@PROCESSINGDATE)
------FROM #MAXDPD A INNER JOIN #TEMPTABLE_VISIONPLUS_ASSETCLASS B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
------WHERE B.NPADATE IS NULL

------UPDATE A SET A.SRCASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
------            ,A.SYSASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
------		    ,A.SRCNPA_DT=B.NPADATE
------		    ,A.SYSNPA_DT=B.NPADATE
------FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLE_VISIONPLUS_ASSETCLASS B
------ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID



--UPDATE A SET InitialAssetClassAlt_Key=2,InitialNpaDt=NPADate
--FROM PRO.AccountCal A
--INNER JOIN YBL_ACS_MIS.[DBO].ACCOUNTDATA B
--ON A.CustomerAcID=B.AccountID
--WHERE B.SourceSystemName='VISIONPLUS' AND B.ASSETCLASS IN('SUB','NPA/SUB','WRITEOFF')

--UPDATE A SET InitialAssetClassAlt_Key=3,InitialNpaDt=NPADate
--FROM PRO.AccountCal A
--INNER JOIN YBL_ACS_MIS.[DBO].ACCOUNTDATA B
--ON A.CustomerAcID=B.AccountID
--WHERE B.SourceSystemName='VISIONPLUS' AND B.ASSETCLASS IN('DB1','NPA/DB1')

--UPDATE A SET InitialAssetClassAlt_Key=4,InitialNpaDt=NPADate
--FROM PRO.AccountCal A
--INNER JOIN YBL_ACS_MIS.[DBO].ACCOUNTDATA B
--ON A.CustomerAcID=B.AccountID
--WHERE B.SourceSystemName='VISIONPLUS' AND B.ASSETCLASS IN('DB2','NPA/DB2')

--UPDATE A SET InitialAssetClassAlt_Key=5,InitialNpaDt=NPADate
--FROM PRO.AccountCal A
--INNER JOIN YBL_ACS_MIS.[DBO].ACCOUNTDATA B
--ON A.CustomerAcID=B.AccountID
--WHERE B.SourceSystemName='VISIONPLUS' AND B.ASSETCLASS IN('DB3','NPA/DB3')

--UPDATE A SET InitialAssetClassAlt_Key=6,InitialNpaDt=NPADate
--FROM PRO.AccountCal A
--INNER JOIN YBL_ACS_MIS.[DBO].ACCOUNTDATA B
--ON A.CustomerAcID=B.AccountID
--WHERE B.SourceSystemName='VISIONPLUS' AND B.ASSETCLASS IN('LOS','NPA/LOS')

--IF OBJECT_ID('TEMPDB..#TEMPTABLE_VISIONPLUS_SourceSystemCustomerID') IS NOT NULL
--  DROP TABLE #TEMPTABLE_VISIONPLUS_SourceSystemCustomerID

--select SourceSystemCustomerID,max(InitialAssetClassAlt_Key) AS InitialAssetClassAlt_Key,
--min(InitialNpaDt) AS InitialNpaDt
-- INTO #TEMPTABLE_VISIONPLUS_SourceSystemCustomerID
-- from PRO.AccountCal A
-- INNER JOIN  DIMSOURCEDB B  ON B.SOURCEALT_KEY=A.SOURCEALT_KEY
--AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
--where B.SOURCENAME='VISIONPLUS'and InitialAssetClassAlt_Key >1
--GROUP BY SourceSystemCustomerID

IF OBJECT_ID('TEMPDB..#TEMPTABLE_VISIONPLUS_SourceSystemCustomerID') IS NOT NULL
  DROP TABLE #TEMPTABLE_VISIONPLUS_SourceSystemCustomerID


select SourceSystemCustomerID,max(case when B.ASSETCLASS IN('SUB','NPA/SUB') OR ISNULL(ACCOUNTSTATUS,'N')='Z' then 2 
  when B.ASSETCLASS IN('DB1','NPA/DB1') then 3 
 when B.ASSETCLASS IN('DB2','NPA/DB2') then 4 
   when B.ASSETCLASS IN('DB3','NPA/DB3') then 5 
 when B.ASSETCLASS IN('LOS','NPA/LOS') then 6  end )ASSETCLASS,
min(NPADATE) NPADATE
INTO #TEMPTABLE_VISIONPLUS_SourceSystemCustomerID
 from YBL_ACS_MIS.[DBO].ACCOUNTDATA  B
where b.SourceSystemName='VISIONPLUS'  and  B.ACCOUNTBLKCODE1  not in('W','G','O','U','T')  and  B.ACCOUNTBLKCODE2  not in('W','G','O','U','T')   --B.AccountBlkCode1 <> 'W' and  B.AccountBlkCode2 <>'W' and
GROUP BY SourceSystemCustomerID

UPDATE  B SET 
SRCASSETCLASSALT_KEY=isnull(ASSETCLASS,1),
SRCNPA_DT=NPADATE
FROM  #TEMPTABLE_VISIONPLUS_SourceSystemCustomerID A
INNER JOIN  PRO.CustomerCal  B
ON A.SourceSystemCustomerID=B.SourceSystemCustomerID
---Writeoff Cases
UPDATE  A SET 
            A.SRCASSETCLASSALT_KEY= ISNULL(B.ASSETCLASS,1)
            ,A.SYSASSETCLASSALT_KEY =ISNULL(B.ASSETCLASS,1)
		    ,A.SRCNPA_DT =B.NPADATE
		    ,A.SYSNPA_DT =B.NPADATE
FROM  #TEMPTABLE_VISIONPLUS_SourceSystemCustomerID B
INNER JOIN  PRO.CustomerCal  A
ON B.SourceSystemCustomerID=A.SourceSystemCustomerID
INNER JOIN  YBL_ACS_MIS.[DBO].ACCOUNTDATA  C
ON B.SourceSystemCustomerID=C.SourceSystemCustomerID and A.SourceSystemCustomerID=c.SourceSystemCustomerID
where  C.SourceSystemName='VISIONPLUS' and ISNULL(ACCOUNTSTATUS,'N')='Z'  and C.ACCOUNTBLKCODE1  not in('W','G','O','U','T')  and  C.ACCOUNTBLKCODE2  not in('W','G','O','U','T') --C.AccountBlkCode1 <> 'W'and  c.AccountBlkCode2 <>'W'







--UPDATE C SET SRCASSETCLASSALT_KEY=2,SYSASSETCLASSALT_KEY=2,SRCNPA_DT=NPADate,SYSNPA_DT=NPADate
--FROM PRO.AccountCal A
--INNER JOIN YBL_ACS_MIS.[DBO].ACCOUNTDATA B ON A.CustomerAcID=B.AccountID
--INNER JOIN PRO.CustomerCal C ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
--WHERE B.SourceSystemName='VISIONPLUS' AND B.ASSETCLASS IN('SUB','NPA/SUB','WRITEOFF')

--UPDATE C SET SRCASSETCLASSALT_KEY=2,SYSASSETCLASSALT_KEY=2,SRCNPA_DT=NPADate,SYSNPA_DT=NPADate
--FROM PRO.AccountCal A
--INNER JOIN YBL_ACS_MIS.[DBO].ACCOUNTDATA B ON A.CustomerAcID=B.AccountID
--INNER JOIN PRO.CustomerCal C ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
--WHERE B.SourceSystemName='VISIONPLUS' AND B.ASSETCLASS IN('DB1','NPA/DB1')

--UPDATE C SET SRCASSETCLASSALT_KEY=2,SYSASSETCLASSALT_KEY=2,SRCNPA_DT=NPADate,SYSNPA_DT=NPADate
--FROM PRO.AccountCal A
--INNER JOIN YBL_ACS_MIS.[DBO].ACCOUNTDATA B ON A.CustomerAcID=B.AccountID
--INNER JOIN PRO.CustomerCal C ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
--WHERE B.SourceSystemName='VISIONPLUS' AND B.ASSETCLASS IN('DB2','NPA/DB2')

--UPDATE C SET SRCASSETCLASSALT_KEY=2,SYSASSETCLASSALT_KEY=2,SRCNPA_DT=NPADate,SYSNPA_DT=NPADate
--FROM PRO.AccountCal A
--INNER JOIN YBL_ACS_MIS.[DBO].ACCOUNTDATA B ON A.CustomerAcID=B.AccountID
--INNER JOIN PRO.CustomerCal C ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
--WHERE B.SourceSystemName='VISIONPLUS' AND B.ASSETCLASS IN('DB3','NPA/DB3')

--UPDATE C SET SRCASSETCLASSALT_KEY=2,SYSASSETCLASSALT_KEY=2,SRCNPA_DT=NPADate,SYSNPA_DT=NPADate
--FROM PRO.AccountCal A
--INNER JOIN YBL_ACS_MIS.[DBO].ACCOUNTDATA B ON A.CustomerAcID=B.AccountID
--INNER JOIN PRO.CustomerCal C ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
--WHERE B.SourceSystemName='VISIONPLUS' AND B.ASSETCLASS IN('LOS','NPA/LOS')



------Murex NPA marking  16-July-2020-----

IF OBJECT_ID('TEMPDB..#TEMPTABLEMurex_ASSETCLASS') IS NOT NULL
  DROP TABLE #TEMPTABLEMurex_ASSETCLASS

SELECT  FCC_CustomerID, 2 as ASSETCLASS ,PRO.GETMINIMUMDATE(CTP_NPA_DATE,ISS_NPA_DATE,NULL) AS NPADATE   
INTO #TEMPTABLEMurex_ASSETCLASS
from YBL_ACS_MIS.[dbo].[ODS_MUREX_DPD_NPA]   
where ((CTP_NPA_FLAG='Y' and CTP_NPA_DATE is not null) or (ISS_NPA_FLAG ='Y' and ISS_NPA_DATE is not null))
and FCC_CustomerID is not null

----As per Bank Mail Only Src Asset Class and Date Should be Updated from Soure System Triloki Khanna 30112022

UPDATE A SET A.SRCASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
           -- ,A.SYSASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
		    ,A.SRCNPA_DT=B.NPADATE
		    --,A.SYSNPA_DT=B.NPADATE
FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEMurex_ASSETCLASS B
ON A.RefCustomerID=B.FCC_CustomerID
where SYSASSETCLASSALT_KEY =1

-----Murex NPA marking End 16-July-2020  ---------

--- ECFS &EIFS marking End 05-JAN-23---


IF OBJECT_ID('TEMPDB..#TEMPTABLEEIFSECFS_ASSETCLASS') IS NOT NULL
  DROP TABLE #TEMPTABLEEIFSECFS_ASSETCLASS  

SELECT  SOURCESYSTEMCUSTOMERID,  MAX(CASE WHEN ASSETCLASS IN('NPA') THEN 2 WHEN ASSETCLASS ='STD' THEN 1 ELSE 1 END) ASSETCLASS ,
MIN(CASE WHEN ASSETCLASS ='STD' THEN NULL ELSE  NPADATE END) NPADATE  
INTO #TEMPTABLEEIFSECFS_ASSETCLASS
FROM YBL_ACS_MIS.[DBO].ACCOUNTDATA  
WHERE SOURCESYSTEMNAME in ('ECFS','EIFS','GOLD')
GROUP BY SOURCESYSTEMCUSTOMERID



UPDATE A SET A.SRCASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
          ,A.SRCNPA_DT=B.NPADATE
		FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEEIFSECFS_ASSETCLASS B
		ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
		and a.SRCASSETCLASSALT_KEY =1



		IF OBJECT_ID('TEMPDB..#TEMPTABLEEIFSECFS_ASSETCLASSWRITEOFF') IS NOT NULL
  DROP TABLE #TEMPTABLEEIFSECFS_ASSETCLASSWRITEOFF

SELECT  SOURCESYSTEMCUSTOMERID,  MAX(CASE WHEN ASSETCLASS IN('WRITEOFF') THEN 2 WHEN ASSETCLASS ='STD' THEN 1 ELSE 1 END) ASSETCLASS ,
MIN(CASE WHEN ASSETCLASS ='STD' THEN NULL ELSE  NPADATE END) NPADATE  
INTO #TEMPTABLEEIFSECFS_ASSETCLASSWRITEOFF
FROM YBL_ACS_MIS.[DBO].ACCOUNTDATA  
WHERE SOURCESYSTEMNAME in ('ECFS','EIFS','GOLD') and ASSETCLASS IN('WRITEOFF') 
GROUP BY SOURCESYSTEMCUSTOMERID



UPDATE A SET A.SYSASSETCLASSALT_KEY=ISNULL(B.ASSETCLASS,1)
          ,A.SysNPA_DT=B.NPADATE
		FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEEIFSECFS_ASSETCLASSWRITEOFF B
		ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
		and a.SYSASSETCLASSALT_KEY =1



		--- ECFS &EIFS marking End 05-JAN-23---


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SRCASSETCLASSALT_KEY|SYSASSETCLASSALT_KEY|SYSNPA_DT|SRCNPA_DT'

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SRCASSETCLASSALT_KEY|SYSASSETCLASSALT_KEY|SYSNPA_DT|SRCNPA_DT CREDAVENUE_DA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE B SET B.SRCASSETCLASSALT_KEY= (CASE WHEN A.ASSETCLASS IN('STD') THEN 1 
                                           WHEN A.ASSETCLASS IN('SUB') THEN 2
										   WHEN A.ASSETCLASS IN('DB1') THEN 3
										   WHEN A.ASSETCLASS IN('DB2') THEN 4
										   WHEN A.ASSETCLASS IN('DB3') THEN 5
										   WHEN A.ASSETCLASS IN('LOS') THEN 6
										   WHEN ISNULL(A.ASSETCLASS,'N') ='Y' THEN 2
                                          ELSE 1 END )
             --,B.SYSASSETCLASSALT_KEY=(CASE WHEN A.ASSETCLASS IN('STD') THEN 1 
             --                              WHEN A.ASSETCLASS IN('SUB') THEN 2
										   --WHEN A.ASSETCLASS IN('DB1') THEN 3
										   --WHEN A.ASSETCLASS IN('DB2') THEN 4
										   --WHEN A.ASSETCLASS IN('DB3') THEN 5
										   --WHEN A.ASSETCLASS IN('LOS') THEN 6
										   --WHEN ISNULL(A.ASSETCLASS,'N') ='Y' THEN 2
             --                             ELSE 1 END )
			-- ,B.SYSNPA_DT= (CASE WHEN  (A.ASSETCLASS IN('STD') OR ISNULL(A.ASSETCLASS,'N')='N' ) THEN NULL ELSE  A.CUSTOMERNPA_DATE END) 
			 ,B.SRCNPA_DT= (CASE WHEN  (A.ASSETCLASS IN('STD') OR ISNULL(A.ASSETCLASS,'N')='N') THEN NULL ELSE A.CUSTOMERNPA_DATE END)
FROM YBL_ACS_MIS..CustomerData_CA  A RIGHT OUTER JOIN PRO.CUSTOMERCAL B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE A.SOURCESYSTEMNAME='CREDAVENUE_DA'
--and B.SRCASSETCLASSALT_KEY is null

UPDATE B SET BANKASSETCLASS=A.ASSETCLASS
FROM YBL_ACS_MIS..CustomerData_CA A
INNER JOIN  PRO.CUSTOMERCAL B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE BANKASSETCLASS IS NULL

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND 
 TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SRCASSETCLASSALT_KEY|SYSASSETCLASSALT_KEY|SYSNPA_DT|SRCNPA_DT CREDAVENUE_DA'


/*------------------2 A.UPDATE FRAUD  MARKING IN PRO.CUSTOMERCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) SELECT ORIGINAL_LOGIN(),'UPDATE FRAUD  MARKING  IN PRO.CUSTOMERCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


UPDATE A SET A.ASSET_NORM='ALWYS_NPA'
            ,A.SPLCATG1ALT_KEY=870
			,A.SPLCATG2ALT_KEY=870
			,A.SPLCATG3ALT_KEY=870
			,A.SPLCATG4ALT_KEY=870
			,A.FRAUDDT=DATEOFFRAUD
			,A.FRAUDAMOUNT=AMOUNTOFFRAUD
			,A.SYSASSETCLASSALT_KEY=6
			,A.DEGREASON='NPA DUE TO FRAUD MARKING'
			--,A.SYSNPA_DT=B.DATEOFFRAUD
FROM PRO.CUSTOMERCAL A INNER JOIN [DATAUPLOAD].[FRAUDACCOUNTSDATAUPLOAD] B 
ON A.REFCUSTOMERID=B.CUSTOMERID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE FRAUD  MARKING  IN PRO.CUSTOMERCAL'

UPDATE  A SET SYSNPA_DT=@PROCESSINGDATE FROM PRO.CUSTOMERCAL A  WHERE SYSASSETCLASSALT_KEY>1 AND SYSNPA_DT IS NULL

 --ADDED 17/02/2020----
UPDATE B SET 
            B.SYSASSETCLASSALT_KEY=A.CUST_ASSETCLASSALT_KEY
			,B.SYSNPA_DT=A.NPADT
			,B.DBTDT=A.DBTDT   
			,B.LOSSDT=A.LOSDT
			,B.DEGREASON=A.NPA_REASON
FROM CURDAT.ADVCUSTNPADETAIL A INNER JOIN PRO.CUSTOMERCAL B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
AND A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY
----ADDED 17/02/2020----


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SRCASSETCLASSALT_KEY|SYSASSETCLASSALT_KEY|SYSNPA_DT|SRCNPA_DT'

/*------------------UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY PAN NO------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY PAN NO','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID
IF ISNULL(@PANCARDFLAG,'N')='Y'
BEGIN

IF OBJECT_ID('TEMPDB..#TEMPTABLEPANCARD') IS NOT NULL
  DROP TABLE #TEMPTABLEPANCARD

	--SELECT PANNO,MAX(ISNULL(SYSASSETCLASSALT_KEY,1)) SYSASSETCLASSALT_KEY
	--,MIN(SYSNPA_DT) SYSNPA_DT ,B.SOURCEDBNAME
	-- INTO #TEMPTABLEPANCARD FROM PRO.CUSTOMERCAL A
	--  INNER JOIN DIMSOURCEDB  B ON B.SOURCEALT_KEY=A.SOURCEALT_KEY AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
	--  	WHERE PANNO IS NOT NULL AND  ISNULL(SYSASSETCLASSALT_KEY,1)<>1
	--GROUP BY  PANNO,B.SOURCEDBNAME

	--CHANGE LOGIC 28/02/2019 SAME PAN NUMBER IN MULTIPLE SYSTEM THEN NPA DATE ISSUE 

	SELECT PANNO,MAX(ISNULL(SYSASSETCLASSALT_KEY,1)) SYSASSETCLASSALT_KEY
	,MIN(SYSNPA_DT) SYSNPA_DT 
	 INTO #TEMPTABLEPANCARD FROM PRO.CUSTOMERCAL A
	  INNER JOIN DIMSOURCEDB  B ON B.SOURCEALT_KEY=A.SOURCEALT_KEY AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
	  WHERE PANNO IS NOT NULL AND  ISNULL(SYSASSETCLASSALT_KEY,1)<>1
	 GROUP BY  PANNO

	ALTER TABLE  #TEMPTABLEPANCARD ADD SOURCEDBNAME VARCHAR (20)

	--CHANGE LOGIC 28/02/2019 SAME PAN NUMBER IN MULTIPLE SYSTEM THEN NPA DATE ISSUE 
	
	UPDATE A SET SOURCEDBNAME=C.SOURCEDBNAME
	 FROM #TEMPTABLEPANCARD  A
	 INNER JOIN PRO.CUSTOMERCAL B ON A.PANNO=B.PANNO
	 INNER JOIN DIMSOURCEDB  C ON B.SOURCEALT_KEY=C.SOURCEALT_KEY  AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY 
	 WHERE A.SYSNPA_DT=B.SYSNPA_DT
	 	
		UPDATE A SET A.SYSASSETCLASSALT_KEY=B.SYSASSETCLASSALT_KEY
	             ,A.SYSNPA_DT=B.SYSNPA_DT  
	 FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEPANCARD B ON A.PANNO=B.PANNO

	 UPDATE A SET DEGREASON='PERCOLATION BY PAN CARD ' + ' ' + B.SOURCEDBNAME + '  ' + B.PANNO 
	  FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEPANCARD B ON A.PANNO=B.PANNO
	 WHERE A.SRCASSETCLASSALT_KEY=1 AND A.SYSASSETCLASSALT_KEY>1
	  AND A.DEGREASON IS NULL


	
END	 

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY PAN NO'

/*------------------UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY AADHAR CARD NO------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY AADHARCARD NO','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID
IF ISNULL(@AADHARCARDFLAG,'N')='Y'
BEGIN

IF OBJECT_ID('TEMPDB..#TEMPTABLE_ADHARCARD') IS NOT NULL
    DROP TABLE #TEMPTABLE_ADHARCARD

	SELECT AADHARCARDNO,MAX(ISNULL(SYSASSETCLASSALT_KEY,1)) SYSASSETCLASSALT_KEY
	,MIN(SYSNPA_DT) SYSNPA_DT ,B.SOURCEDBNAME

	 INTO #TEMPTABLE_ADHARCARD FROM PRO.CUSTOMERCAL A
	 INNER JOIN DIMSOURCEDB  B ON B.SOURCEALT_KEY=A.SOURCEALT_KEY AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
	WHERE A.AADHARCARDNO IS NOT NULL AND  ISNULL(A.SYSASSETCLASSALT_KEY,1)<>1

	GROUP BY  AADHARCARDNO,B.SOURCEDBNAME

	UPDATE A SET A.SYSASSETCLASSALT_KEY=B.SYSASSETCLASSALT_KEY
	             ,A.SYSNPA_DT=B.SYSNPA_DT  
	 FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLE_ADHARCARD B ON A.AADHARCARDNO=B.AADHARCARDNO
	 	 UPDATE A SET DEGREASON='PERCOLATION BY AADHAR CARD ' + ' ' + B.SOURCEDBNAME + '  ' + B.AADHARCARDNO 
	 	 FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLE_ADHARCARD B ON A.AADHARCARDNO=B.AADHARCARDNO
	 WHERE A. SRCASSETCLASSALT_KEY=1 AND A.SYSASSETCLASSALT_KEY>1
	  AND A.DEGREASON IS NULL
END	 

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY AADHARCARD NO'

/*------------------UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY JOINTACCOUNTFLAG------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY JOINTACCOUNTFLAG','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

IF ISNULL(@JOINTACCOUNTFLAG,'N')='Y'
BEGIN

IF OBJECT_ID('TEMPDB..#TEMPTABLE_JOINTACCOUNTFLAG') IS NOT NULL
    DROP TABLE #TEMPTABLE_JOINTACCOUNTFLAG

		SELECT A.REFCUSTOMERID AS COAPPLICANTDETAIL,
		       B.REFCUSTOMERID AS PRIMARYBROWER,
			   C.SYSASSETCLASSALT_KEY,C.SYSNPA_DT
		INTO #TEMPTABLE_JOINTACCOUNTFLAG
	  FROM PRO.COAPPLICANTDETAIL A
			INNER JOIN PRO.ACCOUNTCAL  B  ON A.CUSTOMERACID=B.CUSTOMERACID
			INNER JOIN PRO.CUSTOMERCAL C ON C.REFCUSTOMERID=B.REFCUSTOMERID
			AND A.REFCUSTOMERID<>B.REFCUSTOMERID
			INNER JOIN YBL_ACS_MIS..CUSTOMERDATA D ON D.FCR_CUSTOMERID=A.REFCUSTOMERID

			WHERE ISNULL(C.SYSASSETCLASSALT_KEY,1)<>1 AND D.ASSETCLASS=1
			 AND C.REFCUSTOMERID<>'0'
			 AND A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY
			ORDER BY B.REFCUSTOMERID


	UPDATE A SET A.SYSASSETCLASSALT_KEY=B.SYSASSETCLASSALT_KEY
	             ,A.SYSNPA_DT=B.SYSNPA_DT  
	 FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLE_JOINTACCOUNTFLAG B ON B.COAPPLICANTDETAIL=A.REFCUSTOMERID

	 UPDATE A SET DEGREASON='PERCOLATION BY JOINT' + B.PRIMARYBROWER
	 FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLE_JOINTACCOUNTFLAG B ON A.REFCUSTOMERID=B.PRIMARYBROWER
	 WHERE A. SRCASSETCLASSALT_KEY=1 AND A.SYSASSETCLASSALT_KEY>1
	  AND A.DEGREASON IS NULL
	  --SELECT * FROM #TEMPTABLE_JOINTACCOUNTFLAG
END	 

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY JOINTACCOUNTFLAG'

/*------------------UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY REFCUSTOMERID------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY REFCUSTOMERID','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

IF OBJECT_ID('TEMPDB..#TEMPTABLEREFCUSTOMERID') IS NOT NULL
    DROP TABLE #TEMPTABLEREFCUSTOMERID
	
	SELECT REFCUSTOMERID,MAX(ISNULL(SYSASSETCLASSALT_KEY,1)) SYSASSETCLASSALT_KEY
	,MIN(SYSNPA_DT) SYSNPA_DT ,B.SOURCEDBNAME
	 INTO #TEMPTABLEREFCUSTOMERID FROM PRO.CUSTOMERCAL A
	 INNER JOIN DIMSOURCEDB  B ON B.SOURCEALT_KEY=A.SOURCEALT_KEY AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
	WHERE (A.REFCUSTOMERID IS NOT NULL AND REFCUSTOMERID<>'0')  AND  ISNULL(A.SYSASSETCLASSALT_KEY,1)<>1
	GROUP BY  A.REFCUSTOMERID,B.SOURCEDBNAME

	UPDATE A SET A.SYSASSETCLASSALT_KEY=B.SYSASSETCLASSALT_KEY
	             ,A.SYSNPA_DT=B.SYSNPA_DT  
	 FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEREFCUSTOMERID B ON A.REFCUSTOMERID=B.REFCUSTOMERID

	 UPDATE A SET DEGREASON='PERCOLATION BY FCR CUSTOMERID ' + ' ' + B.SOURCEDBNAME + '  ' + B.REFCUSTOMERID 
	 --UPDATE A SET DEGREASON='PERCOLATION BY CUSTOMERID ' +' ' + B.REFCUSTOMERID
	 FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEREFCUSTOMERID B ON A.REFCUSTOMERID=B.REFCUSTOMERID
	 WHERE A. SRCASSETCLASSALT_KEY=1 AND A.SYSASSETCLASSALT_KEY>1
	 AND A.DEGREASON IS NULL

	 UPDATE A SET DEGREASON='PERCOLATION BY FCR CUSTOMERID ' + ' ' + B.SOURCEDBNAME + '  ' + B.REFCUSTOMERID 
	 FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEREFCUSTOMERID B ON A.REFCUSTOMERID=B.REFCUSTOMERID
	 WHERE  A.SYSASSETCLASSALT_KEY=1
	 AND A.DEGREASON IS NULL
	 
UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY REFCUSTOMERID'
 
/*------------------UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY UCFIC LEVEL------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY UCFIC LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID
IF ISNULL(@UCFICFLAG,'N')='Y'
BEGIN

IF OBJECT_ID('TEMPDB..#TEMPTABLE_UCFIC') IS NOT NULL
    DROP TABLE #TEMPTABLE_UCFIC

	SELECT UCIF_ID,MAX(ISNULL(SYSASSETCLASSALT_KEY,1)) SYSASSETCLASSALT_KEY
	,MIN(SYSNPA_DT) SYSNPA_DT 
	 INTO #TEMPTABLE_UCFIC FROM PRO.CUSTOMERCAL
	WHERE ( UCIF_ID IS NOT NULL AND UCIF_ID<>'0' ) AND  ISNULL(SYSASSETCLASSALT_KEY,1)<>1
	GROUP BY  UCIF_ID

	UPDATE A SET A.SYSASSETCLASSALT_KEY=B.SYSASSETCLASSALT_KEY
	             ,A.SYSNPA_DT=B.SYSNPA_DT  
	 FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLE_UCFIC B ON A.UCIF_ID=B.UCIF_ID

END	 

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY UCFIC LEVEL'


/*------------------UPDATE MOC FLAG IN CUSTOMER CAL TABLE------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE MOC FLAG IN CUSTOMER CAL TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.FLGMOC='Y' FROM PRO.CUSTOMERCAL A INNER JOIN PRO.CHANGEDMOCACLSTATUS B ON A.REFCUSTOMERID=B.REFCUSTOMERID
AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE MOC FLAG IN CUSTOMER CAL TABLE'
 
/*------------------ACCOUNT DATA INSERT------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'INSERT DATA IN ACCOUNTCAL TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


INSERT INTO PRO.ACCOUNTCAL
(
ACCOUNTENTITYID
,CUSTOMERACID
,FLGDEG
,FLGDIRTYROW
,FLGINMONTH
,FLGSMA
,FLGPNPA
,FLGUPG
,FLGFITL
,FLGABINITIO
,REFPERIODOVERDUEUPG
,REFPERIODOVERDRAWNUPG
,REFPERIODNOCREDITUPG
,REFPERIODINTSERVICEUPG
,REFPERIODSTKSTATEMENTUPG
,REFPERIODREVIEWUPG
,EFFECTIVEFROMTIMEKEY
,EFFECTIVETOTIMEKEY
,ASSET_NORM
,SPLCATG1ALT_KEY
,SPLCATG2ALT_KEY
,SPLCATG3ALT_KEY
,SPLCATG4ALT_KEY
,BALANCE
,BALANCEINCRNCY
,NETBALANCE
,CURRENCYALT_KEY
,SOURCEALT_KEY
,SECAPP
,PROVCOVERGOVGUR
,BANKPROVSECURED
,BANKPROVUNSECURED
,BANKTOTALPROVISION
,RBIPROVSECURED
,RBIPROVUNSECURED
,RBITOTALPROVISION
,APPGOVGUR
,USEDRV
,COMPUTEDCLAIM
,PROVPERSECURED
,PROVPERUNSECURED
,REFPERIODOVERDUE 
,REFPERIODOVERDRAWN   
,REFPERIODNOCREDIT  
,REFPERIODINTSERVICE  
,REFPERIODSTKSTATEMENT
,REFPERIODREVIEW
,INITIALASSETCLASSALT_KEY
,FINALASSETCLASSALT_KEY
,CoverGovGur
)
SELECT
ACCOUNTENTITYID=ACCOUNTENTITYID
,CUSTOMERACID=CUSTOMERACID
,FLGDEG='N'
,FLGDIRTYROW ='N'
,FLGINMONTH='N'
,FLGSMA='N'
,FLGPNPA='N'
,FLGUPG='N'
,FLGFITL='N'
,FLGABINITIO='N'
,REFPERIODOVERDUEUPG=0--(SELECT TOP 1 CAST(REFVALUE AS INT) FROM PRO.REFPERIOD WHERE BUSINESSRULE='REFPERIODOVERDUEUPG' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
,REFPERIODOVERDRAWNUPG=0--(SELECT TOP 1 CAST(REFVALUE AS INT) FROM PRO.REFPERIOD WHERE BUSINESSRULE='REFPERIODOVERDRAWNUPG' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
,REFPERIODNOCREDITUPG =0--(SELECT  TOP 1 CAST(REFVALUE AS INT) FROM PRO.REFPERIOD WHERE BUSINESSRULE='REFPERIODNOCREDITUPG' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
,REFPERIODINTSERVICEUPG=0--(SELECT  TOP 1 CAST(REFVALUE AS INT) FROM PRO.REFPERIOD WHERE BUSINESSRULE='REFPERIODINTSERVICEUPG' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
,REFPERIODSTKSTATEMENTUPG=180--(SELECT  TOP 1 CAST(REFVALUE AS INT) FROM PRO.REFPERIOD WHERE BUSINESSRULE='REFPERIODSTKSTATEMENTUPG' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
,REFPERIODREVIEWUPG=180--(SELECT  TOP 1 CAST(REFVALUE AS INT) FROM PRO.REFPERIOD WHERE BUSINESSRULE='REFPERIODREVIEWUPG' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
,EFFECTIVEFROMTIMEKEY=@TIMEKEY
,EFFECTIVETOTIMEKEY=@TIMEKEY
,ASSET_NORM='NORMAL'
,SPLCATG1ALT_KEY=0
,SPLCATG2ALT_KEY=0
,SPLCATG3ALT_KEY=0
,SPLCATG4ALT_KEY=0
,BALANCE=0.00
,BALANCEINCRNCY =0.00
,NETBALANCE =0.00
,CURRENCYALT_KEY=62
,0 SOURCEALT_KEY
,SECAPP='U'
,PROVCOVERGOVGUR=0.00
,BANKPROVSECURED=0.00
,BANKPROVUNSECURED=0.00
,BANKTOTALPROVISION=0.00
,RBIPROVSECURED=0.00
,RBIPROVUNSECURED=0.00
,RBITOTALPROVISION=0.00
,APPGOVGUR=0.00
,USEDRV=0.00
,COMPUTEDCLAIM=0.00
,PROVPERSECURED=0.00
,PROVPERUNSECURED=0.00
,REFPERIODOVERDUE =91--(SELECT TOP 1 REFVALUE FROM PRO.REFPERIOD WHERE BUSINESSRULE = 'REFPERIODOVERDUE' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
,REFPERIODOVERDRAWN   =91--(SELECT TOP 1 REFVALUE FROM PRO.REFPERIOD WHERE BUSINESSRULE = 'REFPERIODOVERDRAWN' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
,REFPERIODNOCREDIT  =91--(SELECT TOP 1 REFVALUE FROM PRO.REFPERIOD WHERE BUSINESSRULE = 'REFPERIODNOCREDIT' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
,REFPERIODINTSERVICE   =91--(SELECT TOP 1 REFVALUE FROM PRO.REFPERIOD WHERE BUSINESSRULE = 'REFPERIODINTSERVICE' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
,REFPERIODSTKSTATEMENT  =181--(SELECT TOP 1 REFVALUE FROM PRO.REFPERIOD WHERE BUSINESSRULE = 'REFPERIODSTKSTATEMENT' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
,REFPERIODREVIEW  =181--(SELECT TOP 1 REFVALUE FROM PRO.REFPERIOD WHERE BUSINESSRULE = 'REFPERIODREVIEW' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
,1 AS INITIALASSETCLASSALT_KEY
,1 AS FINALASSETCLASSALT_KEY
,CoverGovGur=0.00
FROM PRO.ACCOUNTMASTER
WHERE EFFECTIVETOTIMEKEY=49999 

 --------As per bank mail 16/03/2022 Modification----------

  --------As per bank mail 25/07/2022 Modification New Codes Added----------
 --G   Test Accounts meant for system function testing.
 --O   Accounts awaiting complete application set before the same be activated. 
 --U   Signifies that the account has been upgraded to new account. 
 --T  - Incorrectly Boarded Account / Error in the account details captured.

DELETE A
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B
ON A.CUSTOMERACID=B.ACCOUNTID
where b.SourceSystemName='VISIONPLUS'
AND B.ACCOUNTBLKCODE1 in('W','G','O','U','T')

DELETE A
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B
ON A.CUSTOMERACID=B.ACCOUNTID
where b.SourceSystemName='VISIONPLUS'
AND B.ACCOUNTBLKCODE2 in('W','G','O','U','T')

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='INSERT DATA IN ACCOUNTCAL TABLE'

/*------------------UPDATE SOURCEALT_KEY IN ACCOUNT CAL TABLE------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SOURCEALT_KEY IN ACCOUNT CAL TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE  A SET A.SOURCEALT_KEY= C.SOURCEALT_KEY,A.DATEOFDATA=B.DATA_DATE
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B 
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB  C ON C.SOURCENAME=B.SOURCESYSTEMNAME
 AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY


UPDATE  A SET A.SOURCEALT_KEY= (SELECT SOURCEALT_KEY FROM DIMSOURCEDB WHERE SOURCENAME='GOLD' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B 
ON A.CUSTOMERACID=B.ACCOUNTID
WHERE B.SOURCESYSTEMNAME='GOLD'


UPDATE  A SET A.SOURCEALT_KEY= (SELECT SOURCEALT_KEY FROM DIMSOURCEDB WHERE SOURCENAME='ECFS' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B 
ON A.CUSTOMERACID=B.ACCOUNTID
WHERE B.SOURCESYSTEMNAME='ECFS'

 
UPDATE  A SET A.SOURCEALT_KEY= (SELECT SOURCEALT_KEY FROM DIMSOURCEDB WHERE SOURCENAME='EIFS' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B 
ON A.CUSTOMERACID=B.ACCOUNTID
WHERE B.SOURCESYSTEMNAME='EIFS'


UPDATE  A SET A.SOURCEALT_KEY= (SELECT SOURCEALT_KEY FROM DIMSOURCEDB WHERE SOURCENAME='ECBF' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
FROM PRO.ACCOUNTCAL A
INNER JOIN YBL_ACS_MIS.[DBO].[ODS_ECBF_BORROWERMST] B
 ON A.CUSTOMERACID=B.CUSTOMERACID--BORROWERID

 
 UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SOURCEALT_KEY IN ACCOUNT CAL TABLE'

 INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SOURCEALT_KEY IN ACCOUNT CAL TABLE CREDAVENUE_DA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE  A SET A.SOURCEALT_KEY= C.SOURCEALT_KEY,A.DATEOFDATA=B.DATA_DATE
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_CA B 
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB  C ON C.SOURCENAME=B.SOURCESYSTEMNAME
 AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.SOURCESYSTEMNAME='CREDAVENUE_DA'

/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/
UPDATE  A SET A.SOURCEALT_KEY= C.SOURCEALT_KEY,A.DATEOFDATA=B.DATA_DATE
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_FinSmart B 
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB  C ON C.SOURCENAME=B.SOURCESYSTEMNAME
 AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.SOURCESYSTEMNAME='SFIN'
/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND 
 TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SOURCEALT_KEY IN ACCOUNT CAL TABLE CREDAVENUE_DA'


/*------------------UPDATE CURRENT LIMIT|DRAWINGPOWER|BALANCE------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE CURRENT LIMIT|DRAWINGPOWER|BALANCE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


UPDATE A SET  A.CURRENTLIMIT=ISNULL(B.CURRENTLIMIT,0.00)
             ,A.DRAWINGPOWER=ISNULL(B.DRAWINGPOWER,0.00)
			 ,A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
			 ,A.REFCUSTOMERID=B.FCR_CUSTOMERID
			 ,A.ACOPENDT=B.ACCOUNTOPENDATE
			 ,A.CURRENTLIMITDT=B.CURRENTLIMITDATE
			 ,A.BALANCE=CASE WHEN B.SOURCESYSTEMNAME ='FCR' THEN ISNULL(B.TOTALBALANCEOUTSTANDINGINR,0.00) * -1 ELSE ISNULL(B.TOTALBALANCEOUTSTANDINGINR,0.00) END 
			 ,A.BALANCEINCRNCY=ISNULL(B.BALANCEINCURRENCY,0.00)
			 ,A.BRANCHCODE=B.ACCOUNTBRANCHCODE
			 ,A.ACTSEGMENTCODE=B.ACCOUNTSEGMENTCODE
			 ,A.LINECODE=(CASE WHEN SOURCENAME in ('FCC','FCR')  THEN    B.FACILITYCODELINECODE  ELSE NULL END)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
--AND  (B.PRODUCTCODE NOT IN('869','605','891','703','704','705') OR B.SOURCESYSTEMNAME NOT IN('FCR'))


UPDATE A SET A.SOURCESYSTEMCUSTOMERID=FCC_CUSTOMERID
FROM PRO.ACCOUNTCAL A  INNER JOIN  YBL_ACS_MIS..ODS_MUREX_DPD_NPA  B
ON A.CUSTOMERACID=CAST(B.TRNINTERNALTRADENO AS VARCHAR(50))
WHERE B.FCC_CUSTOMERID<>''

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CURRENT LIMIT|DRAWINGPOWER|BALANCE'

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE CURRENT LIMIT|DRAWINGPOWER|BALANCE CREDAVENUE_DA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET  A.CURRENTLIMIT=ISNULL(B.CURRENTLIMIT,0.00)
             ,A.DRAWINGPOWER=ISNULL(B.DRAWINGPOWER,0.00)
			 ,A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
			 ,A.REFCUSTOMERID=B.FCR_CUSTOMERID
			 ,A.ACOPENDT=B.ACCOUNTOPENDATE
			 ,A.CURRENTLIMITDT=B.CURRENTLIMITDATE
			 ,A.BALANCE=CASE WHEN B.SOURCESYSTEMNAME ='FCR' THEN ISNULL(B.TOTALBALANCEOUTSTANDINGINR,0.00) * -1 ELSE ISNULL(B.TOTALBALANCEOUTSTANDINGINR,0.00) END 
			 ,A.BALANCEINCRNCY=ISNULL(B.BALANCEINCURRENCY,0.00)
			 ,A.BRANCHCODE=B.ACCOUNTBRANCHCODE
			 ,A.ACTSEGMENTCODE=B.ACCOUNTSEGMENTCODE
			 ,A.LINECODE=(CASE WHEN SOURCENAME in ('FCC','FCR')  THEN    B.FACILITYCODELINECODE  ELSE NULL END)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_CA B
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)

/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/
UPDATE A SET  A.CURRENTLIMIT=ISNULL(B.CURRENTLIMIT,0.00)
             ,A.DRAWINGPOWER=ISNULL(B.DRAWINGPOWER,0.00)
			 ,A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
			 ,A.REFCUSTOMERID=B.FCR_CUSTOMERID
			 ,A.ACOPENDT=B.ACCOUNTOPENDATE
			 ,A.CURRENTLIMITDT=B.CURRENTLIMITDATE
			 ,A.BALANCE=CASE WHEN B.SOURCESYSTEMNAME ='FCR' THEN ISNULL(B.TOTALBALANCEOUTSTANDINGINR,0.00) * -1 ELSE ISNULL(B.TOTALBALANCEOUTSTANDINGINR,0.00) END 
			 ,A.BALANCEINCRNCY=ISNULL(B.BALANCEINCURRENCY,0.00)
			 ,A.BRANCHCODE=B.ACCOUNTBRANCHCODE
			 ,A.ACTSEGMENTCODE=B.ACCOUNTSEGMENTCODE
			 ,A.LINECODE=(CASE WHEN SOURCENAME in ('FCC','FCR')  THEN    B.FACILITYCODELINECODE  ELSE NULL END)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_FinSmart B
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND 
 TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CURRENT LIMIT|DRAWINGPOWER|BALANCE CREDAVENUE_DA'


/*------------------UPDATE MUREX DATA IN PRO ACCOUNT CAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE MUREX DATA IN PRO ACCOUNT CAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


IF OBJECT_ID('TEMPDB..#TEMPTABLEREFCUSTOMERID_MUREX') IS NOT NULL
   DROP TABLE #TEMPTABLEREFCUSTOMERID_MUREX



SELECT A.SOURCESYSTEMCUSTOMERID,A.REFCUSTOMERID INTO #TEMPTABLEREFCUSTOMERID_MUREX 
FROM  PRO.CUSTOMERCAL A 
INNER JOIN  YBL_ACS_MIS..ODS_MUREX_DPD_NPA B 
ON A.SOURCESYSTEMCUSTOMERID=FCC_CUSTOMERID
WHERE B.FCC_CUSTOMERID<>''

UPDATE A SET A.REFCUSTOMERID=B.REFCUSTOMERID 
FROM  PRO.ACCOUNTCAL A INNER JOIN #TEMPTABLEREFCUSTOMERID_MUREX B
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE MUREX DATA IN PRO ACCOUNT CAL'
/*------------------UPDATE CUSTOMERENTITYID|UCIF_ID|UCIFENTITYID------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE CUSTOMERENTITYID|UCIF_ID|UCIFENTITYID','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.CUSTOMERENTITYID=B.CUSTOMERENTITYID
            ,A.UCIF_ID=B.UCIF_ID
			,A.UCIFENTITYID=B.UCIFENTITYID
 FROM PRO.ACCOUNTCAL A INNER JOIN PRO.CUSTOMERCAL B
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID 

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CUSTOMERENTITYID|UCIF_ID|UCIFENTITYID'
/*------------------UPDATE CONTIEXCESSDT|LASTCRDATE|STOCKSTDT|INTTRATE|FIRSTDTOFDISB------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE CONTIEXCESSDT|LASTCRDATE|STOCKSTDT|INTTRATE|FIRSTDTOFDISB|DEBITSINCEDT','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.CONTIEXCESSDT=CASE WHEN C.SOURCENAME ='FCR' THEN  B.CONTINUOUSEXCESSSINCEDATE ELSE NULL END 
            ,A.LASTCRDATE =B.LASTCREDITDATE
			,A.STOCKSTDT  =B.STOCKSTATEMENTDATE
			,A.INTTRATE=ISNULL(B.INTERESTRATE,0.00)
			,A.FIRSTDTOFDISB=B.FIRSTDTOFDISB
			,A.DEBITSINCEDT=CASE WHEN C.SOURCENAME ='FCR' THEN B.SBACAATODDATE ELSE NULL END 
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B 
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CONTIEXCESSDT|LASTCRDATE|STOCKSTDT|INTTRATE|FIRSTDTOFDISB|DEBITSINCEDT'

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE CONTIEXCESSDT|LASTCRDATE|STOCKSTDT|INTTRATE|FIRSTDTOFDISB|DEBITSINCEDT CREDAVENUE_DA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.CONTIEXCESSDT=CASE WHEN C.SOURCENAME ='FCR' THEN  B.CONTINUOUSEXCESSSINCEDATE ELSE NULL END 
            ,A.LASTCRDATE =B.LASTCREDITDATE
			,A.STOCKSTDT  =B.STOCKSTATEMENTDATE
			,A.INTTRATE=ISNULL(B.INTERESTRATE,0.00)
			,A.FIRSTDTOFDISB=B.FIRSTDTOFDISB
			,A.DEBITSINCEDT=CASE WHEN C.SOURCENAME ='FCR' THEN B.SBACAATODDATE ELSE NULL END 
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_CA B 
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)

/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

UPDATE A SET A.CONTIEXCESSDT=CASE WHEN C.SOURCENAME ='FCR' THEN  B.CONTINUOUSEXCESSSINCEDATE ELSE NULL END 
            ,A.LASTCRDATE =B.LASTCREDITDATE
			,A.STOCKSTDT  =B.STOCKSTATEMENTDATE
			,A.INTTRATE=ISNULL(B.INTERESTRATE,0.00)
			,A.FIRSTDTOFDISB=B.FIRSTDTOFDISB
			,A.DEBITSINCEDT=CASE WHEN C.SOURCENAME ='FCR' THEN B.SBACAATODDATE ELSE NULL END 
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_FinSmart B 
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND 
 TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CONTIEXCESSDT|LASTCRDATE|STOCKSTDT|INTTRATE|FIRSTDTOFDISB|DEBITSINCEDT CREDAVENUE_DA'


/*------------------UPDATE DISBAMOUNT|PRINCOUTSTD|PRINCOVERDUE|PRINCOVERDUESINCEDT------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE DISBAMOUNT|PRINCOUTSTD|PRINCOVERDUE|PRINCOVERDUESINCEDT','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET 
			 A.DISBAMOUNT            = ISNULL(B.DISBAMOUNT,0.00)
			,A.PRINCOUTSTD           = CASE WHEN B.SOURCESYSTEMNAME ='FCR' THEN ISNULL(B.TOTALBALANCEOUTSTANDINGINR,0.00) * -1 ELSE ISNULL(B.PRINCIPALOUTSTANDING,0.00) END--ISNULL(B.PRINCIPALOUTSTANDING  ,0.00)  
			,A.PRINCOVERDUE          = ISNULL(B.PRINCIPALOVERDUE,0.00)
			,A.PRINCOVERDUESINCEDT   = B.PRINCIPALOVERDUESINCEDATE
			,A.DPD_PRINCOVERDUE      = ISNULL(B.PRINCIPALOVERDUEDPD,0)
			,A.INTOVERDUE            = ISNULL(B.INTERESTOVERDUE ,0.00)
			,A.INTOVERDUESINCEDT     = B.INTERESTOVERDUESINCEDATE
			,A.DPD_INTOVERDUESINCE   = ISNULL(B.INTERESTOVERDUESINCEDPD,0)
			,A.OTHEROVERDUE          = ISNULL(B.OTHEROVERDUE,0.00)
			,A.OTHEROVERDUESINCEDT   = B.OTHEROVERDUESINCEDATE
			,A.DPD_OTHEROVERDUESINCE = ISNULL(B.OTHEROVERDUESINCEDPD,0)
			,A.OVERDUEAMT            = (CASE WHEN C.SOURCENAME ='FCC' THEN  (ISNULL(B.PRINCIPALOVERDUE,0.00)+ISNULL(B.INTERESTOVERDUE,0.00)+ISNULL(B.OTHEROVERDUE,0.00))
											WHEN  C.SOURCENAME ='FCR' AND B.SBACAATODDATE IS NOT NULL THEN ISNULL(B.TOTALOVERDUEAMOUNT,0.00)*-1
											WHEN  C.SOURCENAME ='FCR' AND B.SBACAATODDATE IS  NULL THEN 0
			                                ELSE  ISNULL(B.TOTALOVERDUEAMOUNT,0.00) END)
			,A.OVERDUESINCEDT        =  B.OVERDUESINCEDATE 
			,A.GOVTGTYAMT            =  ISNULL(B.[GOVERNMENTGUARANTEEAMOUNT ],0.00)
			,A.WRITEOFFAMOUNT        = ISNULL(B.WRITEOFFAMOUNT,0.00)
			,A.UNADJSUBSIDY          =  ISNULL(B.UNADJUSTSUBSIDY,0.00)
			,A.RELATIONSHIPNUMBER	 = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.RELATIONSHIPNUMBER  ELSE NULL END)
            ,A.ACCOUNTFLAG           = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTFLAG		 ELSE NULL END)
			,A.LIABILITY	         = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.LIABILITY			 ELSE NULL END)
			,A.CD                    = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.CD                	 ELSE NULL END)
			,A.ACCOUNTSTATUS	     = (CASE WHEN SOURCENAME in ('VISIONPLUS','FCC','FCR')  THEN    B.ACCOUNTSTATUS		 ELSE NULL END)
			,A.ACCOUNTBLKCODE1       = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTBLKCODE1	 ELSE NULL END)
			,A.ACCOUNTBLKCODE2       = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTBLKCODE2	 ELSE NULL END)
			,A.PRODUCTCODE          = B.PRODUCTCODE
FROM PRO.ACCOUNTCAL A LEFT OUTER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN  DIMSOURCEDB C  ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE DISBAMOUNT|PRINCOUTSTD|PRINCOVERDUE|PRINCOVERDUESINCEDT'

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE DISBAMOUNT|PRINCOUTSTD|PRINCOVERDUE|PRINCOVERDUESINCEDT CREDAVENUE_DA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID



UPDATE A SET 
			 A.DISBAMOUNT            = ISNULL(B.DISBAMOUNT,0.00)
			,A.PRINCOUTSTD           = ISNULL(B.PRINCIPALOUTSTANDING  ,0.00)  
			,A.PRINCOVERDUE          = ISNULL(B.PRINCIPALOVERDUE,0.00)
			,A.PRINCOVERDUESINCEDT   = B.PRINCIPALOVERDUESINCEDATE
			,A.DPD_PRINCOVERDUE      = ISNULL(B.PRINCIPALOVERDUEDPD,0)
			,A.INTOVERDUE            = ISNULL(B.INTERESTOVERDUE ,0.00)
			,A.INTOVERDUESINCEDT     = B.INTERESTOVERDUESINCEDATE
			,A.DPD_INTOVERDUESINCE   = ISNULL(B.INTERESTOVERDUESINCEDPD,0)
			,A.OTHEROVERDUE          = ISNULL(B.OTHEROVERDUE,0.00)
			,A.OTHEROVERDUESINCEDT   = B.OTHEROVERDUESINCEDATE
			,A.DPD_OTHEROVERDUESINCE = ISNULL(B.OTHEROVERDUESINCEDPD,0)
			,A.OVERDUEAMT            = ISNULL(B.TOTALOVERDUEAMOUNT,0.00)
			,A.OVERDUESINCEDT        =  B.OVERDUESINCEDATE 
			--,A.GOVTGTYAMT            =  ISNULL(B.[GovernmentGuaranteeAmount ],0.00)
			,A.WRITEOFFAMOUNT        = ISNULL(B.WRITEOFFAMOUNT,0.00)
			,A.UNADJSUBSIDY          =  ISNULL(B.UNADJUSTSUBSIDY,0.00)
			,A.RELATIONSHIPNUMBER	 = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.RELATIONSHIPNUMBER  ELSE NULL END)
            ,A.ACCOUNTFLAG           = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTFLAG		 ELSE NULL END)
			,A.LIABILITY	         = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.LIABILITY			 ELSE NULL END)
			,A.CD                    = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.CD                	 ELSE NULL END)
			,A.ACCOUNTSTATUS	     = (CASE WHEN SOURCENAME in ('VISIONPLUS','FCC','FCR')  THEN    B.ACCOUNTSTATUS		 ELSE NULL END)
			,A.ACCOUNTBLKCODE1       = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTBLKCODE1	 ELSE NULL END)
			,A.ACCOUNTBLKCODE2       = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTBLKCODE2	 ELSE NULL END)
			,A.PRODUCTCODE          = B.PRODUCTCODE
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_CA B ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN  DIMSOURCEDB C  ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)

/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

UPDATE A SET 
			 A.DISBAMOUNT            = ISNULL(B.DISBAMOUNT,0.00)
			,A.PRINCOUTSTD           = ISNULL(B.PRINCIPALOUTSTANDING  ,0.00)  
			,A.PRINCOVERDUE          = ISNULL(B.PRINCIPALOVERDUE,0.00)
			,A.PRINCOVERDUESINCEDT   = B.PRINCIPALOVERDUESINCEDATE
			,A.DPD_PRINCOVERDUE      = ISNULL(B.PRINCIPALOVERDUEDPD,0)
			,A.INTOVERDUE            = ISNULL(B.INTERESTOVERDUE ,0.00)
			,A.INTOVERDUESINCEDT     = B.INTERESTOVERDUESINCEDATE
			,A.DPD_INTOVERDUESINCE   = ISNULL(B.INTERESTOVERDUESINCEDPD,0)
			,A.OTHEROVERDUE          = ISNULL(B.OTHEROVERDUE,0.00)
			,A.OTHEROVERDUESINCEDT   = B.OTHEROVERDUESINCEDATE
			,A.DPD_OTHEROVERDUESINCE = ISNULL(B.OTHEROVERDUESINCEDPD,0)
			,A.OVERDUEAMT            = ISNULL(B.TOTALOVERDUEAMOUNT,0.00)
			,A.OVERDUESINCEDT        =  B.OVERDUESINCEDATE 
			--,A.GOVTGTYAMT            =  ISNULL(B.[GovernmentGuaranteeAmount ],0.00)
			,A.WRITEOFFAMOUNT        = ISNULL(B.WRITEOFFAMOUNT,0.00)
			,A.UNADJSUBSIDY          =  ISNULL(B.UNADJUSTSUBSIDY,0.00)
			,A.RELATIONSHIPNUMBER	 = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.RELATIONSHIPNUMBER  ELSE NULL END)
            ,A.ACCOUNTFLAG           = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTFLAG		 ELSE NULL END)
			,A.LIABILITY	         = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.LIABILITY			 ELSE NULL END)
			,A.CD                    = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.CD                	 ELSE NULL END)
			,A.ACCOUNTSTATUS	     = (CASE WHEN SOURCENAME in ('VISIONPLUS','FCC','FCR')  THEN    B.ACCOUNTSTATUS		 ELSE NULL END)
			,A.ACCOUNTBLKCODE1       = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTBLKCODE1	 ELSE NULL END)
			,A.ACCOUNTBLKCODE2       = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTBLKCODE2	 ELSE NULL END)
			,A.PRODUCTCODE          = B.PRODUCTCODE
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_FinSmart B ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN  DIMSOURCEDB C  ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)

/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND 
 TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE DISBAMOUNT|PRINCOUTSTD|PRINCOVERDUE|PRINCOVERDUESINCEDT CREDAVENUE_DA'



/*------------------UPDATE OVERDUE SINCE DATE FOR FCC ACCOUNT DATA------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE OVERDUE SINCE DATE FOR FCC ACCOUNT DATA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

IF OBJECT_ID('TEMPDB..#TEMPTABLEMINDATE') IS NOT NULL
    DROP TABLE #TEMPTABLEMINDATE

SELECT A.CUSTOMERACID, PRINCOVERDUESINCEDT,INTOVERDUESINCEDT,OTHEROVERDUESINCEDT,
PRO.GETMINIMUMDATE (A.PRINCOVERDUESINCEDT,A.INTOVERDUESINCEDT,A.OTHEROVERDUESINCEDT) MINOVERDUEDATE
INTO #TEMPTABLEMINDATE
FROM PRO.ACCOUNTCAL A INNER JOIN DIMSOURCEDB B ON A.SOURCEALT_KEY=B.SOURCEALT_KEY WHERE B.SOURCENAME='FCC' 
AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY >=@TIMEKEY)

UPDATE A SET A.OVERDUESINCEDT=B.MINOVERDUEDATE
FROM PRO.ACCOUNTCAL A INNER JOIN #TEMPTABLEMINDATE B ON A.CUSTOMERACID=B.CUSTOMERACID

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE OVERDUE SINCE DATE FOR FCC ACCOUNT DATA'

/*------------------UPDATE OVERDUE SINCE DATE DUE TO DPD MAX FOR VISION PLUS DATA ONLY------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE OVERDUE SINCE DATE DUE TO DPD MAX FOR VISION PLUS DATA ONLY','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.OVERDUESINCEDT=DATEADD(DAY,-MAXDPD,@PROCESSINGDATE)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE C.SOURCENAME='VISIONPLUS' AND ISNULL(B.MAXDPD,0)>0


UPDATE A SET A.OVERDUESINCEDT=DATEADD(DAY,-MAXDPD,@PROCESSINGDATE)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE C.SOURCENAME='GANASEVA' AND ISNULL(B.MAXDPD,0)>0

/*Added By Sourangshu BRNET ON LOCAL 20250101 ON UAT 20250107*/

UPDATE A 
SET A.OVERDUESINCEDT=DATEADD(DAY,-MAXDPD,@PROCESSINGDATE)
FROM PRO.ACCOUNTCAL A 
INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B 
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C 
ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY 
AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE C.SOURCENAME='BRNET' 
AND ISNULL(B.MAXDPD,0)>0

/*Added By Sourangshu BRNET ON LOCAL 20250101 ON UAT 20250107 END*/

UPDATE A SET A.OVERDUESINCEDT=NULL
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE C.SOURCENAME='FINNONE'
UPDATE A SET A.OVERDUESINCEDT=DATEADD(DAY,-MAXDPD,@PROCESSINGDATE)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE C.SOURCENAME='FINNONE' AND ISNULL(B.MAXDPD,0)>0

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE OVERDUE SINCE DATE DUE TO DPD MAX FOR VISION PLUS DATA ONLY'

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE OVERDUE SINCE DATE DUE TO DPD MAX CREDAVENUE_DA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.OVERDUESINCEDT=DATEADD(DAY,-MAXDPD,@PROCESSINGDATE)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_CA B ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE C.SOURCENAME='CREDAVENUE_DA' AND ISNULL(B.MAXDPD,0)>0

/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

--UPDATE A SET A.OVERDUESINCEDT=DATEADD(DAY,-MAXDPD,@PROCESSINGDATE)
--FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_FinSmart B ON A.CUSTOMERACID=B.ACCOUNTID
--INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
--AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
--WHERE C.SOURCENAME='SFIN' AND ISNULL(B.MAXDPD,0)>0

--IF OBJECT_ID('TEMPDB..#TEMPTABLEMINOVERDUEDTSFIN') IS NOT NULL
--    DROP TABLE #TEMPTABLEMINOVERDUEDTSFIN

--SELECT CUSTOMERACID,PRO.GETMINIMUMDATE(OVERDUESINCEDT,IntOverdueSinceDt,NULL) AS MINOVERDUE 
--INTO #TEMPTABLEMINOVERDUEDTSFIN
--FROM PRO.ACCOUNTCAL  A INNER JOIN DIMSOURCEDB B ON A.SOURCEALT_KEY=B.SOURCEALT_KEY WHERE B.SOURCENAME='SFIN' 
--AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY >=@TIMEKEY)

--UPDATE PRO.ACCOUNTCAL SET OVERDUESINCEDT=B.MINOVERDUE
--FROM  PRO.ACCOUNTCAL A 
--INNER JOIN #TEMPTABLEMINOVERDUEDTSFIN B ON A.CUSTOMERACID=B.CUSTOMERACID AND B.MINOVERDUE < = @PROCESSINGDATE

/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND 
 TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE OVERDUE SINCE DATE DUE TO DPD MAX CREDAVENUE_DA'

/*------------------UPDATE CURRENCY ALT KEY------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE CURRENCY ALT KEY','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


UPDATE A SET A.CURRENCYALT_KEY=ISNULL(C.CURRENCYALT_KEY,62) FROM  PRO.ACCOUNTCAL  A LEFT OUTER  JOIN YBL_ACS_MIS..ACCOUNTDATA B 
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMCURRENCY C ON C.CURRENCYCODE=B.CURRENCYCODE
AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CURRENCY ALT KEY'

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE CURRENCY ALT KEY CREDAVENUE_DA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.CURRENCYALT_KEY=ISNULL(C.CURRENCYALT_KEY,62) FROM  PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_CA B 
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMCURRENCY C ON C.CURRENCYCODE=B.CURRENCYCODE
AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY

/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/
UPDATE A SET A.CURRENCYALT_KEY=ISNULL(C.CURRENCYALT_KEY,62) FROM  PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_FinSmart B 
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMCURRENCY C ON C.CURRENCYCODE=B.CURRENCYCODE
AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY
/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND 
 TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CURRENCY ALT KEY CREDAVENUE_DA'


/*------------------UPDATE PRODUCTALT_KEY IN ACCOUNT CAL TABLE------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE PRODUCTALT_KEY IN ACCOUNT CAL TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


UPDATE A SET A.PRODUCTALT_KEY=C.PRODUCTALT_KEY
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON
A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMPRODUCT C ON C.PRODUCTCODE=B.PRODUCTCODE
 AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY >=@TIMEKEY)
  INNER JOIN DIMSOURCEDB D ON D.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
and b.SourceSystemName=c.SrcSysProductName---New Condition Added Same product codes in same source system

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE PRODUCTALT_KEY IN ACCOUNT CAL TABLE'

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE PRODUCTALT_KEY IN ACCOUNT CAL TABLE CREDAVENUE_DA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.PRODUCTALT_KEY=C.PRODUCTALT_KEY
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_CA B ON
A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMPRODUCT C ON C.PRODUCTCODE=B.PRODUCTCODE
 AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY >=@TIMEKEY)
  INNER JOIN DIMSOURCEDB D ON D.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
and b.SourceSystemName=c.SrcSysProductName
/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

UPDATE A SET A.PRODUCTALT_KEY=C.PRODUCTALT_KEY
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_FinSmart B ON
A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMPRODUCT C ON C.PRODUCTCODE=B.PRODUCTCODE
 AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY >=@TIMEKEY)
  INNER JOIN DIMSOURCEDB D ON D.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
and b.SourceSystemName=c.SrcSysProductName
/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND 
 TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE PRODUCTALT_KEY IN ACCOUNT CAL TABLE CREDAVENUE_DA'

/*------------------UPDATE COLUMN OF ECBF TABLE------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE COLUMN OF ECBF TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.REFCUSTOMERID=B.UBSCUSTOMERID
            ,A.SOURCESYSTEMCUSTOMERID=B.UBSCUSTOMERID
			,A.CUSTOMERENTITYID=C.CUSTOMERENTITYID
			,A.UCIF_ID=C.UCIF_ID
			,A.UCIFENTITYID=C.UCIFENTITYID
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS.[DBO].[ODS_ECBF_BORROWERMST] B 
ON A.CUSTOMERACID=B.CUSTOMERACID--BORROWERID
INNER JOIN PRO.CUSTOMERCAL  C ON C.SOURCESYSTEMCUSTOMERID=B.UBSCUSTOMERID

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE COLUMN OF ECBF TABLE'


/*------------------HANDLE REFCUSTOMERID AND SOURCE ALT KEY------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'HANDLE REFCUSTOMERID AND SOURCE ALT KEY','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

 UPDATE A SET REFCUSTOMERID=B.REFCUSTOMERID
  FROM PRO.CUSTOMERCAL A
INNER JOIN PRO.ACCOUNTCAL B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
 WHERE A.REFCUSTOMERID='0' AND B.REFCUSTOMERID IS NOT NULL

 UPDATE A SET REFCUSTOMERID=B.REFCUSTOMERID
  FROM PRO.CUSTOMERCAL A
INNER JOIN PRO.ACCOUNTCAL B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
 WHERE A.REFCUSTOMERID IS NULL AND B.REFCUSTOMERID IS NOT NULL

 UPDATE A SET SOURCEALT_KEY=B.SOURCEALT_KEY
  FROM PRO.CUSTOMERCAL A
INNER JOIN PRO.ACCOUNTCAL B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
 WHERE A.SOURCEALT_KEY=0
 AND B.SOURCEALT_KEY>0 

 IF OBJECT_ID('TEMPDB..#TEMPTABLEUCIFID') IS NOT  NULL 
   DROP TABLE #TEMPTABLEUCIFID

SELECT REFCUSTOMERID INTO #TEMPTABLEUCIFID  FROM   
(
SELECT REFCUSTOMERID FROM PRO.CUSTOMERCAL
 WHERE UCIFENTITYID IS NULL AND REFCUSTOMERID IN 
(SELECT REFCUSTOMERID FROM PRO.CUSTOMERCAL  WHERE  UCIFENTITYID IS NOT NULL )
) A 

ALTER TABLE #TEMPTABLEUCIFID ADD  UCIF_ID VARCHAR (50)
ALTER TABLE #TEMPTABLEUCIFID ADD  UCIFENTITYID  INT

 UPDATE A SET UCIF_ID=B.UCIF_ID,UCIFENTITYID=B.UCIFENTITYID
  FROM #TEMPTABLEUCIFID A INNER JOIN PRO.CUSTOMERCAL B  ON A.REFCUSTOMERID=B.REFCUSTOMERID
 WHERE B.UCIFENTITYID IS NOT NULL


 UPDATE B SET UCIF_ID=A.UCIF_ID,UCIFENTITYID=A.UCIFENTITYID
 FROM #TEMPTABLEUCIFID A
  INNER JOIN PRO.CUSTOMERCAL B  ON A.REFCUSTOMERID=B.REFCUSTOMERID WHERE B.UCIFENTITYID IS  NULL

  UPDATE B SET UCIF_ID=A.UCIF_ID,UCIFENTITYID=A.UCIFENTITYID
 FROM #TEMPTABLEUCIFID A
  INNER JOIN PRO.ACCOUNTCAL B  ON A.REFCUSTOMERID=B.REFCUSTOMERID WHERE B.UCIFENTITYID IS  NULL

 UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='HANDLE REFCUSTOMERID AND SOURCE ALT KEY'


/*------------------2.UPDATE FRAUD ACCOUNT MARKING  IN PRO.ACCOUNTCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) SELECT ORIGINAL_LOGIN(),'UPDATE FRAUD ACCOUNT MARKING  IN PRO.ACCOUNTCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.ASSET_NORM='ALWYS_NPA'
            ,A.SPLCATG1ALT_KEY=870
			,A.SPLCATG2ALT_KEY=870
			,A.SPLCATG3ALT_KEY=870
			,A.SPLCATG4ALT_KEY=870
			,A.OVERDUEAMT=B.AMOUNTOFFRAUD
			,A.FINALASSETCLASSALT_KEY=6
			,A.DEGREASON='NPA DUE TO FRAUD MARKING'
			--,A.FINALNPADT=B.DATEOFFRAUD
FROM PRO.ACCOUNTCAL A INNER JOIN [DATAUPLOAD].[FRAUDACCOUNTSDATAUPLOAD] B 
ON A.REFCUSTOMERID=B.CUSTOMERID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE FRAUD ACCOUNT MARKING  IN PRO.ACCOUNTCAL'
 
/*------MIN NPA DATE CUSTOMER LEVEL ---------------------*/



UPDATE  A SET SYSNPA_DT=@PROCESSINGDATE FROM PRO.CUSTOMERCAL A  WHERE SYSASSETCLASSALT_KEY>1 AND SYSNPA_DT IS NULL

UPDATE A SET A.SYSNPA_DT=C.FINALNPADT
         FROM PRO.CUSTOMERCAL A INNER JOIN
(
	SELECT A.UCIF_ID,MIN(A.SYSNPA_DT) FINALNPADT  FROM PRO.CUSTOMERCAL  A 
	WHERE SYSASSETCLASSALT_KEY>1
	AND (A.UCIF_ID IS NOT NULL AND UCIF_ID<>'0')
	AND A.SYSNPA_DT IS NOT NULL
	GROUP BY A.UCIF_ID

) C ON A.UCIF_ID=C.UCIF_ID
 AND (ISNULL(A.FLGPROCESSING,'N')='N')
 
 UPDATE A SET A.SYSNPA_DT=C.FINALNPADT
         FROM PRO.CUSTOMERCAL A INNER JOIN
(
	SELECT A.REFCUSTOMERID,MIN(A.SYSNPA_DT) FINALNPADT  FROM PRO.CUSTOMERCAL  A 
	WHERE SYSASSETCLASSALT_KEY>1
	AND (A.REFCUSTOMERID IS NOT NULL AND REFCUSTOMERID<>'0')
	AND A.SYSNPA_DT IS NOT NULL
	GROUP BY A.REFCUSTOMERID

) C ON A.REFCUSTOMERID=C.REFCUSTOMERID
 AND (ISNULL(A.FLGPROCESSING,'N')='N')

  UPDATE A SET A.SYSNPA_DT=C.FINALNPADT
         FROM PRO.CUSTOMERCAL A INNER JOIN
(
	SELECT A.SourceSystemCustomerID,MIN(A.SYSNPA_DT) FINALNPADT  FROM PRO.CUSTOMERCAL  A 
	WHERE SYSASSETCLASSALT_KEY>1
	AND (A.SourceSystemCustomerID IS NOT NULL AND SourceSystemCustomerID<>'0')
	AND A.SYSNPA_DT IS NOT NULL
	GROUP BY A.SourceSystemCustomerID

) C ON A.SourceSystemCustomerID=C.SourceSystemCustomerID
 AND (ISNULL(A.FLGPROCESSING,'N')='N')


 UPDATE A SET A.SYSNPA_DT=C.FINALNPADT
         FROM PRO.CUSTOMERCAL A INNER JOIN
(
	SELECT A.REFCUSTOMERID,MIN(A.SYSNPA_DT) FINALNPADT  FROM PRO.CUSTOMERCAL  A 
	WHERE SYSASSETCLASSALT_KEY>1
	AND (A.REFCUSTOMERID IS NOT NULL AND REFCUSTOMERID<>'0')
	AND A.SYSNPA_DT IS NOT NULL
	GROUP BY A.REFCUSTOMERID

) C ON A.REFCUSTOMERID=C.REFCUSTOMERID
 AND (ISNULL(A.FLGPROCESSING,'N')='N')
 AND A.SYSNPA_DT>FINALNPADT--same Pan Card but different npa date issue 18/11/2019


/*------------------UPDATE ASSET CLASS FROM CUSTOMER TO ACCOUNT LEVEL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE ASSET CLASS FROM CUSTOMER TO ACCOUNT LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

--UPDATE PRO.ACCOUNTCAL SET REFCUSTOMERID=SOURCESYSTEMCUSTOMERID WHERE REFCUSTOMERID='XXXXXXXXX'


UPDATE A SET A.INITIALASSETCLASSALT_KEY=ISNULL(B.SRCASSETCLASSALT_KEY,1)
            ,A.FINALASSETCLASSALT_KEY=ISNULL(B.SYSASSETCLASSALT_KEY,1)
		    ,A.INITIALNPADT=B.SRCNPA_DT
		    ,A.FINALNPADT=B.SYSNPA_DT
FROM PRO.ACCOUNTCAL A INNER  JOIN PRO.CUSTOMERCAL B 
ON  A.REFCUSTOMERID=B.REFCUSTOMERID AND A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID -- CHANGE AFTER DATA VERIFICATION
AND A.SOURCEALT_KEY=B.SOURCEALT_KEY

UPDATE B SET B.INITIALASSETCLASSALT_KEY=ISNULL(A.SRCASSETCLASSALT_KEY,1)
            ,B.FINALASSETCLASSALT_KEY=ISNULL(A.SYSASSETCLASSALT_KEY,1)
		    ,B.INITIALNPADT=A.SRCNPA_DT
		    ,B.FINALNPADT=A.SYSNPA_DT
	FROM PRO.CUSTOMERCAL A    INNER JOIN PRO.ACCOUNTCAL B    ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
	WHERE A.SYSASSETCLASSALT_KEY>1	 AND B.FINALASSETCLASSALT_KEY=1	  AND B.REFCUSTOMERID IS NULL AND B.ASSET_NORM<>'ALWYS_STD'
			AND A.SOURCEALT_KEY=B.SOURCEALT_KEY

	UPDATE B SET B.INITIALASSETCLASSALT_KEY=ISNULL(A.SRCASSETCLASSALT_KEY,1)
            ,B.FINALASSETCLASSALT_KEY=ISNULL(A.SYSASSETCLASSALT_KEY,1)
		    ,B.INITIALNPADT=A.SRCNPA_DT
		    ,B.FINALNPADT=A.SYSNPA_DT
	FROM PRO.CUSTOMERCAL A    INNER JOIN PRO.ACCOUNTCAL B    ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
	WHERE A.SYSASSETCLASSALT_KEY>1	 AND B.FINALASSETCLASSALT_KEY=1	   AND B.ASSET_NORM<>'ALWYS_STD'
			AND A.SOURCEALT_KEY=B.SOURCEALT_KEY

UPDATE A SET A.INITIALASSETCLASSALT_KEY=ISNULL(B.SRCASSETCLASSALT_KEY,1)
            ,A.FINALASSETCLASSALT_KEY=ISNULL(B.SYSASSETCLASSALT_KEY,1)
		    ,A.INITIALNPADT=B.SRCNPA_DT
		    ,A.FINALNPADT=B.SYSNPA_DT
	FROM PRO.ACCOUNTCAL A INNER  JOIN PRO.CUSTOMERCAL B 
	ON  A.REFCUSTOMERID=B.REFCUSTOMERID AND A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID -- CHANGE AFTER DATA VERIFICATION
	AND B.SYSASSETCLASSALT_KEY>1



	--UPDATE A SET A.INITIALASSETCLASSALT_KEY=ISNULL(B.SRCASSETCLASSALT_KEY,1)
 --           ,A.FINALASSETCLASSALT_KEY=ISNULL(B.SYSASSETCLASSALT_KEY,1)
	--	    ,A.INITIALNPADT=B.SRCNPA_DT
	--	    ,A.FINALNPADT=B.SYSNPA_DT
	--FROM PRO.ACCOUNTCAL A INNER  JOIN PRO.CUSTOMERCAL B 
	--ON  A.REFCUSTOMERID=B.REFCUSTOMERID AND A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID -- CHANGE AFTER DATA VERIFICATION 30-NOV-2022 Triloki
	--AND B.SRCASSETCLASSALT_KEY>1 and a.FINALASSETCLASSALT_KEY=1

	UPDATE A SET A.INITIALASSETCLASSALT_KEY=ISNULL(B.SRCASSETCLASSALT_KEY,1)
            ,A.FINALASSETCLASSALT_KEY=ISNULL(B.SYSASSETCLASSALT_KEY,1)
		    ,A.INITIALNPADT=B.SRCNPA_DT
		    ,A.FINALNPADT=B.SYSNPA_DT
	FROM PRO.ACCOUNTCAL A INNER  JOIN PRO.CUSTOMERCAL B 
	ON   A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID -- CHANGE AFTER DATA VERIFICATION 30-NOV-2022 Triloki
	AND B.SRCASSETCLASSALT_KEY>1 and a.FINALASSETCLASSALT_KEY=1

	
------update INITIALASSETCLASSALT_KEY & INITIALNPADT in AccountCal UCIF_ID,SOURCESYSTEMCUSTOMERID,REFCUSTOMERID level ---changes done as per discussion with bank 2022-12-05-----Pranay & Amar sir--------------------------------------

--if OBJECT_ID('tempdb..#SrcNpaDate_Class') is not null
--drop table #SrcNpaDate_Class
--SELECT InitialAssetClassAlt_Key,InitialNpaDt,SrcAssetClassAlt_Key,SrcNPA_Dt,A.RefCustomerID,A.SourceSystemCustomerID,A.UCIF_ID 

--INTO #SrcNpaDate_Class
--FROM PRO.CustomerCal A
--INNER JOIN PRO.AccountCal B
--ON A.SourceSystemCustomerID=B.SourceSystemCustomerID
--AND SrcAssetClassAlt_Key<>InitialAssetClassAlt_Key


--;with CTE_UCIF_ID
--as (
--	SELECT A.UCIF_ID,MIN(A.SrcNPA_Dt) SrcNPA_Dt,max(SrcAssetClassAlt_Key)SrcAssetClassAlt_Key  FROM #SrcNpaDate_Class  A 
--	WHERE SrcAssetClassAlt_Key>1
--	AND (A.UCIF_ID IS NOT NULL AND UCIF_ID<>'0')
--	AND A.SrcNPA_Dt IS NOT NULL
--	GROUP BY A.UCIF_ID

--) 
--UPDATE B SET 
--B.InitialAssetClassAlt_Key=A.SrcAssetClassAlt_Key
--,B.InitialNpaDt=A.SrcNPA_Dt 
--FROM CTE_UCIF_ID A
--INNER JOIN PRO.AccountCal B
--ON A.UCIF_ID=B.UCIF_ID
--AND SrcAssetClassAlt_Key<>InitialAssetClassAlt_Key

--;with CTE_SOURCESYSTEMCUSTOMERID
--as (
--	SELECT A.SOURCESYSTEMCUSTOMERID,MIN(A.SrcNPA_Dt) SrcNPA_Dt,max(SrcAssetClassAlt_Key)SrcAssetClassAlt_Key  FROM #SrcNpaDate_Class  A 
--	WHERE SrcAssetClassAlt_Key>1
--	AND (A.SOURCESYSTEMCUSTOMERID IS NOT NULL AND SOURCESYSTEMCUSTOMERID<>'0')
--	AND A.SrcNPA_Dt IS NOT NULL
--	GROUP BY A.SOURCESYSTEMCUSTOMERID

--)
--UPDATE B SET 
--B.InitialAssetClassAlt_Key=A.SrcAssetClassAlt_Key
--,B.InitialNpaDt=A.SrcNPA_Dt
--FROM CTE_SOURCESYSTEMCUSTOMERID A
--INNER JOIN PRO.AccountCal B
--ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
--AND SrcAssetClassAlt_Key<>InitialAssetClassAlt_Key


--;with CTE_REFCUSTOMERID
--as (
--	SELECT A.REFCUSTOMERID,MIN(A.SrcNPA_Dt) SrcNPA_Dt,max(SrcAssetClassAlt_Key)SrcAssetClassAlt_Key  FROM #SrcNpaDate_Class  A 
--	WHERE SrcAssetClassAlt_Key>1
--	AND (A.REFCUSTOMERID IS NOT NULL AND REFCUSTOMERID<>'0')
--	AND A.SrcNPA_Dt IS NOT NULL
--	GROUP BY A.REFCUSTOMERID

--) 
--UPDATE B SET 
--B.InitialAssetClassAlt_Key=A.SrcAssetClassAlt_Key
--,B.InitialNpaDt=A.SrcNPA_Dt
--FROM CTE_REFCUSTOMERID A
--INNER JOIN PRO.AccountCal B
--ON A.REFCUSTOMERID=B.REFCUSTOMERID
--AND SrcAssetClassAlt_Key<>InitialAssetClassAlt_Key
----------------------------------------------------------

----New condition added on 20-Nov-2020 for vision plus INITIALNPADT as per data ---

update a set INITIALNPADT=b.NPADate
from PRO.ACCOUNTCAL a
inner join  YBL_ACS_MIS.[DBO].ACCOUNTDATA   b
on a.customeracid=b.AccountID
WHERE b.SOURCESYSTEMNAME='VISIONPLUS'

-------------------------------------------------------------------------------------

UPDATE B SET BANKASSETCLASS=A.ASSETCLASS
FROM YBL_ACS_MIS..ACCOUNTDATA A
INNER JOIN  PRO.ACCOUNTCAL B ON A.ACCOUNTID=B.CUSTOMERACID 
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=B.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)


UPDATE B SET BANKASSETCLASS=A.ASSETCLASS
FROM YBL_ACS_MIS..AccountData_CA A
INNER JOIN  PRO.ACCOUNTCAL B ON A.ACCOUNTID=B.CUSTOMERACID 
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=B.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)

/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

UPDATE B SET BANKASSETCLASS=A.ASSETCLASS
FROM YBL_ACS_MIS..AccountData_FinSmart A
INNER JOIN  PRO.ACCOUNTCAL B ON A.ACCOUNTID=B.CUSTOMERACID 
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=B.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

UPDATE A SET DEGREASON='EXISTING NPA' + ' ' + B.SOURCEDBNAME + '  ' + + 'CUST ID  '+ A.REFCUSTOMERID 
FROM PRO.CUSTOMERCAL A
	 INNER JOIN DIMSOURCEDB  B ON B.SOURCEALT_KEY=A.SOURCEALT_KEY
	 AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
	WHERE (A.REFCUSTOMERID IS NOT NULL AND REFCUSTOMERID<>'0')  AND  ISNULL(A.SYSASSETCLASSALT_KEY,1)<>1
	 AND A.DEGREASON IS NULL

	 UPDATE A SET DEGREASON='EXISTING NPA' + ' ' + B.SOURCEDBNAME + '  ' + + 'CUST ID  '+ A.SOURCESYSTEMCUSTOMERID 
   FROM PRO.CUSTOMERCAL A
	 INNER JOIN DIMSOURCEDB  B ON B.SOURCEALT_KEY=A.SOURCEALT_KEY
	 AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
	WHERE (A.REFCUSTOMERID IS  NULL )  AND SOURCESYSTEMCUSTOMERID IS NOT NULL AND  ISNULL(A.SYSASSETCLASSALT_KEY,1)<>1
	 AND A.DEGREASON IS NULL

	 
  
 UPDATE A SET DEGREASON='PERCOLATION BY' + ' ' + C.SOURCEDBNAME + '  ' + + 'CUST ID  '+ A.REFCUSTOMERID
	FROM PRO.ACCOUNTCAL A INNER JOIN PRO.CUSTOMERCAL B ON A.SOURCESYSTEMCUSTOMERID =B.SOURCESYSTEMCUSTOMERID
	INNER JOIN DIMSOURCEDB  C ON C.SOURCEALT_KEY=B.SOURCEALT_KEY
	AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
	WHERE (B.FLGPROCESSING='N')  AND (A.FLGDEG='N') AND B.DEGREASON IS NOT NULL AND A.FINALASSETCLASSALT_KEY>1
	 AND B.DEGREASON LIKE '%EXISTING NPA%'
	 AND A.SOURCEALT_KEY<>B.SOURCEALT_KEY

 UPDATE A SET DEGREASON=B.DEGREASON
	FROM PRO.ACCOUNTCAL A INNER JOIN PRO.CUSTOMERCAL B ON A.SOURCESYSTEMCUSTOMERID =B.SOURCESYSTEMCUSTOMERID
	WHERE (B.FLGPROCESSING='N')  AND (A.FLGDEG='N') AND B.DEGREASON IS NOT NULL AND A.FINALASSETCLASSALT_KEY>1
	 AND A.DEGREASON IS NULL

	 UPDATE A SET DEGREASON='EXISTING NPA' + ' ' + C.SOURCEDBNAME + '  ' + + 'CUST ID  '+ A.REFCUSTOMERID
	FROM PRO.ACCOUNTCAL A INNER JOIN PRO.CUSTOMERCAL B ON A.SOURCESYSTEMCUSTOMERID =B.SOURCESYSTEMCUSTOMERID
	inner join #TEMPTABLEFCC_ASSETCLASS d on d.SOURCESYSTEMCUSTOMERID=a.SOURCESYSTEMCUSTOMERID
	INNER JOIN DIMSOURCEDB  C ON C.SOURCEALT_KEY=a.SOURCEALT_KEY
	AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
	WHERE (B.FLGPROCESSING='N')  AND (A.FLGDEG='N')  AND A.FINALASSETCLASSALT_KEY>1
	  AND C.SourceShortNameEnum='FCC'  --EXISTING NPA FCC REMOVE PERCOLATION 18/11/2019


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE ASSET CLASS FROM CUSTOMER TO ACCOUNT LEVEL'
/*------------------UPDATE COMMERCIALFLAG_ALTKEY IN ACCOUNT CAL TABLE------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE COMMERCIALFLAG_ALTKEY IN ACCOUNT CAL TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.COMMERCIALFLAG_ALTKEY=C.COMMERCIALFLAGALT_KEY 
FROM  PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON  A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN  DIMCOMMERCIALFLAG C ON C.COMMERCIALFLAGCODE=B.COMMERCIALFLAG
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY >=@TIMEKEY)
WHERE B.SOURCESYSTEMNAME='VISIONPLUS'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE COMMERCIALFLAG_ALTKEY IN ACCOUNT CAL TABLE'


/*------------------UPDATE ALWAYS STD IN ACCOUNTCAL TABLE------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE ALWAYS STD IN ACCOUNTCAL TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.ASSET_NORM=B.ASSETNORM
FROM PRO.ACCOUNTCAL A INNER JOIN DIMPRODUCT B ON A.PRODUCTALT_KEY=B.PRODUCTALT_KEY
AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.ASSETNORM='ALWYS_STD'


IF OBJECT_ID('TEMPDB..#TRIMLINECODE') IS NOT NULL
  DROP TABLE #TRIMLINECODE

SELECT ACCOUNTENTITYID,LINECODE INTO #TRIMLINECODE  FROM PRO.ACCOUNTCAL  WHERE  LINECODE IS NOT NULL

UPDATE #TRIMLINECODE SET LINECODE=SUBSTRING(LINECODE,1,LEN(LINECODE)-1) FROM #TRIMLINECODE WHERE RIGHT(LINECODE,1) LIKE '%[0-9]%'
UPDATE #TRIMLINECODE SET LINECODE=SUBSTRING(LINECODE,1,LEN(LINECODE)-1) FROM #TRIMLINECODE WHERE RIGHT(LINECODE,1) LIKE '%[0-9]%'
UPDATE #TRIMLINECODE SET LINECODE=SUBSTRING(LINECODE,1,LEN(LINECODE)-1) FROM #TRIMLINECODE WHERE RIGHT(LINECODE,1) LIKE '%[0-9]%'
UPDATE #TRIMLINECODE SET LINECODE=SUBSTRING(LINECODE,1,LEN(LINECODE)-1) FROM #TRIMLINECODE WHERE RIGHT(LINECODE,1) LIKE '%[0-9]%'
UPDATE #TRIMLINECODE SET LINECODE=SUBSTRING(LINECODE,1,LEN(LINECODE)-1) FROM #TRIMLINECODE WHERE RIGHT(LINECODE,1) LIKE '%[0-9]%'

UPDATE C SET C.ASSET_NORM=B.ASSETNORM
FROM #TRIMLINECODE A  INNER JOIN DIMLINECODE  B ON A.LINECODE=B.LINECODE
INNER JOIN PRO.ACCOUNTCAL C ON A.ACCOUNTENTITYID=C.ACCOUNTENTITYID 
AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.ASSETNORM='ALWYS_STD'

---FCC Added logic Audit Point
UPDATE A SET Balance= ISNULL(B.PrincipalOutstanding,0.00)+ isnull(B.INTERESTOVERDUE,0)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B
ON A.CUSTOMERACID=B.ACCOUNTID
where b.SourceSystemName='FCC' and A.SourceAlt_Key=2


--UPDATE A SET A.ASSET_NORM ='ALWYS_STD' --commented on  2023-04-05 Pranay
--FROM PRO.ACCOUNTCAL  A WHERE SUBSTRING(LineCode,1,5)='294OD'

EXEC [PRO].[AdvSecurityDetailAccountLevel_Insert]

EXEC [PRO].[AdvSecurityDetailUcifLevel_Insert]


/********below update added to mark CONDI_STD for below mentioned LineCode********mail dated 2023-04-03*as per BRD 1.01******changes***by Pranay**on**2023-04-05 ********/
UPDATE A SET A.ASSET_NORM ='CONDI_STD' FROM PRO.ACCOUNTCAL  A 
WHERE  ( 
		   LineCode like'%294ODAGFD%'  OR LineCode like'%ODAG-FCNR%' OR LineCode like'%IBUODAGFD%' 
	
 OR LineCode like'%226TLAGFD%' OR LineCode like'%FCYAG-DEP%' OR LineCode like'%LDAG-FCNR%' or LineCode like'%FD-EXCLE%' ---Added on 20240524
		)

/*****sum up the balances at cif_id level for above mentioned code and compare the balance and security value**** if balance<=security value then mark those accounts as 'ALWYS_STD' ****************/
IF OBJECT_ID('tempdb..##BalanceAtUcifLevel') IS NOT NULL
    DROP TABLE ##BalanceAtUcifLevel

	SELECT  UCIF_ID,SUM(Balance) as BalanceAtUcifLevel 
	INTO ##BalanceAtUcifLevel
	FROM PRO.ACCOUNTCAL  A 
WHERE  ( 
		LineCode like'%294ODAGFD%'  OR LineCode like'%ODAG-FCNR%' OR LineCode like'%IBUODAGFD%' 
	
 OR LineCode like'%226TLAGFD%' OR LineCode like'%FCYAG-DEP%' OR LineCode like'%LDAG-FCNR%' or LineCode like'%FD-EXCLE%' ---Added on 20240524
		)GROUP BY UCIF_ID

IF OBJECT_ID('tempdb..##CurrentValueUcifLevel') IS NOT NULL
    DROP TABLE ##CurrentValueUcifLevel

 SELECT a.UCIF_ID,SUM(CurrentValue) AS CurrentValueUcifLevel 
 INTO ##CurrentValueUcifLevel 
 FROM CURDAT.AdvSecurityDetailUcifLevel a 
 INNER JOIN ##BalanceAtUcifLevel B 
 ON  A.UCIF_ID=B.UCIF_ID  
 AND A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY
 group by a.UCIF_ID

 IF OBJECT_ID('tempdb..##STD_UCIF') IS NOT NULL
    DROP TABLE ##STD_UCIF

 SELECT a.*,b.CurrentValueUcifLevel 
 INTO ##STD_UCIF 
 FROM ##BalanceAtUcifLevel a 
 INNER JOIN  ##CurrentValueUcifLevel b
 ON a.UCIF_ID=b.UCIF_ID
 WHERE a.BalanceAtUcifLevel<=b.CurrentValueUcifLevel

 --select * from ##STD_UCIF--##CurrentValueUcifLevel--##BalanceAtUcifLevel --

 UPDATE A SET A.ASSET_NORM ='ALWYS_STD' 
 FROM PRO.ACCOUNTCAL  A  
 INNER JOIN ##STD_UCIF b
 on a.UCIF_ID=b.UCIF_ID
WHERE  ( 
		LineCode like'%294ODAGFD%'  OR LineCode like'%ODAG-FCNR%' OR LineCode like'%IBUODAGFD%' 
	
 OR LineCode like'%226TLAGFD%' OR LineCode like'%FCYAG-DEP%' OR LineCode like'%LDAG-FCNR%' or LineCode like'%FD-EXCLE%' ---Added on 20240524
		)


 
 --UPDATE A SET A.ASSET_NORM ='ALWYS_STD'
--FROM PRO.ACCOUNTCAL  A INNER JOIN YBL_ACS_MIS..ODS_FCR_CH_OD_LIMIT B
 --ON A.CustomerAcID=B.Cod_acct_no  WHERE B.flg_internal_fd='Y'




UPDATE A SET A.FINALASSETCLASSALT_KEY=1,FINALNPADT=NULL
FROM PRO.ACCOUNTCAL  A
WHERE ASSET_NORM='ALWYS_STD'

UPDATE A SET A.SYSASSETCLASSALT_KEY=1,SYSNPA_DT=NULL,DBTDT=NULL,DBTDT2=NULL,DBTDT3=NULL
FROM PRO.CUSTOMERCAL  A
WHERE ASSET_NORM='ALWYS_STD'

UPDATE A SET A.ASSET_NORM='ALWYS_STD'
FROM PRO.ACCOUNTCAL A INNER JOIN PRO.CUSTOMERCAL B ON A.CUSTOMERENTITYID=B.CUSTOMERENTITYID
WHERE B.ASSET_NORM='ALWYS_STD' AND A.ASSET_NORM<>'ALWYS_NPA'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE ALWAYS STD IN ACCOUNTCAL TABLE'

/*------------------UPDATE FACILITY TYPE IN ACCOUNT CAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE FACILITY TYPE IN ACCOUNT CAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.FACILITYTYPE =(CASE WHEN B.SOURCENAME='MUREX' THEN 'INV'
                                  WHEN B.SOURCENAME='FINNONE' THEN 'TL'
								  WHEN B.SOURCENAME='VISIONPLUS' THEN 'CC'
								  /*COMMENTED AND ADDED By Sourangshu BRNET ON LOCAL 20250101 ON UAT 20250107*/
								  --WHEN B.SOURCENAME IN('EIFS','ECBF','GANASEVA','GOLD','ECFS','CREDAVENUE_DA') THEN 'TL'
								  WHEN B.SOURCENAME IN('EIFS','ECBF','GANASEVA','GOLD','ECFS','CREDAVENUE_DA','BRNET') THEN 'TL'
								  /*ADDED By Sourangshu BRNET ON LOCAL 20250101 ON UAT 20250107 END*/
								  
								  WHEN B.SOURCENAME IN('SFIN') THEN 'TL' -- FOR SFIN AccountData_FinSmart 15102023
								  ELSE NULL END) 
FROM  PRO.ACCOUNTCAL A  INNER JOIN  DIMSOURCEDB B ON A.SOURCEALT_KEY=B.SOURCEALT_KEY
AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)

UPDATE A SET A.FACILITYTYPE=B.FACILITYTYPE
FROM PRO.ACCOUNTCAL A INNER JOIN DIMPRODUCT  B ON A.PRODUCTALT_KEY=B.PRODUCTALT_KEY
AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE A.FACILITYTYPE IS NULL


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE FACILITY TYPE IN ACCOUNT CAL'

/*------------------UPDATE BALANCE MUREX IN ACCOUNT CAL TABLE------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE BALANCE MUREX IN ACCOUNT CAL TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET  A.BALANCE=B.CURRENTCAPITAL1STLEG
             ,A.EXPOSURETYPE=B.EXPOSURETYPE
			 ,A.MTM_VALUE=B.MTM_VALUE
			 ,A.SOURCEALT_KEY=(SELECT SOURCEALT_KEY FROM DIMSOURCEDB WHERE SOURCENAME='MUREX' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
			-- ,A.DATEOFDATA=B.DATE_OF_DATA
			,A.DATEOFDATA= @PROCESSINGDATE
			 ,A.PRINCOUTSTD=B.MTM_VALUE
FROM PRO.ACCOUNTCAL  A INNER JOIN YBL_ACS_MIS..ODS_MUREX_DPD_NPA B 
ON A.CUSTOMERACID=CAST(TRNINTERNALTRADENO AS VARCHAR(50))


------Murex NPA marking  16-July-2020-----

-----Overdue since date updation
/* Start >> Murex account upgrade issue >> changes by Triloki/Vishal >> 14/07/2021 */
/*
  	  UPDATE A SET OVERDUESINCEDT=DATEADD(DAY,-90,d.NPADATE)
	FROM PRO.ACCOUNTCAL A INNER JOIN PRO.CUSTOMERCAL B ON A.SOURCESYSTEMCUSTOMERID =B.SOURCESYSTEMCUSTOMERID
	inner join #TEMPTABLEMurex_ASSETCLASS d on d.FCC_CustomerID=a.SOURCESYSTEMCUSTOMERID
	INNER JOIN DIMSOURCEDB  C ON C.SOURCEALT_KEY=a.SOURCEALT_KEY
	AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
	WHERE (B.FLGPROCESSING='N')  AND A.FINALASSETCLASSALT_KEY>1
	  AND C.SourceShortNameEnum='Murex'  
*/
/* End >> Murex account upgrade issue >> changes by Triloki/Vishal >> 14/07/2021 */

  ------Degrade reason---------
	  UPDATE A SET DEGREASON='EXISTING NPA' + ' ' + C.SOURCEDBNAME + '  ' + + 'CUST ID  '+ A.REFCUSTOMERID
	FROM PRO.ACCOUNTCAL A INNER JOIN PRO.CUSTOMERCAL B ON A.SOURCESYSTEMCUSTOMERID =B.SOURCESYSTEMCUSTOMERID
	inner join #TEMPTABLEMurex_ASSETCLASS d on d.FCC_CustomerID=a.SOURCESYSTEMCUSTOMERID
	INNER JOIN DIMSOURCEDB  C ON C.SOURCEALT_KEY=a.SOURCEALT_KEY
	AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
	WHERE (B.FLGPROCESSING='N')  AND (A.FLGDEG='N')  AND A.FINALASSETCLASSALT_KEY>1
	  AND C.SourceShortNameEnum='Murex' 

------Murex NPA marking End 16-July-2020-----

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE BALANCE MUREX IN ACCOUNT CAL TABLE'

/*------------------INSERT BILL DATA INTO BILL DETAIL TABLE------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'COLUMN FOR UPDATE BILL DETAIL TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

EXEC [PRO].[ADVFACBILLDETAIL_INSERT_DATA]

EXEC [Curdat].[AdvFacECFSDetail_INSERT_DATA]

EXEC [Curdat].[AdvFacSmartFinDetail_INSERT_DATA]
/* --COMMENTED BY BALA ON 20250516 BEGIN
Delete A from YBL_ACS.pro.accountcal a
inner join YBL_ACS_MIS.dbo.accountdata b
on a.customeracid=b.accountid
where sourcesystemname='ECFS'

UPDATE  A SET A.SOURCEALT_KEY= (SELECT SOURCEALT_KEY FROM DIMSOURCEDB WHERE SOURCENAME='ECFS' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B 
ON A.CUSTOMERACID=B.ContractRefNo
WHERE B.SOURCESYSTEMNAME='ECFS'

Delete A from YBL_ACS.pro.accountcal a
inner join YBL_ACS_MIS.dbo.AccountData_FinSmart b
on a.customeracid=b.accountid
where sourcesystemname='SFIN'


UPDATE  A SET A.SOURCEALT_KEY= (SELECT SOURCEALT_KEY FROM DIMSOURCEDB WHERE SOURCENAME='SFIN' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_FinSmart B 
ON A.CUSTOMERACID=B.ContractRefNo
WHERE B.SOURCESYSTEMNAME='SFIN'
*/--COMMENTED BY BALA ON 20250516 END  FOR COBORROWER LOGIC

/*------------------CALCULATE MINIMUM INTEREST DATE IN CASE OF BILL------------------*/

IF OBJECT_ID('TEMPDB..#TEMPTABLEINTERESTCALCDATE') IS NOT NULL
  DROP TABLE #TEMPTABLEINTERESTCALCDATE

--SELECT LBWHRVALUATIONID,MIN(INTERESTCALCDATE) AS INTERESTCALCDATE
--INTO #TEMPTABLEINTERESTCALCDATE
--FROM YBL_ACS_MIS.DBO.ODS_ECBF_MONTHLYINTERESTMST
--WHERE ISNULL(TOTALAMOUNT,0)<>ISNULL(TOTALBALANCE,0)
--AND INTERESTCALCDATE  IS NOT NULL
--GROUP BY LBWHRVALUATIONID
-------CHANGES MADE BY MADHUR ADD  AND LBWHRVALUATIONID IN (SELECT LBWHRVALUATIONID FROM YBL_ACS_MIS.DBO.ODS_ECBF_LBWHRVALUATIONMST WHERE WHRCLOSEFLAG<>1)
------ISNULL(TOTALBALANCE,0) > 0
SELECT LBWHRVALUATIONID,MIN(INTERESTCALCDATE) AS INTERESTCALCDATE
INTO #TEMPTABLEINTERESTCALCDATE
FROM YBL_ACS_MIS.DBO.ODS_ECBF_MONTHLYINTERESTMST
WHERE ISNULL(TOTALBALANCE,0) > 0
AND INTERESTCALCDATE  IS NOT NULL 
AND LBWHRVALUATIONID IN (SELECT LBWHRVALUATIONID FROM YBL_ACS_MIS.DBO.ODS_ECBF_LBWHRVALUATIONMST WHERE WHRCLOSEFLAG<>1)
GROUP BY LBWHRVALUATIONID

/*------------------UPDATE INTEREST DATE IN BILL DETAIL TABLE------------------*/

UPDATE  A SET INTCALDT=B.INTERESTCALCDATE
FROM CURDAT.ADVFACBILLDETAIL  A
INNER JOIN #TEMPTABLEINTERESTCALCDATE  B ON B.LBWHRVALUATIONID=A.LBID
AND A.EFFECTIVEFROMTIMEKEY=@TIMEKEY AND A.EFFECTIVETOTIMEKEY=@TIMEKEY
AND ISNULL(BALANCE,0)>0

/*------------------CALCULATE MINIMUMN BILL DUE DATE AND INTEREST  DATE------------------*/

IF OBJECT_ID('TEMPDB..#TEMPTABLEMINDATEECBF') IS NOT NULL
    DROP TABLE #TEMPTABLEMINDATEECBF

SELECT REFSYSTEMACID,MIN(BILLDUEDT) BILLDUEDT,MIN(INTCALDT) INTCALDT 
INTO #TEMPTABLEMINDATEECBF
FROM CURDAT.ADVFACBILLDETAIL 
WHERE EFFECTIVEFROMTIMEKEY=@TIMEKEY AND EFFECTIVETOTIMEKEY=@TIMEKEY 
AND ISNULL(BALANCE,0)>0
GROUP BY REFSYSTEMACID



----Comment on 01-Feb-2021
/*------------------UPDATE MINIMUMN DATE IN ACCOUNT CAL TABLE------------------*/
--IF OBJECT_ID('TEMPDB..#TEMPTABLEMINOVERDUEDT') IS NOT NULL
--    DROP TABLE #TEMPTABLEMINOVERDUEDT

--SELECT REFSYSTEMACID,PRO.GETMINIMUMDATE(BILLDUEDT,INTCALDT,NULL) AS MINOVERDUE 
--INTO #TEMPTABLEMINOVERDUEDT
--FROM #TEMPTABLEMINDATEECBF 

---------CHANGES MADE BY MADHUR ADD "AND B.MINOVERDUE < = @PROCESSINGDATE"
--UPDATE PRO.ACCOUNTCAL SET OVERDUESINCEDT=B.MINOVERDUE
--FROM  PRO.ACCOUNTCAL A 
--INNER JOIN #TEMPTABLEMINOVERDUEDT B ON A.CUSTOMERACID=B.REFSYSTEMACID AND B.MINOVERDUE < = @PROCESSINGDATE

------Comment end 01-Feb-2021
/*------------------CALCULATE SUM OF BALANCE AND BILL LIMIT THROUGH BILL DETAIL------------------*/

IF OBJECT_ID('TEMPDB..#TEMPTABLE_BILL_DETAIL') IS NOT NULL
    DROP TABLE #TEMPTABLE_BILL_DETAIL

--SELECT REFSYSTEMACID,SUM(ISNULL(BALANCE,0)) BALANCE,SUM(BILLLIMIT) BILLLIMIT 
--INTO #TEMPTABLE_BILL_DETAIL
--FROM CURDAT.ADVFACBILLDETAIL 
--WHERE EFFECTIVEFROMTIMEKEY=@TIMEKEY AND EFFECTIVETOTIMEKEY=@TIMEKEY
--AND ISNULL(BALANCE,0)>0
--GROUP BY REFSYSTEMACID

--------------ADDED PRINCIPALOS BY MADHUR ON 13-03-2019
SELECT REFSYSTEMACID,SUM(ISNULL(BALANCE,0)) BALANCE,SUM(BILLLIMIT) BILLLIMIT,sum(OVERDUEINTEREST) Int_overdue  ----Added Int_overdue on 01-Feb-2021
 ,SUM(ISNULL(BALANCE,0)-ISNULL(OVERDUEINTEREST,0)) AS PRINCIPALOS
INTO #TEMPTABLE_BILL_DETAIL
FROM CURDAT.ADVFACBILLDETAIL 
WHERE EFFECTIVEFROMTIMEKEY=@TIMEKEY AND EFFECTIVETOTIMEKEY=@TIMEKEY
AND ISNULL(BALANCE,0)>0
GROUP BY REFSYSTEMACID

/*------------------UPDATE BALANCE AND LIMIT IN ACCOUNT CAL TABLE------------------*/

UPDATE A SET A.BALANCE=B.BALANCE
            ,A.CURRENTLIMIT=B.BILLLIMIT
			,A.PRINCOUTSTD=B.PRINCIPALOS
			,A.IntOverdue = B.Int_overdue    ----Added Int_overdue on 01-Feb-2021
FROM  PRO.ACCOUNTCAL A INNER JOIN #TEMPTABLE_BILL_DETAIL B ON A.CUSTOMERACID=B.REFSYSTEMACID


-------Added on 01-Feb-2021 for ECBF interest overdue date and principal overdue date


IF OBJECT_ID('TEMPDB..#TEMPTABLE_ECBFInt') IS NOT NULL
    DROP TABLE #TEMPTABLE_ECBFInt


SELECT E.UBSCUSTOMERID,MIN(A.INTERESTCALCDATE) AS INTERESTCALCDATE
into #TEMPTABLE_ECBFInt
FROM YBL_ACS_MIS.[dbo].[ODS_ECBF_monthlyinterestmst] A
INNER JOIN YBL_ACS_MIS.[dbo].[ODS_ECBF_LBWHRVALUATIONMST]  B ON A.LBWHRVALUATIONID=B.LBWHRVALUATIONID
INNER JOIN YBL_ACS_MIS.[dbo].[ODS_ECBF_LBWHRVALUATIONREF] C ON B.WHRNUMBER=C.WHRNUMBER
INNER JOIN YBL_ACS_MIS.[dbo].[ODS_ECBF_LBMST] D ON C.lbid=D.lbid
INNER JOIN YBL_ACS_MIS.[dbo].[ODS_ECBF_BORROWERMST] E ON E.borrowerID=D.borrowerID
WHERE A.totalbalance       > 0
AND B.InterestRepaymentType=2
AND B.whrcloseflag<>1
AND A.INTERESTCALCDATE <= @PROCESSINGDATE
GROUP BY E.UBSCUSTOMERID  


UPDATE A SET A.IntOverdueSinceDt=B.INTERESTCALCDATE
FROM  PRO.ACCOUNTCAL A INNER JOIN #TEMPTABLE_ECBFInt B ON A.RefCustomerID=B.UBSCUSTOMERID
where A.SourceAlt_Key = 5




UPDATE A SET A.PrincOverdueSinceDt=B.BILLDUEDT
FROM  PRO.ACCOUNTCAL A INNER JOIN #TEMPTABLEMINDATEECBF B ON A.CUSTOMERACID=B.REFSYSTEMACID
where A.SourceAlt_Key = 5



IF OBJECT_ID('TEMPDB..#TEMPTABLEMINOVERDUEDT') IS NOT NULL
    DROP TABLE #TEMPTABLEMINOVERDUEDT

SELECT CUSTOMERACID,PRO.GETMINIMUMDATE(PrincOverdueSinceDt,IntOverdueSinceDt,NULL) AS MINOVERDUE 
INTO #TEMPTABLEMINOVERDUEDT
FROM PRO.ACCOUNTCAL  where SourceAlt_Key = 5


UPDATE PRO.ACCOUNTCAL SET OVERDUESINCEDT=B.MINOVERDUE
FROM  PRO.ACCOUNTCAL A 
INNER JOIN #TEMPTABLEMINOVERDUEDT B ON A.CUSTOMERACID=B.CUSTOMERACID AND B.MINOVERDUE < = @PROCESSINGDATE

update PRO.ACCOUNTCAL SET OverdueAmt = 0 where  SourceAlt_Key = 5

update PRO.ACCOUNTCAL SET OverdueAmt = ISNULL(PrincOverdue,0) + ISNULL(IntOverdue,0) where  SourceAlt_Key = 5

-------End  on 01-Feb-2021


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='COLUMN FOR UPDATE BILL DETAIL TABLE'

----Condition comment only Cred Avenue Integration 09/03/2022

/*------------------INSERT NF DATA INTO NF DETAIL TABLE------------------*/

----INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
----SELECT ORIGINAL_LOGIN(),'COLUMN FOR UPDATE AdvFacNFDetail TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

----EXEC [PRO].[AdvFacNFDetail_INSERT_DATA]


----IF OBJECT_ID('TEMPDB..#TEMPTABLE_NF_DETAIL') IS NOT NULL
    ----DROP TABLE #TEMPTABLE_NF_DETAIL

----SELECT REFSYSTEMACID,SUM(ISNULL(BALANCE,0)) BALANCE
----INTO #TEMPTABLE_NF_DETAIL
----FROM [CurDat].[AdvFacNFDetail] 
----WHERE EFFECTIVEFROMTIMEKEY=@TIMEKEY AND EFFECTIVETOTIMEKEY=@TIMEKEY
----AND ISNULL(BALANCE,0)>0
----GROUP BY REFSYSTEMACID

/*------------------UPDATE BALANCE  IN ACCOUNT CAL TABLE------------------*/

----UPDATE A SET A.BALANCE=B.BALANCE,SourceAlt_Key=2,FacilityType='NF' --(FCC)
   ----      FROM  PRO.ACCOUNTCAL A INNER JOIN #TEMPTABLE_NF_DETAIL B ON A.CUSTOMERACID=B.REFSYSTEMACID
	
----UPDATE A SET A.LineCode=B.MarginAccNo
   ----    FROM  PRO.ACCOUNTCAL A INNER JOIN [CurDat].[AdvFacNFDetail] B ON A.CUSTOMERACID=B.REFSYSTEMACID
----		WHERE B.EFFECTIVEFROMTIMEKEY=@TIMEKEY AND B.EFFECTIVETOTIMEKEY=@TIMEKEY
	----	AND isnull(B.MarginAccNo,'')<>''
		   	   
----UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY
 ----AND DESCRIPTION='COLUMN FOR UPDATE AdvFacNFDetail TABLE'

/*------------------UPDATE SUBSECTORALT_KEY ALT KEY IN ACCOUNT CAL TABLE------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SECTOR ALT KEY','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

----0	DATA / VALUE NOT PROVIDED
----1	PRIORITY
----2	PUBLIC
----3	BANK
----4	OTHER
UPDATE B SET SUBSECTORALT_KEY=C.SUBSECTORALT_KEY
FROM YBL_ACS_MIS..ACCOUNTDATA A
INNER JOIN PRO.ACCOUNTCAL B ON A.ACCOUNTID=B.CUSTOMERACID
INNER JOIN DIMSUBSECTOR C ON ISNULL(A.SECTORCODE,0)=ISNULL(C.SRCSYSSUBSECTORCODE,0)
INNER JOIN DIMSOURCEDB D ON D.SOURCEALT_KEY=B.SOURCEALT_KEY
AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY


UPDATE  A SET A.SUBSECTORALT_KEY=(CASE WHEN B.SECTORCODE IN('PSL MEDIUM SERVICE ENTERPRISES','PSL-SMALL SERVICE ENTERPRISES','DIRECT FINANCE - SERVICE - MICRO','PSL MICRO ENTERPRISES  SERVICE') THEN 1	 
									   WHEN B.SECTORCODE IN('NON PSL') THEN 4 END)
					  
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN YBL_ACS_MIS..ODS_EIFS_SEGMENTMST C ON B.SECTORCODE=C.SEGMENTNAME
WHERE B.SOURCESYSTEMNAME='EIFS'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SECTOR ALT KEY'

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SECTOR ALT KEY CREDAVENUE_DA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE B SET SUBSECTORALT_KEY=C.SUBSECTORALT_KEY
FROM YBL_ACS_MIS..AccountData_CA A
INNER JOIN PRO.ACCOUNTCAL B ON A.ACCOUNTID=B.CUSTOMERACID
INNER JOIN DIMSUBSECTOR C ON ISNULL(A.SECTORCODE,0)=ISNULL(C.SRCSYSSUBSECTORCODE,0)
INNER JOIN DIMSOURCEDB D ON D.SOURCEALT_KEY=B.SOURCEALT_KEY
AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY

/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

UPDATE B SET SUBSECTORALT_KEY=C.SUBSECTORALT_KEY
FROM YBL_ACS_MIS..AccountData_FinSmart A
INNER JOIN PRO.ACCOUNTCAL B ON A.ACCOUNTID=B.CUSTOMERACID
INNER JOIN DIMSUBSECTOR C ON ISNULL(A.SECTORCODE,0)=ISNULL(C.SRCSYSSUBSECTORCODE,0)
INNER JOIN DIMSOURCEDB D ON D.SOURCEALT_KEY=B.SOURCEALT_KEY
AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY
/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND 
 TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SECTOR ALT KEY CREDAVENUE_DA'


/*------------------UPDATE BORROWER TYPE ID IN ACCOUNT CAL TABLE------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE BORROWERTYPEID','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE C SET BORROWERTYPEID=A.BORROWERTYPEID
FROM YBL_ACS_MIS.[DBO].[ODS_ECBF_BORROWERMST] A 
INNER JOIN PRO.ACCOUNTCAL C ON C.SOURCESYSTEMCUSTOMERID=A.UBSCUSTOMERID
AND C.CUSTOMERACID=A.CUSTOMERACID--BORROWERID
INNER JOIN DIMSOURCEDB D ON D.SOURCEALT_KEY=C.SOURCEALT_KEY
AND D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY
AND D.SOURCENAME='ECBF'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE BORROWERTYPEID'


 /*------------------UPDATE IMAXID_CCUBE IN PRO.CUSTOMERCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE IMAXID_CCUBE IN PRO.CUSTOMERCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.IMAXID_CCUBE=B.IMAXID_CCUBE
FROM PRO.CUSTOMERCAL A INNER JOIN  YBL_ACS_MIS..CUSTOMERDATA B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
WHERE B.IMAXID_CCUBE IS NOT NULL

UPDATE PRO.CUSTOMERCAL SET IMAXID_CCUBE=NULL WHERE IMAXID_CCUBE ='0'
UPDATE PRO.CUSTOMERCAL SET IMAXID_CCUBE=NULL WHERE IMAXID_CCUBE ='NA'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE IMAXID_CCUBE IN PRO.CUSTOMERCAL'

/*------------------UPDATE IMAXID_CCUBE IN PRO.CUSTOMERCAL------------------*/

----------------------COMMENT TRILOKI 11/02/2109 TIME BENING-------------------
----/*------------------UPDATE SECURITY VALUE AT ACCOUNT LEVEL  FROM SECURITY TABLE------------------*/
----INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
----SELECT ORIGINAL_LOGIN(),'UPDATE SECURITY VALUE AT ACCOUNT LEVEL  FROM SECURITY TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

----UPDATE  A SET A.SECURITYVALUE =C.SECURITYVALUE FROM PRO.ACCOUNTCAL A 
----INNER JOIN(
----SELECT A.ACCOUNTENTITYID,SUM(CURRENTVALUE) SECURITYVALUE FROM CURDAT.ADVSECURITYVALUEDETAIL A
----INNER JOIN PRO.ACCOUNTCAL  B ON A.ACCOUNTENTITYID=B.ACCOUNTENTITYID
----WHERE A.ACCOUNTENTITYID IS NOT NULL  AND (A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY)
----GROUP BY A.ACCOUNTENTITYID)  C ON A.ACCOUNTENTITYID=C.ACCOUNTENTITYID

----UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SECURITY VALUE AT ACCOUNT LEVEL  FROM SECURITY TABLE'


----/*------------------UPDATE SECURITYVALUE FOR ECBF ACCOUNT INTERNAL PURPOSE------------------*/
----INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
----SELECT ORIGINAL_LOGIN(),'UPDATE SECURITYVALUE FOR ECBF ACCOUNT INTERNAL PURPOSE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

----UPDATE  A SET A.SECURITYVALUE =C.SECURITYVALUE,SECAPP='S' FROM PRO.ACCOUNTCAL A 
----INNER JOIN(
----SELECT A.ACCOUNTENTITYID,SUM(CASE WHEN ISNULL(B.CURRENTVALUE,0) =0   THEN CEILING(ISNULL(A.BALANCE,0)/1000)*1000
----ELSE ISNULL(B.CURRENTVALUE,0) END ) SECURITYVALUE FROM PRO.ACCOUNTCAL A 
---- INNER JOIN DIMSOURCEDB C ON A.SOURCEALT_KEY=C.SOURCEALT_KEY
----AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY
----LEFT OUTER JOIN CURDAT.ADVSECURITYVALUEDETAIL B ON A.ACCOUNTENTITYID=B.ACCOUNTENTITYID AND  (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY 
----AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
----WHERE  BALANCE>0 AND A.FLGABINITIO<>'Y' AND C.SOURCENAME IN ('ECBF') 
----GROUP BY A.ACCOUNTENTITYID)  C ON A.ACCOUNTENTITYID=C.ACCOUNTENTITYID

----UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SECURITYVALUE FOR ECBF ACCOUNT INTERNAL PURPOSE'


---- /*------------------UPDATE CURNTQTRRV AT  CUSTOMER LEVEL  FROM SECURITY TABLE------------------*/ 
----INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
----SELECT ORIGINAL_LOGIN(),'UPDATE CURNTQTRRV','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID
 
----UPDATE  A SET A.CURNTQTRRV =C.SECURITYVALUE FROM PRO.CUSTOMERCAL A 
----INNER JOIN(
----SELECT A.CUSTOMERENTITYID,SUM(CURRENTVALUE) SECURITYVALUE
----FROM CURDAT.ADVSECURITYVALUEDETAIL A
----WHERE   (A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY)
----GROUP BY A.CUSTOMERENTITYID)  C ON A.CUSTOMERENTITYID=C.CUSTOMERENTITYID 

----UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
----WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CURNTQTRRV'

/*------------------UPDATE FINAL CURNTQTRRV AT  CUSTOMER LEVEL------------------*/ 

----INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
----SELECT ORIGINAL_LOGIN(),'UPDATE FINAL CURNTQTRRV AT  CUSTOMER LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID
 
----UPDATE A SET A.CURNTQTRRV=ISNULL(A.CURNTQTRRV,0)+ISNULL(B.CURNTQTRRV,0) FROM PRO.CUSTOMERCAL A  INNER JOIN 
----(
----SELECT A.CUSTOMERENTITYID,SUM(CEILING(ISNULL(A.BALANCE,0)/1000)*1000) CURNTQTRRV FROM PRO.ACCOUNTCAL A 
----INNER JOIN PRO.CUSTOMERCAL B ON A.CUSTOMERENTITYID=B.CUSTOMERENTITYID
----INNER JOIN DIMSOURCEDB C ON A.SOURCEALT_KEY=C.SOURCEALT_KEY
----AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY
----WHERE  ISNULL(BALANCE,0)>0 AND ISNULL(A.FLGABINITIO,'N')<>'Y' AND C.SOURCENAME IN ('ECBF')
----GROUP BY A.CUSTOMERENTITYID
----) B ON A.CUSTOMERENTITYID=B.CUSTOMERENTITYID


--------IF OBJECT_ID('TEMPDB..#TEMPODS_VW_SECURITY_FOR_NPASYSTEM') IS NOT NULL
--------  DROP TABLE #TEMPODS_VW_SECURITY_FOR_NPASYSTEM


--------SELECT SUM(ISNULL(ATTACHED_SECURITY_VALUE,0)) AS ATTACHED_SECURITY_VALUE,IMAC_BORROWER_ID
--------INTO #TEMPODS_VW_SECURITY_FOR_NPASYSTEM
--------FROM YBL_ACS_MIS..ODS_VW_SECURITY_FOR_NPASYSTEM 
--------GROUP BY IMAC_BORROWER_ID
--------HAVING SUM(ISNULL(ATTACHED_SECURITY_VALUE,0))>=100

--------ALTER TABLE  #TEMPODS_VW_SECURITY_FOR_NPASYSTEM ADD  IMAXID_CCUBETOTALCOUNT INT 
--------ALTER TABLE  #TEMPODS_VW_SECURITY_FOR_NPASYSTEM ADD  ATTACHEDFINAL_SECURITY_VALUE DECIMAL (18,2) 

--------IF OBJECT_ID('TEMPDB..#IMAXID_CCUBETOTALCOUNT') IS NOT NULL
--------  DROP TABLE #IMAXID_CCUBETOTALCOUNT


--------SELECT COUNT(*) AS NUMBER , IMAXID_CCUBE 
--------INTO #IMAXID_CCUBETOTALCOUNT
--------FROM PRO.CUSTOMERCAL WHERE IMAXID_CCUBE IS NOT NULL
--------GROUP BY IMAXID_CCUBE

--------UPDATE A SET IMAXID_CCUBETOTALCOUNT= NUMBER 
--------FROM #TEMPODS_VW_SECURITY_FOR_NPASYSTEM A
--------INNER JOIN #IMAXID_CCUBETOTALCOUNT B ON A.IMAC_BORROWER_ID=B.IMAXID_CCUBE

--------UPDATE #TEMPODS_VW_SECURITY_FOR_NPASYSTEM SET ATTACHEDFINAL_SECURITY_VALUE=(ISNULL(ATTACHED_SECURITY_VALUE,0)/IMAXID_CCUBETOTALCOUNT)
--------WHERE IMAXID_CCUBETOTALCOUNT>=1

--------UPDATE B SET  CURNTQTRRV=ISNULL(B.CURNTQTRRV,0)+ ISNULL(ATTACHEDFINAL_SECURITY_VALUE,0)
-------- FROM #TEMPODS_VW_SECURITY_FOR_NPASYSTEM A
--------INNER JOIN PRO.CUSTOMERCAL B ON A.IMAC_BORROWER_ID=B.IMAXID_CCUBE

------/* Start : PHASE III ENPA WORK (Retail Collateral) Added By Triloki Khanna 04/06/2021*/

EXEC [PRO].[CustomerSecurityValueRetail_Insert_Data]


IF OBJECT_ID('TEMPDB..#RetailAccountSecurity') IS NOT NULL
   DROP TABLE #RetailAccountSecurity

SELECT   AccountEntityId,SUM(ISNULL(CurrentValue,0)) AS CurrentValue
Into #RetailAccountSecurity
FROM 	 curdaT.AdvSecurityDetail Advsec 
INNER JOIN curdaT.AdvSecurityValueDetail Sec ON (SEC.EffectiveFromTimeKey < = @TimeKey AND SEC.EffectiveToTimeKey >= @TimeKey)
							AND Advsec.SecurityEntityID=Sec.SecurityEntityID
							AND Advsec.EffectiveFromTimeKey < = @Timekey
				            AND Advsec.EffectiveToTimeKey > = @Timekey
WHERE EntryType='Retail' AND ISNULL(CurrentValue,0)>0
GROUP  BY AccountEntityId


UPDATE B SET SecurityValue=CurrentValue,SECAPP='S'
from #RetailAccountSecurity A
INNER JOIN PRO.AccountCal B
ON A.AccountEntityId=B.AccountEntityID

/*ADDED BY ZAIN ON 20250320 AS PER OBSERVATION RAISED BY SANKET ON LOCAL */
UPDATE C SET CurntQtrRv=CurrentValue
from #RetailAccountSecurity A
INNER JOIN PRO.AccountCal B
ON A.AccountEntityId=B.AccountEntityID
INNER JOIN PRO.customercal C ON B.RefCustomerID=C.RefCustomerID
/*ADDED BY ZAIN ON 20250320 AS PER OBSERVATION RAISED BY SANKET ON LOCAL */

--IF OBJECT_ID('TEMPDB..#CorporateCollateralIDSecurity') IS NOT NULL
--   DROP TABLE #CorporateCollateralIDSecurity
   
--SELECT Advsec.UCICID, Advsec.CollateralID,MIN(ISNULL(CurrentValue,0)) AS CurrentValue
--Into #CorporateCollateralIDSecurity
--FROM 	 AdvSecurityDetail Advsec 
--INNER JOIN AdvSecurityValueDetail Sec ON (SEC.EffectiveFromTimeKey < = @TimeKey AND SEC.EffectiveToTimeKey >= @TimeKey)
--						AND Advsec.CollateralID=Sec.CollateralID
--						AND Advsec.EffectiveFromTimeKey < = @TimeKey
--				        AND Advsec.EffectiveToTimeKey > = @TimeKey
--WHERE EntryType='Corporate'  AND ISNULL(CurrentValue,0)>0
----AND ValuationExpiryDate IS NOT NULL 
--AND Advsec.UCICID IS NOT NULL
----and ValuationExpiryDate >=@PROCESSDATE
--GROUP  BY Advsec.UCICID, Advsec.CollateralID

---New Condition Added 13/06/2022  Triloki Khanna----

EXEC [PRO].[CustomerSecurityValueCorporate_Insert_Data]


--IF OBJECT_ID('TEMPDB..#CorporateCollateralIDSecurity') IS NOT NULL
  --- DROP TABLE #CorporateCollateralIDSecurity
   



----SELECT Advsec.UCICID, Advsec.CollateralID,sum(ISNULL(CurrentValue,0)) AS CurrentValue
----Into #CorporateCollateralIDSecurity
----FROM 	 AdvSecurityDetail Advsec 
----INNER JOIN AdvSecurityValueDetail Sec ON (SEC.EffectiveFromTimeKey < = @TimeKey AND SEC.EffectiveToTimeKey >= @TimeKey)
----						AND Advsec.CollateralID=Sec.CollateralID
----						AND Advsec.EffectiveFromTimeKey < = @TimeKey
----				        AND Advsec.EffectiveToTimeKey > = @TimeKey
----WHERE EntryType='CorporateE'  AND ISNULL(CurrentValue,0)>0

----AND Advsec.UCICID IS NOT NULL
----AND Advsec.SecurityStatus='Tangible'

----GROUP  BY Advsec.UCICID, Advsec.CollateralID

--SELECT Advsec.UCICID, Advsec.CollateralID,sum(ISNULL(CurrentValue,0)) AS CurrentValue
--Into #CorporateCollateralIDSecurity
--FROM 	(select distinct UCICID, CollateralID,EntryType,SecurityStatus,CollateralType,CollateralSubTypeDescription,EffectiveFromTimeKey,EffectiveToTimeKey,
--SecurityEntityID from  AdvSecurityDetail Adv 
--where Adv.EffectiveFromTimeKey < = @TimeKey AND Adv.EffectiveToTimeKey > = @TimeKey)Advsec
--INNER JOIN AdvSecurityValueDetail Sec ON (SEC.EffectiveFromTimeKey < = @TimeKey AND SEC.EffectiveToTimeKey >= @TimeKey)
				--		AND Advsec.CollateralID=Sec.CollateralID
				--		AND Advsec.SecurityEntityID=Sec.SecurityEntityID
				--		AND Advsec.EffectiveFromTimeKey < = @TimeKey
				--        AND Advsec.EffectiveToTimeKey > = @TimeKey
--WHERE EntryType='CorporateE'  AND ISNULL(CurrentValue,0)>0
--AND Advsec.UCICID IS NOT NULL
--AND Advsec.SecurityStatus='Tangible' --and advsec.collateralID='COL2211315303'
--GROUP  BY Advsec.UCICID, Advsec.CollateralID



IF OBJECT_ID('TEMPDB..#CorporateCollateralIDSecurity') IS NOT NULL
   DROP TABLE #CorporateCollateralIDSecurity

SELECT Advsec.UCICID, Advsec.CollateralID,sum(ISNULL(CurrentValue,0)) AS CurrentValue
Into #CorporateCollateralIDSecurity

FROM 	(select distinct UCICID, CollateralID,EntryType,SecurityStatus,CollateralType,CollateralSubTypeDescription,Adv.EffectiveFromTimeKey,Adv.EffectiveToTimeKey,
SecurityEntityID from  CURDAT.AdvSecurityDetail Adv 
inner join DimCollateralSecurityMapping Mapping on Mapping.SecurityAlt_Key=Adv.SecurityAlt_Key
AND Mapping.EffectiveFromTimeKey < = @TimeKey
				        AND Mapping.EffectiveToTimeKey > = @TimeKey
				and Mapping.SecurityName in ('Gold','Agricultural property','Commercial property','Industrial Property',
'Residential Land','Residential Plot','Residential Property','Computers','All Movable Fixed Asset',
'Cranes','Equipment','Furniture and Fixtures','Movable Plant and Machinery','All Current Assets','Receivables / Book Debts',
'Stocks / Inventory','Stocks / Receivables','Barge',
'Dredger','Rigs','Ship','Vessel','Other Aircraft','Passenger Aircraft',
'Small Aircraft','Shares (Unlisted)','Bonds','Debentures','Life Insurance',
'Cash Margin','Fixed Deposits','Goods Vehicle','Passenger Vehicle','Immovable Plant and Machinery','Windmill','Toll Receivables')
where Adv.EffectiveFromTimeKey < = @TimeKey AND Adv.EffectiveToTimeKey > = @TimeKey)Advsec
INNER JOIN CURDAT.AdvSecurityValueDetail Sec ON (SEC.EffectiveFromTimeKey < = @TimeKey AND SEC.EffectiveToTimeKey >= @TimeKey)
						AND Advsec.CollateralID=Sec.CollateralID
						AND Advsec.SecurityEntityID=Sec.SecurityEntityID
						AND Advsec.EffectiveFromTimeKey < = @TimeKey
				        --AND Advsec.EffectiveToTimeKey > = @TimeKey /*COMMENTED BY ZAIN BECAUSE OF SECURITY EROSION CR OBSERVATION RAISED BY SANKET ON LACAL DATED 20250320*/
						AND Advsec.EffectiveToTimeKey =49999		/*ADDED BY ZAIN BECAUSE OF SECURITY EROSION CR OBSERVATION RAISED BY SANKET ON LACAL DATED 20250320*/

WHERE EntryType='CorporateE'  AND ISNULL(CurrentValue,0)>0
AND Advsec.UCICID IS NOT NULL
AND Advsec.SecurityStatus='Tangible'
and ValuationExpiryDate >=@PROCESSDATE
AND ValuationExpiryDate IS NOT NULL 
GROUP  BY Advsec.UCICID, Advsec.CollateralID
union all

SELECT Advsec.UCICID, Advsec.CollateralID,sum(ISNULL(CurrentValue,0)) AS CurrentValue
FROM 	(select distinct UCICID, CollateralID,EntryType,SecurityStatus,CollateralType,CollateralSubTypeDescription,Adv.EffectiveFromTimeKey,Adv.EffectiveToTimeKey,
SecurityEntityID from  CURDAT.AdvSecurityDetail Adv 
inner join DimCollateralSecurityMapping Mapping on Mapping.SecurityAlt_Key=Adv.SecurityAlt_Key
AND Mapping.EffectiveFromTimeKey < = @TimeKey
				        AND Mapping.EffectiveToTimeKey > = @TimeKey
				and Mapping.SecurityName in ('Shares (listed)','Mutal Funds (Debt)','Mutal Funds (Hybrid)','Mutual Funds (Equity)')
where Adv.EffectiveFromTimeKey < = @TimeKey AND Adv.EffectiveToTimeKey > = @TimeKey)Advsec
INNER JOIN CURDAT.AdvSecurityValueDetail Sec ON (SEC.EffectiveFromTimeKey < = @TimeKey AND SEC.EffectiveToTimeKey >= @TimeKey)
						AND Advsec.CollateralID=Sec.CollateralID
						AND Advsec.SecurityEntityID=Sec.SecurityEntityID
						AND Advsec.EffectiveFromTimeKey < = @TimeKey
				        --AND Advsec.EffectiveToTimeKey > = @TimeKey  /*COMMENTED BY ZAIN BECAUSE OF SECURITY EROSION CR OBSERVATION RAISED BY SANKET ON LACAL DATED 20250320*/
						AND Advsec.EffectiveToTimeKey > = 49999  /*ADDED BY ZAIN BECAUSE OF SECURITY EROSION CR OBSERVATION RAISED BY SANKET ON LACAL DATED 20250320*/
WHERE EntryType='CorporateE'  AND ISNULL(CurrentValue,0)>0
AND Advsec.UCICID IS NOT NULL
AND Advsec.SecurityStatus='Tangible'

GROUP  BY Advsec.UCICID, Advsec.CollateralID




IF OBJECT_ID('TEMPDB..#CorporateCustomerSecurity') IS NOT NULL

   DROP TABLE #CorporateCustomerSecurity
   
SELECT   UCICID,SUM(ISNULL(CurrentValue,0)) AS CurrentValue
INTO    #CorporateCustomerSecurity
FROM 	#CorporateCollateralIDSecurity
GROUP  BY UCICID


ALTER TABLE  #CorporateCustomerSecurity ADD  UCICIDIDTOTALCOUNT INT 
ALTER TABLE  #CorporateCustomerSecurity ADD  UCICIDIDSECURITYVALUE DECIMAL (18,2) 

IF OBJECT_ID('TEMPDB..#UCICIDIDTOTALCOUNT') IS NOT NULL
  DROP TABLE #UCICIDIDTOTALCOUNT

SELECT COUNT(*) AS NUMBER , A.UCIF_ID 
INTO #UCICIDIDTOTALCOUNT
FROM PRO.CUSTOMERCAL  A
--INNER JOIN PRO.AccountCal B  ON A.UCIF_ID=B.UCIF_ID AND B.SecApp='U' AND A.SourceSystemCustomerID=B.SourceSystemCustomerID
WHERE A.UCIF_ID IS NOT NULL
and a.SourceAlt_Key in(1,2,7)
GROUP BY A.UCIF_ID



UPDATE A SET UCICIDIDTOTALCOUNT= NUMBER 
FROM #CorporateCustomerSecurity A
INNER JOIN #UCICIDIDTOTALCOUNT B ON A.UCICID=B.UCIF_ID

UPDATE #CorporateCustomerSecurity SET UCICIDIDSECURITYVALUE=(ISNULL(CurrentValue,0)/UCICIDIDTOTALCOUNT)
WHERE UCICIDIDTOTALCOUNT>=1

update b set CurntQtrRv=a.UCICIDIDSECURITYVALUE
from #CorporateCustomerSecurity a
inner join pro.customercal b
on a.UCICID=b.UCIF_ID  and b.sourcealt_key in (1,2,7)


------/* End : PHASE III ENPA WORK (Retail Collateral) Added By Triloki Khanna 04/06/2021*/


----IF OBJECT_ID('TEMPDB..#TEMPSECURITYDATAUPLOAD') IS NOT NULL
----  DROP TABLE #TEMPSECURITYDATAUPLOAD
  
----SELECT  CustomerID, SUM(ISNULL(CURRENTVALUE,0)) CURRENTVALUE 
----INTO #TEMPSECURITYDATAUPLOAD
----FROM DATAUPLOAD.SECURITYDATAUPLOAD 
----WHERE EFFECTIVETOTIMEKEY=49999
----GROUP BY CustomerID
----ORDER BY CustomerID


----ALTER TABLE  #TEMPSECURITYDATAUPLOAD ADD  COUNT INT 
----ALTER TABLE  #TEMPSECURITYDATAUPLOAD ADD  ATTACHEDFINAL_SECURITY_VALUE DECIMAL (18,2)

----IF OBJECT_ID('TEMPDB..#MAXID_RefCustomerID') IS NOT NULL
----  DROP TABLE #MAXID_RefCustomerID
----SELECT COUNT(*) AS NUMBER , RefCustomerID 
----INTO #MAXID_RefCustomerID
----FROM PRO.CUSTOMERCAL WHERE RefCustomerID IS NOT NULL
----GROUP BY RefCustomerID

----UPDATE A SET COUNT= NUMBER 
----FROM #TEMPSECURITYDATAUPLOAD A
----INNER JOIN #MAXID_RefCustomerID B ON A.CustomerID=B.RefCustomerID

----UPDATE #TEMPSECURITYDATAUPLOAD SET ATTACHEDFINAL_SECURITY_VALUE=(ISNULL(CURRENTVALUE,0)/COUNT) WHERE COUNT>=1

----UPDATE B SET  CURNTQTRRV=ISNULL(B.CURNTQTRRV,0)+ ISNULL(ATTACHEDFINAL_SECURITY_VALUE,0)
---- FROM #TEMPSECURITYDATAUPLOAD A
----INNER JOIN PRO.CUSTOMERCAL B ON A.CustomerID=B.RefCustomerID


----UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
----WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE FINAL CURNTQTRRV AT  CUSTOMER LEVEL'


 /*------------------UPDATE SECAPP AT  ACCOUNT LEVEL TABLE------------------*/ 
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'FLAG MARK FOR SECAPP','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

------UPDATE A SET SECAPP='S' 
------FROM PRO.ACCOUNTCAL A INNER JOIN DIMSOURCEDB B
------ON A.SOURCEALT_KEY=B.SOURCEALT_KEY
------AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
------WHERE B.SOURCENAME IN ('FCR','FCC','FINNONE') 

UPDATE A SET SECAPP='S'
 FROM PRO.ACCOUNTCAL A
 INNER JOIN DIMSOURCEDB C
ON A.SOURCEALT_KEY=C.SOURCEALT_KEY
AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY
INNER JOIN PRO.CUSTOMERCAL B ON A.CUSTOMERENTITYID=B.CUSTOMERENTITYID
 WHERE ISNULL(B.CURNTQTRRV,0)>0
  --AND C.SOURCENAME NOT IN ('VISIONPLUS','GANASEVA','ECFS','MUREX') 


UPDATE  A SET SECAPP='U' FROM PRO.ACCOUNTCAL A INNER JOIN DIMPRODUCT B 
ON  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
AND A.PRODUCTALT_KEY=B.PRODUCTALT_KEY
WHERE B.PRODUCTGROUP='UNSECURED'


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='FLAG MARK FOR SECAPP'


/*------------------UPDATE EIFS DATA ONLY------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE EIFS DATA ONLY','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET  A.CURRENTLIMIT=ISNULL(B.CURRENTLIMIT,0.00)
             ,A.DRAWINGPOWER=ISNULL(B.DRAWINGPOWER,0.00)
			 ,A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
			 ,A.REFCUSTOMERID=B.FCR_CUSTOMERID
			 ,A.ACOPENDT=B.ACCOUNTOPENDATE
			 ,A.CURRENTLIMITDT=B.CURRENTLIMITDATE
			 ,A.BALANCE=CASE WHEN B.SOURCESYSTEMNAME ='FCR' THEN ISNULL(B.TOTALBALANCEOUTSTANDINGINR,0.00) * -1 ELSE ISNULL(B.TOTALBALANCEOUTSTANDINGINR,0.00) END 
			 ,A.BALANCEINCRNCY=ISNULL(B.BALANCEINCURRENCY,0.00)
			 ,A.BRANCHCODE=B.ACCOUNTBRANCHCODE
			 ,A.ACTSEGMENTCODE=B.ACCOUNTSEGMENTCODE
			 ,A.LINECODE=(CASE WHEN SOURCENAME IN('FCC','FCR')  THEN    B.FACILITYCODELINECODE  ELSE NULL END)
			 ,A.CONTIEXCESSDT=CASE WHEN C.SOURCENAME ='FCR' THEN  B.CONTINUOUSEXCESSSINCEDATE ELSE NULL END 
            ,A.LASTCRDATE =B.LASTCREDITDATE
			,A.STOCKSTDT  =B.STOCKSTATEMENTDATE
			,A.INTTRATE=ISNULL(B.INTERESTRATE,0.00)
			,A.FIRSTDTOFDISB=B.FIRSTDTOFDISB
			,A.DEBITSINCEDT=CASE WHEN C.SOURCENAME ='FCR' THEN B.SBACAATODDATE ELSE NULL END 
			,A.DISBAMOUNT            = ISNULL(B.DISBAMOUNT,0.00)
			,A.PRINCOUTSTD           = ISNULL(B.PRINCIPALOUTSTANDING  ,0.00)  
			,A.PRINCOVERDUE          = ISNULL(B.PRINCIPALOVERDUE,0.00)
			,A.PRINCOVERDUESINCEDT   = B.PRINCIPALOVERDUESINCEDATE
			,A.DPD_PRINCOVERDUE      = ISNULL(B.PRINCIPALOVERDUEDPD,0)
			,A.INTOVERDUE            = ISNULL(B.INTERESTOVERDUE ,0.00)
			,A.INTOVERDUESINCEDT     = B.INTERESTOVERDUESINCEDATE
			,A.DPD_INTOVERDUESINCE   = ISNULL(B.INTERESTOVERDUESINCEDPD,0)
			,A.OTHEROVERDUE          = ISNULL(B.OTHEROVERDUE,0.00)
			,A.OTHEROVERDUESINCEDT   = B.OTHEROVERDUESINCEDATE
			,A.DPD_OTHEROVERDUESINCE = ISNULL(B.OTHEROVERDUESINCEDPD,0)
			,A.OVERDUEAMT            = (CASE WHEN C.SOURCENAME ='FCC' THEN  (ISNULL(B.PRINCIPALOVERDUE,0.00)+ISNULL(B.INTERESTOVERDUE,0.00)+ISNULL(B.OTHEROVERDUE,0.00))
			                                ELSE  ISNULL(B.TOTALOVERDUEAMOUNT,0.00) END)
			,A.OVERDUESINCEDT        =  B.OVERDUESINCEDATE 
			,A.GOVTGTYAMT            =  ISNULL(B.[GOVERNMENTGUARANTEEAMOUNT ],0.00)
			,A.WRITEOFFAMOUNT        = ISNULL(B.WRITEOFFAMOUNT,0.00)
			,A.UNADJSUBSIDY          =  ISNULL(B.UNADJUSTSUBSIDY,0.00)
			,A.RELATIONSHIPNUMBER	 = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.RELATIONSHIPNUMBER  ELSE NULL END)
            ,A.ACCOUNTFLAG           = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTFLAG		 ELSE NULL END)
			,A.LIABILITY	         = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.LIABILITY			 ELSE NULL END)
			,A.CD                    = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.CD                	 ELSE NULL END)
			,A.ACCOUNTSTATUS	     = (CASE WHEN SOURCENAME in ('VISIONPLUS','FCC','FCR')  THEN    B.ACCOUNTSTATUS		 ELSE NULL END)
			,A.ACCOUNTBLKCODE1       = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTBLKCODE1	 ELSE NULL END)
			,A.ACCOUNTBLKCODE2       = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTBLKCODE2	 ELSE NULL END)
			,A.BANKASSETCLASS=B.ASSETCLASS
			,A.PRODUCTCODE          = B.PRODUCTCODE
			  
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND B.SOURCESYSTEMNAME='EIFS'

------Eifs sending wrong max dpd in case of interest overdue hence overdue since date calculating wrong as per Mail dated from harshal 11-Feb-2021
--UPDATE A SET A.OVERDUESINCEDT=DATEADD(DAY,-MAXDPD,@PROCESSINGDATE)
--FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON A.CUSTOMERACID=B.ACCOUNTID
--INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
--AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
--WHERE B.SOURCESYSTEMNAME='EIFS' AND ISNULL(B.MAXDPD,0)>0

-----new code added on 12-Feb-2021
IF OBJECT_ID('TEMPDB..#TEMPTABLEMINOVERDUEDTecbf') IS NOT NULL
    DROP TABLE #TEMPTABLEMINOVERDUEDTecbf

SELECT CUSTOMERACID,PRO.GETMINIMUMDATE(PrincOverdueSinceDt,IntOverdueSinceDt,NULL) AS MINOVERDUE 
INTO #TEMPTABLEMINOVERDUEDTecbf
FROM PRO.ACCOUNTCAL  
where SourceAlt_Key = 6


UPDATE PRO.ACCOUNTCAL SET OVERDUESINCEDT=B.MINOVERDUE
FROM  PRO.ACCOUNTCAL A 
INNER JOIN #TEMPTABLEMINOVERDUEDTecbf B ON A.CUSTOMERACID=B.CUSTOMERACID 
-------------------new code added on 12-Feb-2021

UPDATE A SET A.PRODUCTALT_KEY=C.PRODUCTALT_KEY
--FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON
--A.CUSTOMERACID=B.ACCOUNTID
--INNER JOIN DIMPRODUCT C ON C.PRODUCTCODE=B.PRODUCTCODE
-- AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY >=@TIMEKEY)
--  INNER JOIN DIMSOURCEDB D ON D.SOURCEALT_KEY=A.SOURCEALT_KEY
--  AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
--AND B.SOURCESYSTEMNAME='EIFS'

FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON
A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMPRODUCT C ON C.PRODUCTCODE=B.PRODUCTCODE
 AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY >=@TIMEKEY) and  c.SrcSysProductName='EIFS'
  INNER JOIN DIMSOURCEDB D ON D.SOURCENAME=B.SOURCESYSTEMNAME
   AND B.SOURCESYSTEMNAME='EIFS'
   INNER JOIN DIMSOURCEDB E ON E.SOURCEALT_KEY=A.SOURCEALT_KEY AND A.SOURCEALT_KEY=6
  AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY) 



UPDATE A SET  
			A.PRODUCTCODE  = B.PRODUCTCODE
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND B.SOURCESYSTEMNAME='FCR' AND C.SourceName='EIFS' --added on 16AUG





UPDATE A SET A.PRODUCTALT_KEY=C.PRODUCTALT_KEY
--select a.CustomerAcID,a.ProductCode, A.PRODUCTALT_KEY,C.PRODUCTALT_KEY,c.ProductCode 
FROM PRO.ACCOUNTCAL A
INNER JOIN DIMPRODUCT C ON C.PRODUCTCODE=A.PRODUCTCODE
 AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY >=@TIMEKEY) and c.SrcSysProductName='FCR'
INNER JOIN DIMSOURCEDB E ON E.SOURCEALT_KEY=A.SOURCEALT_KEY AND A.SOURCEALT_KEY=6






UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE EIFS DATA ONLY'





/*------------------UPDATE ECFS DATA ONLY------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE ECFS DATA ONLY','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

--UPDATE A SET              A.CURRENTLIMIT=ISNULL(B.CURRENTLIMIT,0.00)
--                         ,A.DRAWINGPOWER=ISNULL(B.DRAWINGPOWER,0.00)
--			 ,A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
--			 ,A.REFCUSTOMERID=B.FCR_CUSTOMERID
--			 ,A.ACOPENDT=B.ACCOUNTOPENDATE
--			 ,A.CURRENTLIMITDT=B.CURRENTLIMITDATE
--			 ,A.BALANCE=CASE WHEN B.SOURCESYSTEMNAME ='FCR' THEN ISNULL(B.TOTALBALANCEOUTSTANDINGINR,0.00) * -1 ELSE ISNULL(B.TOTALBALANCEOUTSTANDINGINR,0.00) END 
--			 ,A.BALANCEINCRNCY=ISNULL(B.BALANCEINCURRENCY,0.00)
--			 ,A.BRANCHCODE=B.ACCOUNTBRANCHCODE
--			 ,A.ACTSEGMENTCODE=B.ACCOUNTSEGMENTCODE
--			 ,A.LINECODE=(CASE WHEN SOURCENAME IN ('FCC','FCR')  THEN    B.FACILITYCODELINECODE  ELSE NULL END)
--			 ,A.CONTIEXCESSDT=CASE WHEN C.SOURCENAME ='FCR' THEN  B.CONTINUOUSEXCESSSINCEDATE ELSE NULL END 
--                        ,A.LASTCRDATE =B.LASTCREDITDATE
--			,A.STOCKSTDT  =B.STOCKSTATEMENTDATE
--			,A.INTTRATE=ISNULL(B.INTERESTRATE,0.00)
--			,A.FIRSTDTOFDISB=B.FIRSTDTOFDISB
--			,A.DEBITSINCEDT=CASE WHEN C.SOURCENAME ='FCR' THEN B.SBACAATODDATE ELSE NULL END 
--			,A.DISBAMOUNT            = ISNULL(B.DISBAMOUNT,0.00)
--			,A.PRINCOUTSTD           = ISNULL(B.PRINCIPALOUTSTANDING  ,0.00)  
--			,A.PRINCOVERDUE          = ISNULL(B.PRINCIPALOVERDUE,0.00)
--			,A.PRINCOVERDUESINCEDT   = B.PRINCIPALOVERDUESINCEDATE
--			,A.DPD_PRINCOVERDUE      = ISNULL(B.PRINCIPALOVERDUEDPD,0)
--			,A.INTOVERDUE            = ISNULL(B.INTERESTOVERDUE ,0.00)
--			,A.INTOVERDUESINCEDT     = B.INTERESTOVERDUESINCEDATE
--			,A.DPD_INTOVERDUESINCE   = ISNULL(B.INTERESTOVERDUESINCEDPD,0)
--			,A.OTHEROVERDUE          = ISNULL(B.OTHEROVERDUE,0.00)
--			,A.OTHEROVERDUESINCEDT   = B.OTHEROVERDUESINCEDATE
--			,A.DPD_OTHEROVERDUESINCE = ISNULL(B.OTHEROVERDUESINCEDPD,0)
--			,A.OVERDUEAMT            = (CASE WHEN C.SOURCENAME ='FCC' THEN  (ISNULL(B.PRINCIPALOVERDUE,0.00)+ISNULL(B.INTERESTOVERDUE,0.00)+ISNULL(B.OTHEROVERDUE,0.00))
--			                                ELSE  ISNULL(B.TOTALOVERDUEAMOUNT,0.00) END)
--			,A.OVERDUESINCEDT        =  B.OVERDUESINCEDATE 
--			,A.GOVTGTYAMT            =  ISNULL(B.[GOVERNMENTGUARANTEEAMOUNT ],0.00)
--			,A.WRITEOFFAMOUNT        = ISNULL(B.WRITEOFFAMOUNT,0.00)
--			,A.UNADJSUBSIDY          =  ISNULL(B.UNADJUSTSUBSIDY,0.00)
--			,A.RELATIONSHIPNUMBER	 = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.RELATIONSHIPNUMBER  ELSE NULL END)
--                        ,A.ACCOUNTFLAG           = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTFLAG		 ELSE NULL END)
--			,A.LIABILITY	         = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.LIABILITY			 ELSE NULL END)
--			,A.CD                    = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.CD                	 ELSE NULL END)
--			,A.ACCOUNTSTATUS	     = (CASE WHEN SOURCENAME in ('VISIONPLUS','FCC','FCR')  THEN    B.ACCOUNTSTATUS		 ELSE NULL END)
--			,A.ACCOUNTBLKCODE1       = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTBLKCODE1	 ELSE NULL END)
--			,A.ACCOUNTBLKCODE2       = (CASE WHEN SOURCENAME='VISIONPLUS'  THEN    B.ACCOUNTBLKCODE2	 ELSE NULL END)
--			,A.BANKASSETCLASS=B.ASSETCLASS
--			,A.PRODUCTCODE          = B.PRODUCTCODE
			  
--FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B
--ON A.CUSTOMERACID=B.ACCOUNTID
--INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
--AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
--AND B.SOURCESYSTEMNAME='ECF


UPDATE A SET   
                      A.CURRENTLIMIT=ISNULL(B.CURRENTLIMIT,0.00)
                       ,A.DRAWINGPOWER=ISNULL(B.DRAWINGPOWER,0.00)
			 ,A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
			 ,A.REFCUSTOMERID=B.FCR_CUSTOMERID
			 ,A.ACOPENDT=B.ACCOUNTOPENDATE
			 ,A.CURRENTLIMITDT=B.CURRENTLIMITDATE
			 ,A.BRANCHCODE=B.ACCOUNTBRANCHCODE
			 ,A.ACTSEGMENTCODE=B.ACCOUNTSEGMENTCODE
			 ,A.LINECODE=(CASE WHEN SOURCENAME IN ('FCC','FCR')  THEN    B.FACILITYCODELINECODE  ELSE NULL END)
			,A.STOCKSTDT  =B.STOCKSTATEMENTDATE
			,A.INTTRATE=ISNULL(B.INTERESTRATE,0.00)
			,A.FIRSTDTOFDISB=B.FIRSTDTOFDISB
			,A.DEBITSINCEDT=CASE WHEN C.SOURCENAME ='FCR' THEN B.SBACAATODDATE ELSE NULL END 
			,A.DISBAMOUNT            = ISNULL(B.DISBAMOUNT,0.00)
			,A.BANKASSETCLASS=B.ASSETCLASS
			,A.PRODUCTCODE          = B.PRODUCTCODE
			  
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND B.SOURCESYSTEMNAME='FCR' AND C.SourceName='ECFS'

UPDATE A SET   
                      A.CURRENTLIMIT=ISNULL(B.CURRENTLIMIT,0.00)
                       ,A.DRAWINGPOWER=ISNULL(B.DRAWINGPOWER,0.00)
			 ,A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
			 ,A.REFCUSTOMERID=B.FCR_CUSTOMERID
			 ,A.ACOPENDT=B.ACCOUNTOPENDATE
			 ,A.CURRENTLIMITDT=B.CURRENTLIMITDATE
			 ,A.BRANCHCODE=B.ACCOUNTBRANCHCODE
			 ,A.ACTSEGMENTCODE=B.ACCOUNTSEGMENTCODE
			 ,A.LINECODE=(CASE WHEN SOURCENAME IN ('FCC','FCR')  THEN    B.FACILITYCODELINECODE  ELSE NULL END)
			,A.STOCKSTDT  =B.STOCKSTATEMENTDATE
			,A.INTTRATE=ISNULL(B.INTERESTRATE,0.00)
			,A.FIRSTDTOFDISB=B.FIRSTDTOFDISB
			,A.DEBITSINCEDT=CASE WHEN C.SOURCENAME ='FCR' THEN B.SBACAATODDATE ELSE NULL END 
			,A.DISBAMOUNT            = ISNULL(B.DISBAMOUNT,0.00)
			,A.BANKASSETCLASS=B.ASSETCLASS
			,A.PRODUCTCODE          = B.PRODUCTCODE
			  
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B
ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND B.SOURCESYSTEMNAME='FCR' AND C.SourceName='SFIN'


IF OBJECT_ID('TEMPDB..#tempECFSDetailData') is not  null 
   DROP TABLE #tempECFSDetailData

select 
AccountEntityId
,ECFSCUSTOMERACID
,sum(isnull(ECFSPRINCOUTSTD,0)) as PRINCOUTSTD
,sum(isnull(ECFSOVERDUEAMT,0)) as OVERDUEAMT
,sum(isnull(ECFSPRINCOVERDUE,0)) as PRINCOVERDUE
,sum(isnull(ECFSINTOVERDUE,0)) as INTOVERDUE
,sum(isnull(ECFSOTHEROVERDUE,0)) as OTHEROVERDUE
,MIN(ECFSOVERDUESINCEDT) AS  OVERDUESINCEDT
,MIN(ECFSPRINCOVERDUESINCEDT) AS PRINCOVERDUESINCEDT
,MIN(ECFSINTOVERDUESINCEDT) AS INTOVERDUESINCEDT
Into #tempECFSDetailData
from YBL_ACS.CURDAT.AdvFacECFSDetail
where EffectiveFromTimeKey=@TIMEKEY 
group by ECFSCUSTOMERACID,AccountEntityId
order by ECFSCUSTOMERACID,AccountEntityId


UPDATE A SET PRINCOUTSTD=B.PRINCOUTSTD
,OVERDUEAMT=B.OVERDUEAMT
,PRINCOVERDUE=B.PRINCOVERDUE
,INTOVERDUE=B.INTOVERDUE
,OTHEROVERDUE=B.OTHEROVERDUE
,OVERDUESINCEDT=B.OVERDUESINCEDT
,PRINCOVERDUESINCEDT=B.PRINCOVERDUESINCEDT
,INTOVERDUESINCEDT=B.INTOVERDUESINCEDT
from PRO.AccountCal A
INNER JOIN #tempECFSDetailData B
ON A.AccountEntityID=B.AccountEntityID

IF OBJECT_ID('TEMPDB..#tempSMARTFinDetailData') is not  null 
   DROP TABLE #tempSMARTFinDetailData

select 
AccountEntityId
,ECFSCUSTOMERACID
,sum(isnull(ECFSPRINCOUTSTD,0)) as PRINCOUTSTD
,sum(isnull(ECFSOVERDUEAMT,0)) as OVERDUEAMT
,sum(isnull(ECFSPRINCOVERDUE,0)) as PRINCOVERDUE
,sum(isnull(ECFSINTOVERDUE,0)) as INTOVERDUE
,sum(isnull(ECFSOTHEROVERDUE,0)) as OTHEROVERDUE
,MIN(ECFSOVERDUESINCEDT) AS  OVERDUESINCEDT
,MIN(ECFSPRINCOVERDUESINCEDT) AS PRINCOVERDUESINCEDT
,MIN(ECFSINTOVERDUESINCEDT) AS INTOVERDUESINCEDT
Into #tempSMARTFinDetailData
from YBL_ACS.CURDAT.AdvFacSmartFinDetail
where EffectiveFromTimeKey=@TIMEKEY 
group by ECFSCUSTOMERACID,AccountEntityId
order by ECFSCUSTOMERACID,AccountEntityId


UPDATE A SET PRINCOUTSTD=B.PRINCOUTSTD
,OVERDUEAMT=B.OVERDUEAMT
,PRINCOVERDUE=B.PRINCOVERDUE
,INTOVERDUE=B.INTOVERDUE
,OTHEROVERDUE=B.OTHEROVERDUE
,OVERDUESINCEDT=B.OVERDUESINCEDT
,PRINCOVERDUESINCEDT=B.PRINCOVERDUESINCEDT
,INTOVERDUESINCEDT=B.INTOVERDUESINCEDT
from PRO.AccountCal A
INNER JOIN #tempSMARTFinDetailData B
ON A.AccountEntityID=B.AccountEntityID


--UPDATE A SET A.PRODUCTALT_KEY=C.PRODUCTALT_KEY
--FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON
--A.CUSTOMERACID=B.ContractRefNo
--INNER JOIN DIMPRODUCT C ON C.PRODUCTCODE=B.PRODUCTCODE
 --AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY >=@TIMEKEY)
  --INNER JOIN DIMSOURCEDB D ON D.SOURCENAME=B.SOURCESYSTEMNAME
  -- AND B.SOURCESYSTEMNAME='ECFS'
   --INNER JOIN DIMSOURCEDB E ON E.SOURCEALT_KEY=A.SOURCEALT_KEY AND A.SOURCEALT_KEY=9
  --AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
  
  
  
  
  UPDATE A SET A.PRODUCTALT_KEY=C.PRODUCTALT_KEY
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON
A.CUSTOMERACID=B.accountID
INNER JOIN DIMPRODUCT C ON C.PRODUCTCODE=B.PRODUCTCODE
 AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY >=@TIMEKEY)
  INNER JOIN DIMSOURCEDB D ON D.SOURCENAME=B.SOURCESYSTEMNAME
   AND B.SOURCESYSTEMNAME='FCR'
   INNER JOIN DIMSOURCEDB E ON E.SOURCEALT_KEY=A.SOURCEALT_KEY AND A.SOURCEALT_KEY=9
  AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
  
  
  UPDATE A SET A.PRODUCTALT_KEY=C.PRODUCTALT_KEY
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON
A.CUSTOMERACID=B.accountID
INNER JOIN DIMPRODUCT C ON C.PRODUCTCODE=B.PRODUCTCODE
 AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY >=@TIMEKEY)
  INNER JOIN DIMSOURCEDB D ON D.SOURCENAME=B.SOURCESYSTEMNAME
   AND B.SOURCESYSTEMNAME='FCR'
   INNER JOIN DIMSOURCEDB E ON E.SOURCEALT_KEY=A.SOURCEALT_KEY AND A.SOURCEALT_KEY=12
  AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)


  ---commented on 08-05-2019-------
UPDATE A SET  ASSET_NORM='NORMAL' FROM PRO.ACCOUNTCAL A   WHERE  A.LINECODE IS  NULL --A.ASSET_NORM='ALWYS_STD' 
UPDATE A SET A.ASSET_NORM=B.ASSETNORM
FROM PRO.ACCOUNTCAL A INNER JOIN DIMPRODUCT B ON A.PRODUCTALT_KEY=B.PRODUCTALT_KEY
AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.ASSETNORM='ALWYS_STD' 
 


--UPDATE A SET A.ASSET_NORM ='ALWYS_STD'
--FROM PRO.ACCOUNTCAL  A INNER JOIN YBL_ACS_MIS..ODS_FCR_CH_OD_LIMIT B
 --ON A.CustomerAcID=B.Cod_acct_no  WHERE B.flg_internal_fd='Y'


 UPDATE A SET A.ASSET_NORM ='CONDI_STD',DEG_RELAX_MSME='Y'
FROM PRO.ACCOUNTCAL  A INNER JOIN YBL_ACS_MIS..ODS_FCR_CH_OD_LIMIT B
ON A.CustomerAcID=B.Cod_acct_no  WHERE B.flg_internal_fd='Y'


IF OBJECT_ID('TEMPDB..#TEMPTPAccount') IS NOT NULL
DROP TABLE #TEMPTPAccount

select distinct CustomerAcID
into #TEMPTPAccount
from CURDAT.AdvSecurityDetailAccountLevel 
where EffectiveFromTimeKey<=@TIMEKEY and EffectiveToTimeKey>=@TIMEKEY
and CREATEDBY='TP'


UPDATE A SET A.ASSET_NORM ='CONDI_STD'
FROM PRO.ACCOUNTCAL  A INNER JOIN #TEMPTPAccount B
ON A.CustomerAcID=B.CustomerAcID 
 

 
 /******for flg_internal_fd='Y'****compare the balance and security value which are available at Accountlevel*****if balance<=security value then mark those accounts as 'ALWYS_STD'**************************************************/
  IF OBJECT_ID('tempdb..##AdvSecurityDetailAccountLevel') IS NOT NULL
    DROP TABLE ##AdvSecurityDetailAccountLevel
 
 SELECT CustomerAcID,sum(CurrentValue)CurrentValue 
 INTO ##AdvSecurityDetailAccountLevel 
 FROM CURDAT.AdvSecurityDetailAccountLevel a
where A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY
GROUP BY CustomerAcID 
 
 UPDATE A SET A.ASSET_NORM ='ALWYS_STD' 
  FROM   PRO.ACCOUNTCAL   A  
 INNER JOIN  ##AdvSecurityDetailAccountLevel B 
ON  A.CustomerAcID=b.CustomerAcID
INNER JOIN YBL_ACS_MIS..ODS_FCR_CH_OD_LIMIT c  ON A.CustomerAcID=C.Cod_acct_no
  where  a.Balance<=b.CurrentValue


UPDATE B SET Asset_Norm='ALWYS_STD'
 FROM ##AdvSecurityDetailAccountLevel A
INNER JOIN PRO.AccountCal B
ON A.CUSTOMERACID=B.CUSTOMERACID
INNER JOIN #TEMPTPAccount c  ON A.CustomerAcID=c.CUSTOMERACID
WHERE ISNULL(CurrentValue,0)>=ISNULL(B.Balance,0)
and ISNULL(B.Balance,0)<>0

UPDATE B SET Asset_Norm='ALWYS_STD'
 FROM ##AdvSecurityDetailAccountLevel A
INNER JOIN PRO.AccountCal B
ON A.CUSTOMERACID=B.CUSTOMERACID
INNER JOIN #TEMPTPAccount C ON A.CustomerAcID=C.CUSTOMERACID 
WHERE ISNULL(CurrentValue,0)>0
and ISNULL(B.Balance,0)=0




UPDATE B SET SecurityValue=ISNULL(A.CurrentValue,0),SecApp='S'
 FROM ##AdvSecurityDetailAccountLevel A
INNER JOIN PRO.AccountCal B
ON A.CUSTOMERACID=B.CUSTOMERACID
INNER JOIN YBL_ACS_MIS..ODS_FCR_CH_OD_LIMIT c  ON A.CustomerAcID=C.Cod_acct_no
WHERE ISNULL(B.SecurityValue,0)=0


UPDATE B SET SecurityValue=ISNULL(A.CurrentValue,0),SecApp='S'
 FROM ##AdvSecurityDetailAccountLevel A
INNER JOIN PRO.AccountCal B
ON A.CUSTOMERACID=B.CUSTOMERACID
INNER JOIN #TEMPTPAccount C  ON A.CustomerAcID=C.CUSTOMERACID
 

 UPDATE A SET A.FINALASSETCLASSALT_KEY=1,FINALNPADT=NULL
FROM PRO.ACCOUNTCAL  A
WHERE ASSET_NORM='ALWYS_STD'

UPDATE A SET A.SYSASSETCLASSALT_KEY=1,SYSNPA_DT=NULL,DBTDT=NULL,DBTDT2=NULL,DBTDT3=NULL
FROM PRO.CUSTOMERCAL  A
WHERE ASSET_NORM='ALWYS_STD'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE ECFS DATA ONLY'

/*------------------UPDATE DEBITSINCEDT NULL WHERE PRODUCT NOT IN SAVING  IN PRO.ACCOUNTCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE DEBITSINCEDT NULL WHERE PRODUCT NOT IN SAVING IN PRO.ACCOUNTCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET DEBITSINCEDT =NULL  FROM PRO.ACCOUNTCAL A INNER JOIN DIMPRODUCT B ON A.PRODUCTALT_KEY=B.PRODUCTALT_KEY
AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE DEBITSINCEDT IS NOT NULL AND ISNULL(SRCSYSPRODUCTCODE,'N')<>'SAVING'

UPDATE A SET CONTIEXCESSDT =NULL  FROM PRO.ACCOUNTCAL A INNER JOIN DIMPRODUCT B ON A.PRODUCTALT_KEY=B.PRODUCTALT_KEY
AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE CONTIEXCESSDT IS NOT NULL AND ISNULL(SRCSYSPRODUCTCODE,'N')='SAVING'


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE DEBITSINCEDT NULL WHERE PRODUCT NOT IN SAVING IN PRO.ACCOUNTCAL'


/*------------------UPDATE FACILITY TYPE IN ACCOUNT CAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE FACILITY TYPE IN ACCOUNT CAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.FACILITYTYPE =(CASE WHEN B.SOURCENAME='MUREX' THEN 'INV'
                                  WHEN B.SOURCENAME='FINNONE' THEN 'TL'
								  WHEN B.SOURCENAME='VISIONPLUS' THEN 'CC'
								  WHEN B.SOURCENAME IN('EIFS','ECBF','GANASEVA','GOLD','ECFS','CREDAVENUE_DA') THEN 'TL'
								  WHEN B.SOURCENAME IN('SFIN') THEN 'TL' -- FOR SFIN AccountData_FinSmart 15102023
								  ELSE NULL END) 
FROM  PRO.ACCOUNTCAL A  INNER JOIN  DIMSOURCEDB B ON A.SOURCEALT_KEY=B.SOURCEALT_KEY
AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)

UPDATE A SET A.FACILITYTYPE=B.FACILITYTYPE
FROM PRO.ACCOUNTCAL A INNER JOIN DIMPRODUCT  B ON A.PRODUCTALT_KEY=B.PRODUCTALT_KEY
AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE A.FACILITYTYPE IS NULL

----Condition comment only Cred Avenue Integration 09/03/2022
----UPDATE A SET FacilityType='NF'--Added 24/01/2022 Facility Typefor Non Funded Accounts
----FROM  PRO.ACCOUNTCAL A INNER JOIN #TEMPTABLE_NF_DETAIL B ON A.CUSTOMERACID=B.REFSYSTEMACID

----UPDATE A SET A.REFCUSTOMERID=c.REFCUSTOMERID
----,A.SOURCESYSTEMCUSTOMERID=c.SOURCESYSTEMCUSTOMERID
----,A.CUSTOMERENTITYID=C.CUSTOMERENTITYID
----,A.UCIF_ID=C.UCIF_ID
----,A.UCIFENTITYID=C.UCIFENTITYID
----,FacilityType='NF'
----FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS.[dbo].[AccountData_NF] B 
----ON A.CUSTOMERACID=B.accountid
----INNER JOIN PRO.CUSTOMERCAL  C ON C.SOURCESYSTEMCUSTOMERID=B.SourceSystemCustomerID


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE FACILITY TYPE IN ACCOUNT CAL'


------------------Temperory MOC Related Changes------------------24052019
--- AS per New Requirement DBT Date Added 27072022 Triloki Khanna----
UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=B.NPADATE,A.FLGMOC='Y',A.ASSET_NORM='ALWYS_NPA',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED,A.MOCTYPE=B.MOCTYPE,A.DbtDt=B.DbtDt
       FROM PRO.CUSTOMERCAL A
 INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.REFCUSTOMERID=B.CUSTOMERID
     INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
             DA.ASSETCLASSSHORTNAME<>'STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999

UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=B.NPADATE,A.FLGMOC='Y',A.ASSET_NORM='NORMAL',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED,A.MOCTYPE=B.MOCTYPE,A.DbtDt=B.DbtDt
FROM PRO.CUSTOMERCAL A
INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.REFCUSTOMERID=B.CUSTOMERID
    INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
                           DA.ASSETCLASSSHORTNAME<>'STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY


UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=NULL,A.DBTDT =NULL,A.FLGMOC='Y',A.ASSET_NORM='ALWYS_STD',A.MOCREASON=B.MOCREASON,DEGREASON='STD DUE TO MOC',A.MOC_DT=B.DATECREATED,A.MOCTYPE=B.MOCTYPE
 FROM PRO.CUSTOMERCAL A
INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.REFCUSTOMERID=B.CUSTOMERID
  INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
                           DA.ASSETCLASSSHORTNAME='STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999

UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=NULL,A.DBTDT =NULL,A.FLGMOC='Y',A.ASSET_NORM='NORMAL',A.MOCREASON=B.MOCREASON,DEGREASON='STD DUE TO MOC',A.MOC_DT=B.DATECREATED,A.MOCTYPE=B.MOCTYPE
 FROM PRO.CUSTOMERCAL A
INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.REFCUSTOMERID=B.CUSTOMERID
 INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
                           DA.ASSETCLASSSHORTNAME='STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY

---FD Always STD is not Overrides changed by Pankaj
IF OBJECT_ID('TEMPDB..#ManualNPAMOC') IS NOT NULL
  DROP TABLE #ManualNPAMOC

select a.customeracid ,DA.ASSETCLASSALT_KEY,b.NPADATE,B.MOCREASON,B.DATECREATED,
B.ASSETCLASSIFICATION ,B.MOCTYPE,B.EFFECTIVETOTIMEKEY
into #ManualNPAMOC FROM PRO.ACCOUNTCAL A
 INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.REFCUSTOMERID=B.CUSTOMERID
     INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
                           DA.ASSETCLASSSHORTNAME<>'STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999 and A.ASSET_NORM  <> 'ALWYS_STD'


--UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=B.NPADATE,A.FlgMoc='Y',A.ASSET_NORM='ALWYS_NPA',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED
--       FROM PRO.ACCOUNTCAL A
-- INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.REFCUSTOMERID=B.CUSTOMERID
--     INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
--                           DA.ASSETCLASSSHORTNAME<>'STD' AND  
--                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
--                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
--WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999 and A.ASSET_NORM  <> 'ALWYS_STD'  ---FD Always STD is not Overrides changed by Pankaj


UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=B.NPADATE,A.FlgMoc='Y',A.ASSET_NORM='ALWYS_NPA',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED
       FROM PRO.ACCOUNTCAL A
 INNER JOIN #ManualNPAMOC B ON A.CustomerAcID=B.customeracid
     INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
                           DA.ASSETCLASSSHORTNAME<>'STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999 and A.ASSET_NORM  <> 'ALWYS_STD'  ---FD Always STD is not Overrides changed by Pankaj


---FD Always STD is not Overrides changed by Pankaj

IF OBJECT_ID('TEMPDB..#AutoNPAMOC') IS NOT NULL
  DROP TABLE #AutoNPAMOC

select a.customeracid ,DA.ASSETCLASSALT_KEY,b.NPADATE,B.MOCREASON,B.DATECREATED,
B.ASSETCLASSIFICATION ,B.MOCTYPE,B.EFFECTIVEFROMTIMEKEY,B.EFFECTIVETOTIMEKEY
into #AutoNPAMOC FROM PRO.ACCOUNTCAL A
INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.REFCUSTOMERID=B.CUSTOMERID
    INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
           DA.ASSETCLASSSHORTNAME<>'STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
     DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY
      and A.ASSET_NORM  <> 'ALWYS_STD'  ---FD Always STD is not Overrides changed by Pankaj


--UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=B.NPADATE,A.FLGMOC='Y',A.ASSET_NORM='NORMAL',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED
--FROM PRO.ACCOUNTCAL A
--INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.REFCUSTOMERID=B.CUSTOMERID
--    INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
--           DA.ASSETCLASSSHORTNAME<>'STD' AND  
--                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
--     DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
--WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY
--      and A.ASSET_NORM  <> 'ALWYS_STD'  ---FD Always STD is not Overrides changed by Pankaj


UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=B.NPADATE,A.FLGMOC='Y',A.ASSET_NORM='NORMAL',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED
FROM PRO.ACCOUNTCAL A
INNER JOIN #AutoNPAMOC B ON A.customeracid=B.customeracid
    INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
           DA.ASSETCLASSSHORTNAME<>'STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
     DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY
      and A.ASSET_NORM  <> 'ALWYS_STD'  ---FD Always STD is not Overrides changed by Pankaj


UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=NULL,A.FLGMOC='Y',A.ASSET_NORM='ALWYS_STD',A.MOCREASON=B.MOCREASON,DEGREASON='STD DUE TO MOC',A.MOC_DT=B.DATECREATED
 FROM PRO.ACCOUNTCAL A
INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.REFCUSTOMERID=B.CUSTOMERID
  INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
                           DA.ASSETCLASSSHORTNAME='STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999

UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=NULL,A.FLGMOC='Y',A.ASSET_NORM='NORMAL',A.MOCREASON=B.MOCREASON,DEGREASON='STD DUE TO MOC',A.MOC_DT=B.DATECREATED
 FROM PRO.ACCOUNTCAL A
INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.REFCUSTOMERID=B.CUSTOMERID
 INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
                           DA.ASSETCLASSSHORTNAME='STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY


-----UCIC LEVEL MOC 31/05/2022 Triloki Khanna-----

UPDATE A
	SET A.UcifEntityID=b.UcifEntityID
FROM dataupload.MocCustomerDataUpload A
	INNER JOIN pro.CustomerCal b
		on b.REFCUSTOMERID=a.CUSTOMERID
		and (a.EffectiveToTimeKey=49999)

UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=B.NPADATE,A.FLGMOC='Y',A.ASSET_NORM='ALWYS_NPA',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED,A.MOCTYPE=B.MOCTYPE,a.DbtDt=b.DbtDt
       FROM PRO.CUSTOMERCAL A
 INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.UcifEntityID=B.UcifEntityID
     INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
             DA.ASSETCLASSSHORTNAME<>'STD' AND  
           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999

UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=B.NPADATE,A.FLGMOC='Y',A.ASSET_NORM='NORMAL',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED,A.MOCTYPE=B.MOCTYPE,a.DbtDt=b.DbtDt
FROM PRO.CUSTOMERCAL A
INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.UcifEntityID=B.UcifEntityID
    INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
                           DA.ASSETCLASSSHORTNAME<>'STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY


UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=NULL,A.DBTDT =NULL,A.FLGMOC='Y',A.ASSET_NORM='ALWYS_STD',A.MOCREASON=B.MOCREASON,DEGREASON='STD DUE TO MOC',A.MOC_DT=B.DATECREATED,A.MOCTYPE=B.MOCTYPE
 FROM PRO.CUSTOMERCAL A
INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.UcifEntityID=B.UcifEntityID
  INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
                           DA.ASSETCLASSSHORTNAME='STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999

UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=NULL,A.DBTDT =NULL,A.FLGMOC='Y',A.ASSET_NORM='NORMAL',A.MOCREASON=B.MOCREASON,DEGREASON='STD DUE TO MOC',A.MOC_DT=B.DATECREATED,A.MOCTYPE=B.MOCTYPE
 FROM PRO.CUSTOMERCAL A
INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.UcifEntityID=B.UcifEntityID
 INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
                           DA.ASSETCLASSSHORTNAME='STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY

---FD Always STD is not Overrides changed by Pankaj
IF OBJECT_ID('TEMPDB..#MANUALNPAMOCUCIF') IS NOT NULL
  DROP TABLE #MANUALNPAMOCUCIF

select a.customeracid ,DA.ASSETCLASSALT_KEY,b.NPADATE,B.MOCREASON,B.DATECREATED,
B.ASSETCLASSIFICATION ,B.MOCTYPE,B.EFFECTIVEFROMTIMEKEY,B.EFFECTIVETOTIMEKEY
into #MANUALNPAMOCUCIF
FROM PRO.ACCOUNTCAL A
 INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.UcifEntityID=B.UcifEntityID
     INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
                           DA.ASSETCLASSSHORTNAME<>'STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999 and A.ASSET_NORM  <> 'ALWYS_STD'  ---FD Always STD is not Overrides changed by Pankaj




--UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=B.NPADATE,A.FlgMoc='Y',A.ASSET_NORM='ALWYS_NPA',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED
--       FROM PRO.ACCOUNTCAL A
-- INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.UcifEntityID=B.UcifEntityID
--     INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
--                           DA.ASSETCLASSSHORTNAME<>'STD' AND  
--                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
--                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
--WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999 and A.ASSET_NORM  <> 'ALWYS_STD'  ---FD Always STD is not Overrides changed by Pankaj


UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=B.NPADATE,A.FlgMoc='Y',A.ASSET_NORM='ALWYS_NPA',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED
       FROM PRO.ACCOUNTCAL A
 INNER JOIN #MANUALNPAMOCUCIF B ON A.CustomerAcID=B.CustomerAcID
     INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
                           DA.ASSETCLASSSHORTNAME<>'STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999 and A.ASSET_NORM  <> 'ALWYS_STD'  ---FD Always STD is not Overrides changed by Pankaj

  IF OBJECT_ID('TEMPDB..#AUTONPAMOCUCIF') IS NOT NULL
  DROP TABLE #AUTONPAMOCUCIF

select a.customeracid ,DA.ASSETCLASSALT_KEY,b.NPADATE,B.MOCREASON,B.DATECREATED,
B.ASSETCLASSIFICATION ,B.MOCTYPE,B.EFFECTIVEFROMTIMEKEY,B.EFFECTIVETOTIMEKEY
into #AUTONPAMOCUCIF
FROM PRO.ACCOUNTCAL A
INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.UcifEntityID=B.UcifEntityID
    INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
           DA.ASSETCLASSSHORTNAME<>'STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
     DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY and A.ASSET_NORM  <> 'ALWYS_STD'  ---FD Always STD is not Overrides changed by Pankaj



--UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=B.NPADATE,A.FLGMOC='Y',A.ASSET_NORM='NORMAL',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED
--FROM PRO.ACCOUNTCAL A
--INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.UcifEntityID=B.UcifEntityID
--    INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
--           DA.ASSETCLASSSHORTNAME<>'STD' AND  
--                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
--     DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
--WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY and A.ASSET_NORM  <> 'ALWYS_STD'  ---FD Always STD is not Overrides changed by Pankaj


UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=B.NPADATE,A.FLGMOC='Y',A.ASSET_NORM='NORMAL',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED
FROM PRO.ACCOUNTCAL A
INNER JOIN #AUTONPAMOCUCIF B ON A.CustomerAcID=B.CustomerAcID
    INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
           DA.ASSETCLASSSHORTNAME<>'STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
     DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY and A.ASSET_NORM  <> 'ALWYS_STD'  ---FD Always STD is not Overrides changed by Pankaj





UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=NULL,A.FLGMOC='Y',A.ASSET_NORM='ALWYS_STD',A.MOCREASON=B.MOCREASON,DEGREASON='STD DUE TO MOC',A.MOC_DT=B.DATECREATED
 FROM PRO.ACCOUNTCAL A
INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.UcifEntityID=B.UcifEntityID
  INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
                           DA.ASSETCLASSSHORTNAME='STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999

UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=NULL,A.FLGMOC='Y',A.ASSET_NORM='NORMAL',A.MOCREASON=B.MOCREASON,DEGREASON='STD DUE TO MOC',A.MOC_DT=B.DATECREATED
 FROM PRO.ACCOUNTCAL A
INNER JOIN DATAUPLOAD.MOCCUSTOMERDATAUPLOAD B ON A.UcifEntityID=B.UcifEntityID
 INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
                           DA.ASSETCLASSSHORTNAME='STD' AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY


UPDATE  A SET DBTDT=@PROCESSINGDATE FROM PRO.CUSTOMERCAL A  
INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSALT_KEY= A.SYSASSETCLASSALT_KEY AND
                           DA.ASSETCLASSSHORTNAME IN ('DB1','DB2','DB3') AND  
                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE DBTDT IS NULL

-- // Vishal Patil // Triloki Sir patch 22/06/2021 //
UPDATE DATAUPLOAD.MOCCUSTOMERDATAUPLOAD SET EFFECTIVETOTIMEKEY=EFFECTIVEFROMTIMEKEY WHERE MOCTYPE='AUTO'


----UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=B.NPADATE,A.FLGMOC='Y',A.ASSET_NORM='ALWYS_NPA',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED,A.MOCTYPE=B.MOCTYPE
----       FROM PRO.CUSTOMERCAL A
---- INNER JOIN DATAUPLOAD.MocCustomerDailyDataUpload B ON A.REFCUSTOMERID=B.CUSTOMERID
----     INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
----                           DA.ASSETCLASSSHORTNAME<>'STD' AND  
----                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
----           DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
----WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999

----UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=B.NPADATE,A.FLGMOC='Y',A.ASSET_NORM='NORMAL',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED,A.MOCTYPE=B.MOCTYPE
----FROM PRO.CUSTOMERCAL A
----INNER JOIN DATAUPLOAD.MocCustomerDailyDataUpload B ON A.REFCUSTOMERID=B.CUSTOMERID
----    INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
----                           DA.ASSETCLASSSHORTNAME<>'STD' AND  
----                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
----                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
----WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY


----UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=NULL,A.DBTDT =NULL,A.FLGMOC='Y',A.ASSET_NORM='ALWYS_STD',A.MOCREASON=B.MOCREASON,DEGREASON='STD DUE TO MOC',A.MOC_DT=B.DATECREATED,A.MOCTYPE=B.MOCTYPE
---- FROM PRO.CUSTOMERCAL A
----INNER JOIN DATAUPLOAD.MocCustomerDailyDataUpload B ON A.REFCUSTOMERID=B.CUSTOMERID
----  INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
----                           DA.ASSETCLASSSHORTNAME='STD' AND  
----                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
----                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
----WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999

----UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=NULL,A.DBTDT =NULL,A.FLGMOC='Y',A.ASSET_NORM='NORMAL',A.MOCREASON=B.MOCREASON,DEGREASON='STD DUE TO MOC',A.MOC_DT=B.DATECREATED,A.MOCTYPE=B.MOCTYPE
---- FROM PRO.CUSTOMERCAL A
----INNER JOIN DATAUPLOAD.MocCustomerDailyDataUpload B ON A.REFCUSTOMERID=B.CUSTOMERID
---- INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
----                           DA.ASSETCLASSSHORTNAME='STD' AND  
----                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
----                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
----WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY


----UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=B.NPADATE,A.FlgMoc='Y',A.ASSET_NORM='ALWYS_NPA',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED
----       FROM PRO.ACCOUNTCAL A
---- INNER JOIN DATAUPLOAD.MocCustomerDailyDataUpload B ON A.REFCUSTOMERID=B.CUSTOMERID
----     INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
----                           DA.ASSETCLASSSHORTNAME<>'STD' AND  
----                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
----                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
----WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999

----UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=B.NPADATE,A.FLGMOC='Y',A.ASSET_NORM='NORMAL',A.MOCREASON=B.MOCREASON,DEGREASON='NPA DUE TO MOC',A.MOC_DT=B.DATECREATED
----FROM PRO.ACCOUNTCAL A
----INNER JOIN DATAUPLOAD.MocCustomerDailyDataUpload B ON A.REFCUSTOMERID=B.CUSTOMERID
----    INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
----                           DA.ASSETCLASSSHORTNAME<>'STD' AND  
----                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
----                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
----WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY


----UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=NULL,A.FLGMOC='Y',A.ASSET_NORM='ALWYS_STD',A.MOCREASON=B.MOCREASON,DEGREASON='STD DUE TO MOC',A.MOC_DT=B.DATECREATED
---- FROM PRO.ACCOUNTCAL A
----INNER JOIN DATAUPLOAD.MocCustomerDailyDataUpload B ON A.REFCUSTOMERID=B.CUSTOMERID
----  INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
----                           DA.ASSETCLASSSHORTNAME='STD' AND  
----                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
----                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
----WHERE B.MOCTYPE='MANUAL' AND B.EFFECTIVETOTIMEKEY=49999

----UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=NULL,A.FLGMOC='Y',A.ASSET_NORM='NORMAL',A.MOCREASON=B.MOCREASON,DEGREASON='STD DUE TO MOC',A.MOC_DT=B.DATECREATED
---- FROM PRO.ACCOUNTCAL A
----INNER JOIN DATAUPLOAD.MocCustomerDailyDataUpload B ON A.REFCUSTOMERID=B.CUSTOMERID
---- INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSSHORTNAME= B.ASSETCLASSIFICATION AND
----                           DA.ASSETCLASSSHORTNAME='STD' AND  
----                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
----                   DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
----WHERE B.MOCTYPE='AUTO' AND  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY



----UPDATE  A SET DBTDT=@PROCESSINGDATE FROM PRO.CUSTOMERCAL A  
----INNER JOIN DIMASSETCLASS DA       ON  DA.ASSETCLASSALT_KEY= A.SYSASSETCLASSALT_KEY AND
----                           DA.ASSETCLASSSHORTNAME IN ('DB1','DB2','DB3') AND  
----                           DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
----               DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
----WHERE DBTDT IS NULL

-- // Vishal Patil // Triloki Sir patch 22/06/2021 //
UPDATE DATAUPLOAD.MocCustomerDailyDataUpload SET EFFECTIVETOTIMEKEY=EFFECTIVEFROMTIMEKEY WHERE MOCTYPE='AUTO'

------------------Temperory MOC Related Changes------------------24052019


/*------------------PERCOLATION BY UCIFID------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'PERCOLATION BY UCIFID','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

---TOMMOROW-----
IF OBJECT_ID('TEMPDB..#TEMPTABLE_UCFIC1') IS NOT NULL
    DROP TABLE #TEMPTABLE_UCFIC1

	--SELECT UCIF_ID,MAX(ISNULL(SYSASSETCLASSALT_KEY,1)) SYSASSETCLASSALT_KEY
	--,MIN(SYSNPA_DT) SYSNPA_DT ,B.SOURCEDBNAME,A.UCIFENTITYID
	-- INTO #TEMPTABLE_UCFIC1 FROM PRO.CUSTOMERCAL A
	-- INNER JOIN DIMSOURCEDB  B ON B.SOURCEALT_KEY=A.SOURCEALT_KEY AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY 
	-- WHERE ( UCIF_ID IS NOT NULL AND UCIF_ID<>'0' ) AND  ISNULL(SYSASSETCLASSALT_KEY,1)<>1
	--GROUP BY  UCIF_ID,B.SOURCEDBNAME,A.UCIFENTITYID

	SELECT UCIF_ID,MAX(ISNULL(SYSASSETCLASSALT_KEY,1)) SYSASSETCLASSALT_KEY
	,MIN(SYSNPA_DT) SYSNPA_DT ,A.UCIFENTITYID
	 INTO #TEMPTABLE_UCFIC1 FROM PRO.CUSTOMERCAL A
	  WHERE ( UCIF_ID IS NOT NULL AND UCIF_ID<>'0' ) AND  ISNULL(SYSASSETCLASSALT_KEY,1)<>1
	GROUP BY  UCIF_ID,A.UCIFENTITYID

	ALTER TABLE  #TEMPTABLE_UCFIC1 ADD SOURCEDBNAME VARCHAR (20)
		
	UPDATE A SET SOURCEDBNAME=C.SOURCEDBNAME
	 FROM #TEMPTABLE_UCFIC1  A
	 INNER JOIN PRO.CUSTOMERCAL B ON A.UCIF_ID=B.UCIF_ID
	 INNER JOIN DIMSOURCEDB  C ON B.SOURCEALT_KEY=C.SOURCEALT_KEY  AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY 
	 WHERE A.SYSNPA_DT=B.SYSNPA_DT
	 
	UPDATE A SET A.SYSASSETCLASSALT_KEY=B.SYSASSETCLASSALT_KEY
	             ,A.SYSNPA_DT=B.SYSNPA_DT  
	 FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLE_UCFIC1 B ON A.UCIF_ID=B.UCIF_ID


	 UPDATE A SET 
	         A.FINALASSETCLASSALT_KEY=ISNULL(B.SYSASSETCLASSALT_KEY,1)
		    ,A.FINALNPADT=B.SYSNPA_DT
			FROM PRO.ACCOUNTCAL A INNER   JOIN #TEMPTABLE_UCFIC1 B 
			ON  A.UCIFENTITYID=B.UCIFENTITYID 


	 UPDATE A SET DEGREASON='PERCOLATION BY UCIFID ' + ' ' + B.SOURCEDBNAME + '  ' + B.UCIF_ID 
	 FROM PRO.ACCOUNTCAL A INNER JOIN #TEMPTABLE_UCFIC1 B ON A.UCIF_ID=B.UCIF_ID
	 WHERE A.INITIALASSETCLASSALT_KEY=1 AND A.FINALASSETCLASSALT_KEY>1
	 AND A.DEGREASON IS NULL

	  UPDATE A SET DEGREASON='PERCOLATION BY UCIFID ' + ' ' + B.SOURCEDBNAME + '  ' + B.UCIF_ID 
	 FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLE_UCFIC1 B ON A.UCIF_ID=B.UCIF_ID
	 WHERE A.SRCASSETCLASSALT_KEY=1 AND A.SYSASSETCLASSALT_KEY>1
	 AND A.DEGREASON IS NULL

	 UPDATE A SET DEGREASON=B.DEGREASON
	FROM PRO.ACCOUNTCAL A INNER JOIN PRO.CUSTOMERCAL B ON A.SOURCESYSTEMCUSTOMERID =B.SOURCESYSTEMCUSTOMERID
	WHERE (B.FLGPROCESSING='N')  AND (A.FLGDEG='N') AND B.DEGREASON IS NOT NULL AND A.FINALASSETCLASSALT_KEY>1
	 AND A.DEGREASON IS NULL

	 UPDATE A SET DEGREASON='SOURCE ' + ' ' + C.SOURCEDBNAME
	 FROM PRO.ACCOUNTCAL A INNER JOIN PRO.CUSTOMERCAL B ON A.SOURCESYSTEMCUSTOMERID =B.SOURCESYSTEMCUSTOMERID
	INNER JOIN DIMSOURCEDB  C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY  AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY
	WHERE (B.FLGPROCESSING='N')  AND (A.FLGDEG='N')  AND A.FINALASSETCLASSALT_KEY>1
	 AND A.DEGREASON IS NULL

	 UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='PERCOLATION BY UCIFID'


	 
/*------------------UPDATE OVERDUESINCEDT  THROUGH LCBGACCOUNTCAL IN PRO.ACCOUNTCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE OVERDUESINCEDT  THROUGH LCBGACCOUNTCAL IN PRO.ACCOUNTCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


----Changes logic all LCBG overdue date sholud be update from LCBG account table 12-06-2020------
--UPDATE B SET OVERDUESINCEDT=A.OVERDUESINCEDT,FLGLCBG='Y'
--FROM PRO.LCBGACCOUNTCAL A 
--INNER JOIN PRO.ACCOUNTCAL B ON 
--A.CUSTOMERACID=B.CUSTOMERACID
--WHERE A.ACCOUNTSTATUS='LIVE'
--AND FINALASSETCLASSALT_KEY=1
--AND A.OVERDUESINCEDT<>ISNULL(B.OVERDUESINCEDT,'')
----AND A.OVERDUESINCEDT<ISNULL(B.OVERDUESINCEDT,'')
--AND (A.OVERDUESINCEDT<ISNULL(B.OVERDUESINCEDT,'') OR B.OVERDUESINCEDT IS NULL)

UPDATE B SET OVERDUESINCEDT=A.OVERDUESINCEDT,FLGLCBG='Y'
FROM PRO.LCBGACCOUNTCAL A 
INNER JOIN PRO.ACCOUNTCAL B ON 
A.CUSTOMERACID=B.CUSTOMERACID
WHERE A.ACCOUNTSTATUS='LIVE'
--AND FINALASSETCLASSALT_KEY=1
--AND A.OVERDUESINCEDT<>ISNULL(B.OVERDUESINCEDT,'')
--AND A.OVERDUESINCEDT<ISNULL(B.OVERDUESINCEDT,'')
--AND (A.OVERDUESINCEDT<ISNULL(B.OVERDUESINCEDT,'') OR B.OVERDUESINCEDT IS NULL)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE OVERDUESINCEDT  THROUGH LCBGACCOUNTCAL IN PRO.ACCOUNTCAL'

     ---- UPDATE A SET SOURCEALT_KEY=2
       ----from PRO.CUSTOMERCAL A
	----  inner join YBL_ACS_MIS.[dbo].[AccountData_NF]  B
	----  on A.SourceSystemCustomerID=B.SourceSystemCustomerID
	----  where ISNULL(A.SOURCEALT_KEY,0)=0

	----  UPDATE A SET SOURCEALT_KEY=2
       ----from PRO.ACCOUNTCAL A
	----  inner join YBL_ACS_MIS.[dbo].[AccountData_NF]  B
	----  on A.CustomerAcID=B.AccountID
	 ---- where ISNULL(A.SOURCEALT_KEY,0)=0


	DELETE FROM PRO.CUSTOMERCAL  WHERE   SOURCEALT_KEY=0
	DELETE FROM PRO.ACCOUNTCAL  WHERE   SOURCEALT_KEY=0


	
/*------------------2 A.UPDATE FRAUD  MARKING IN PRO.CUSTOMERCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) SELECT ORIGINAL_LOGIN(),'UPDATE FRAUD  MARKING  IN PRO.CUSTOMERCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


UPDATE A SET A.ASSET_NORM='ALWYS_NPA'
            ,A.SPLCATG1ALT_KEY=870
			,A.SPLCATG2ALT_KEY=870
			,A.SPLCATG3ALT_KEY=870
			,A.SPLCATG4ALT_KEY=870
			,A.FRAUDDT=DATEOFFRAUD
			,A.FRAUDAMOUNT=AMOUNTOFFRAUD
			,A.SYSASSETCLASSALT_KEY=6
			,A.DEGREASON='NPA DUE TO FRAUD MARKING'
			,A.SYSNPA_DT=B.EffectiveNPADate--CONDITION ADDED 17/02/2020 TRILOKI KHANNA
FROM PRO.CUSTOMERCAL A INNER JOIN [DATAUPLOAD].[FRAUDACCOUNTSDATAUPLOAD] B 
ON A.REFCUSTOMERID=B.CUSTOMERID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE FRAUD  MARKING  IN PRO.CUSTOMERCAL'


/*------------------2.UPDATE FRAUD ACCOUNT MARKING  IN PRO.ACCOUNTCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) SELECT ORIGINAL_LOGIN(),'UPDATE FRAUD ACCOUNT MARKING  IN PRO.ACCOUNTCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.ASSET_NORM='ALWYS_NPA'
            ,A.SPLCATG1ALT_KEY=870
			,A.SPLCATG2ALT_KEY=870
			,A.SPLCATG3ALT_KEY=870
			,A.SPLCATG4ALT_KEY=870
			,A.OVERDUEAMT=B.AMOUNTOFFRAUD
			,A.FINALASSETCLASSALT_KEY=6
			,A.DEGREASON='NPA DUE TO FRAUD MARKING'
			,A.FINALNPADT=B.EffectiveNPADate--CONDITION ADDED 17/02/2020 TRILOKI KHANNA
FROM PRO.ACCOUNTCAL A INNER JOIN [DATAUPLOAD].[FRAUDACCOUNTSDATAUPLOAD] B 
ON A.REFCUSTOMERID=B.CUSTOMERID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)


IF OBJECT_ID('TEMPDB..#TempTableFRAUDData') IS NOT NULL
  DROP TABLE #TempTableFRAUDData

SELECT UCIF_ID ,SYSASSETCLASSALT_KEY,DEGREASON,SYSNPA_DT,ASSET_NORM
 into #TempTableFRAUDData FROM pro.CustomerCal
where SplCatg1Alt_Key=870 and SYSASSETCLASSALT_KEY>1 

update a set SYSASSETCLASSALT_KEY=b.SYSASSETCLASSALT_KEY,DEGREASON=b.DEGREASON,SYSNPA_DT=b.SYSNPA_DT,ASSET_NORM=b.ASSET_NORM,
a.SplCatg1Alt_Key=870,a.SplCatg2Alt_Key=870,a.SplCatg3Alt_Key=870,a.SplCatg4Alt_Key=870
 from pro.CustomerCal a
inner join #TempTableFRAUDData b
on a.UCIF_ID=b.UCIF_ID

update a set FinalAssetClassAlt_Key=b.SYSASSETCLASSALT_KEY,DEGREASON=b.DEGREASON,FinalNpaDt=b.SYSNPA_DT,ASSET_NORM=b.ASSET_NORM,
a.SplCatg1Alt_Key=870,a.SplCatg2Alt_Key=870,a.SplCatg3Alt_Key=870,a.SplCatg4Alt_Key=870
 from pro.AccountCal a
inner join #TempTableFRAUDData b
on a.UCIF_ID=b.UCIF_ID

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE FRAUD ACCOUNT MARKING  IN PRO.ACCOUNTCAL'
 


 
/*------------------2 A.UPDATE NPA DUE TO RESTRUCTURE------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) SELECT ORIGINAL_LOGIN(),'UPDATE NPA DUE TO RESTRUCTURE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


UPDATE A SET 	A.ASSET_NORM='ALWYS_NPA'
            	,A.DEGREASON=B.NPAReason
		,A.SYSASSETCLASSALT_KEY=CASE WHEN SYSASSETCLASSALT_KEY=1 THEN 2 ELSE A.SYSASSETCLASSALT_KEY END --2  If Already Npa Customer resturcture marking done than asset class change based on updated Npa date
     		,A.SYSNPA_DT=B.EffectiveNPADate
FROM PRO.CUSTOMERCAL A INNER JOIN [DATAUPLOAD].[RestructureDataUpload] B 
ON A.REFCUSTOMERID=B.CUSTOMERID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND B.EffectiveNPADate IS NOT NULL 


  IF OBJECT_ID('TEMPDB..#RestManualNPA') IS NOT NULL
  DROP TABLE #RestManualNPA 

---FD Always STD is not Overrides changed by Pankaj
select a.customeracid ,b.NPAReason,b.EffectiveNPADate,  B.EFFECTIVEFROMTIMEKEY,B.EFFECTIVETOTIMEKEY
into #RestManualNPA
FROM PRO.ACCOUNTCAL A INNER JOIN [DATAUPLOAD].[RestructureDataUpload] B 
ON A.REFCUSTOMERID=B.CUSTOMERID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND B.EffectiveNPADate IS NOT NULL And A.ASSET_NORM  <> 'ALWYS_STD'

--UPDATE A SET A.ASSET_NORM='ALWYS_NPA'
--             ,A.FINALASSETCLASSALT_KEY=CASE WHEN FinalAssetClassAlt_Key=1 THEN 2 ELSE A.FinalAssetClassAlt_Key END --2  If Already Npa Customer resturcture marking done than asset class change based on updated Npa date
--	     ,A.DEGREASON=B.NPAReason
--	    ,A.FINALNPADT=B.EffectiveNPADate
--FROM PRO.ACCOUNTCAL A INNER JOIN [DATAUPLOAD].[RestructureDataUpload] B 
--ON A.REFCUSTOMERID=B.CUSTOMERID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
--AND B.EffectiveNPADate IS NOT NULL And A.ASSET_NORM  <> 'ALWYS_STD'  ---FD Always STD is not Overrides changed by Pankaj



UPDATE A SET A.ASSET_NORM='ALWYS_NPA'
             ,A.FINALASSETCLASSALT_KEY=CASE WHEN FinalAssetClassAlt_Key=1 THEN 2 ELSE A.FinalAssetClassAlt_Key END --2  If Already Npa Customer resturcture marking done than asset class change based on updated Npa date
	     ,A.DEGREASON=B.NPAReason
	    ,A.FINALNPADT=B.EffectiveNPADate
FROM PRO.ACCOUNTCAL A INNER JOIN #RestManualNPA B 
ON A.CustomerAcID=B.CustomerAcID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND B.EffectiveNPADate IS NOT NULL And A.ASSET_NORM  <> 'ALWYS_STD'  ---FD Always STD is not Overrides changed by Pankaj

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE NPA DUE TO RESTRUCTURE'
 

 ---New Condition Added as Per bank BRD 01/09/2022 Modification done by Triloki Khanna 07/09/2022
/*------------------2 A.UPDATE ALWYS_NPA DUE TO RESTRUCTURE------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) SELECT ORIGINAL_LOGIN(),'UPDATE ALWYS_NPA DUE TO RESTRUCTURE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.ASSET_NORM='ALWYS_NPA'
             ,A.DEGREASON='ALWYS_NPA DUE TO RESTRUCTURE'
			 ,A.NPA_Reason='ALWYS_NPA DUE TO RESTRUCTURE'
			 ,A.FlgRestructure='Y'
			 ,A.FinalAssetClassAlt_Key=CASE WHEN FinalAssetClassAlt_Key=1 THEN 2 ELSE A.FinalAssetClassAlt_Key END
			 ,A.FinalNpaDt=CASE WHEN FinalNpaDt IS NULL THEN @PROCESSINGDATE ELSE A.FinalNpaDt END
from pro.AccountCal A  inner join YBL_ACS_MIS.dbo.AccountData  B on A.customeracid=b.AccountID
WHERE B.Restr_Flag='Y' 
AND a.Asset_Norm <> 'ALWYS_STD' --COMMENTED BY ZAIN ON 20241227 TO HANDLE DAY-3 SCENARIO FOR LOOP ALWAYS_STD F
AND A.RefCustomerID NOT IN (SELECT CustomerID FROM DATAUPLOAD.MOCCUSTOMERDATAUPLOAD WHERE MOCTYPE='MANUAL')--ADDED BY ZAIN ON 20241227 TO HANDLE DAY-3 SCENARIO FOR LOOP ALWAYS_STD 

IF OBJECT_ID('TEMPDB..#TEMPTABLE_Restr_Flag') IS NOT NULL
    DROP TABLE #TEMPTABLE_Restr_Flag

	SELECT RefCustomerID
	 INTO #TEMPTABLE_Restr_Flag FROM PRO.AccountCal
	WHERE FlgRestructure='Y' 

	UPDATE B SET B.ASSET_NORM='ALWYS_NPA'
             ,B.DEGREASON='ALWYS_NPA DUE TO RESTRUCTURE'
	     ,B.SysAssetClassAlt_Key=CASE WHEN SysAssetClassAlt_Key=1 THEN 2 ELSE B.SysAssetClassAlt_Key END
	  ,B.SysNPA_Dt=CASE WHEN SysNPA_Dt IS NULL THEN @PROCESSINGDATE ELSE B.SysNPA_Dt END
	 FROM #TEMPTABLE_Restr_Flag A
	INNER JOIN PRO.CUSTOMERCAL B
	ON A.RefCustomerID=B.RefCustomerID
	

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE ALWYS_NPA DUE TO RESTRUCTURE'
 

/*------------------2 B.UPDATE NPA DATE TO SECURITY------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) SELECT ORIGINAL_LOGIN(),'UPDATE NPA DATE TO SECURITY','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


UPDATE A SET 
			A.SYSNPA_DT=B.EffectiveNPADate
FROM PRO.CUSTOMERCAL A INNER JOIN [DATAUPLOAD].[SecurityDataUpload] B 
ON A.REFCUSTOMERID=B.CUSTOMERID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND B.EffectiveNPADate IS NOT NULL AND SYSASSETCLASSALT_KEY>1


UPDATE A SET 
              A.FINALNPADT=B.EffectiveNPADate
FROM PRO.ACCOUNTCAL A INNER JOIN [DATAUPLOAD].[SecurityDataUpload] B 
ON A.REFCUSTOMERID=B.CUSTOMERID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND B.EffectiveNPADate IS NOT NULL AND FINALASSETCLASSALT_KEY>1

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE NPA DATE TO SECURITY'
 
 /*------------------ B.UPDATE NPA DATE from NPA date upload 26-02-2020 ------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) SELECT ORIGINAL_LOGIN(),'UPDATE NPA DATE FROM NPA DATE UPLOAD','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

------------------------------Expire record if customer is STD-----

update B set B.EFFECTIVETOTIMEKEY = @TIMEKEY-1
FROM PRO.CUSTOMERCAL A INNER JOIN [DATAUPLOAD].[NpaDateDataUpload] B 
ON A.UCIF_ID=B.UCIF_ID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND B.NPADate IS NOT NULL AND SYSASSETCLASSALT_KEY=1 and b.EFFECTIVETOTIMEKEY=49999

--------------------------------------------------------------
UPDATE A SET 
			A.SYSNPA_DT=B.NPADate
FROM PRO.CUSTOMERCAL A INNER JOIN [DATAUPLOAD].[NpaDateDataUpload] B 
ON A.UCIF_ID=B.UCIF_ID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND B.NPADate IS NOT NULL AND SYSASSETCLASSALT_KEY>1


UPDATE A SET 
              A.FINALNPADT=B.NPADate
FROM PRO.ACCOUNTCAL A INNER JOIN [DATAUPLOAD].[NpaDateDataUpload] B 
ON A.UCIF_ID=B.UCIF_ID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND B.NPADate IS NOT NULL AND FINALASSETCLASSALT_KEY>1

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE NPA DATE FROM NPA DATE UPLOAD'

/* PHASE III ENPA WORK  Added By Triloki Khanna 04/06/2021*/


----update DimLineCodeReview set SrcSysReviewLineCodeName=ReviewLineCodeGroup 
----where SrcSysReviewLineCodeName is NULL and ReviewLineCodeGroup is not NULL

----update DimLineCodeStockStatement set SrcSysStockLineCodeName=StockLineCodeGroup 
----where SrcSysStockLineCodeName is NULL and StockLineCodeGroup is not NULL

----update DimLineProductCodeReview set SrcSysReviewLineProductCodeName=ReviewLineProductCodeGroup 
----where SrcSysReviewLineProductCodeName is NULL and ReviewLineProductCodeGroup is not NULL

------/*------------------Update Review Date In PRO.Accountcal Through CustomerData------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'Update Review Date In PRO.Accountcal Through CustomerData','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET ReviewDueDt=CustRevRenDate
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..CustomerData B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
INNER JOIN DimLineProductCodeReview D ON C.SourceName=D.ReviewLineProductCodeGroup
AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND A.ProductCode=D.ReviewLineProductCode
WHERE B.CustRevRenDate IS NOT NULL

UPDATE A SET ReviewDueDt=CustRevRenDate
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..CustomerData_CA B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
INNER JOIN DimLineProductCodeReview D ON C.SourceName=D.ReviewLineProductCodeGroup
AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND A.ProductCode=D.ReviewLineProductCode 
WHERE B.CustRevRenDate IS NOT NULL and A.ReviewDueDt is null

/* Updated by Vishal Patil based on email from Triloki Khanna 17/06/2021 */
UPDATE A SET ReviewDueDt=CustRevRenDate
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..CustomerData B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
INNER JOIN DimLineCodeReview D ON C.SourceName=D.ReviewLineCodeGroup
AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND (A.LineCode=D.ReviewLineCode or SUBSTRING(LINECODE,1,LEN(LINECODE)-1)=D.ReviewLineCode
or SUBSTRING(LINECODE,1,LEN(LINECODE)-2)=D.ReviewLineCode
or SUBSTRING(LINECODE,1,LEN(LINECODE)-3)=D.ReviewLineCode
)
WHERE B.CustRevRenDate IS NOT NULL and a.LineCode is not null and len(a.LineCode) > 5 --ADDED BY BALA

UPDATE A SET ReviewDueDt=CustRevRenDate
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..CustomerData B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE B.CustRevRenDate IS NOT NULL
AND C.SourceShortName='MUREX'

UPDATE A SET ReviewDueDt=CustRevRenDate
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..CustomerData B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE B.CustRevRenDate IS NOT NULL
AND C.SourceShortName='GOLD'

UPDATE A SET ReviewDueDt=CustRevRenDate
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..CustomerData B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE B.CustRevRenDate IS NOT NULL
AND C.SourceShortName='EIFS'

UPDATE A SET ReviewDueDt=CustRevRenDate
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..CustomerData B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE B.CustRevRenDate IS NOT NULL
AND C.SourceShortName='ECFS'

UPDATE A SET ReviewDueDt=CustRevRenDate
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..CustomerData B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE B.CustRevRenDate IS NOT NULL
AND C.SourceShortName='ECBF'



UPDATE A SET ReviewDueDt=CustRevRenDate
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..CustomerData B ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
INNER JOIN DimLineProductCodeReview D ON C.SourceName=D.ReviewLineProductCodeGroup
AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE B.CustRevRenDate IS NOT NULL
AND C.SourceShortName='VISIONPLUS' AND A.CommercialFlag_AltKey IN (1,2,4)
AND A.ProductCode=D.ReviewLineProductCode

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='Update Review Date In PRO.Accountcal Through CustomerData'

/* PHASE III ENPA WORK  Added By Triloki Khanna 04/06/2021*/

/*------------------UPDATE REVIEW DATE IN PRO.ACCOUNTCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE REVIEW DATE THROUGH EXCEL SHEET IN ACCOUNT LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


IF OBJECT_ID('TEMPDB..#REVIEWTDT') IS NOT NULL
  DROP TABLE #REVIEWDT


  SELECT B.REFCUSTOMERID,MAX(REVIEWEXPIRYDATE) AS REVIEWEXPIRYDATE INTO #REVIEWDT FROM [DATAUPLOAD].[REVIEWRENEWALDATAUPLOAD] A
  INNER JOIN PRO.CUSTOMERCAL B ON A.CUSTOMERID=B.REFCUSTOMERID
  WHERE A.EFFECTIVETOTIMEKEY=49999
  GROUP BY B.REFCUSTOMERID
  ----'FCR'Commented on 08-05-2019 after discusion with Pramod shetty----
UPDATE B SET REVIEWDUEDT=A.REVIEWEXPIRYDATE
FROM #REVIEWDT A INNER JOIN PRO.ACCOUNTCAL B ON A.REFCUSTOMERID=B.REFCUSTOMERID
INNER JOIN DIMSOURCEDB  C ON B.SOURCEALT_KEY=C.SOURCEALT_KEY AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY 
--WHERE C.SOURCENAME='FCR'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE REVIEW DATE THROUGH EXCEL SHEET IN ACCOUNT LEVEL'


/* PHASE III ENPA WORK  Added By Triloki Khanna 04/06/2021*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE STOCKSTATEMENT DATE THROUGH SOURCE SYSTEM','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


EXEC [PRO].[StockStDate_Insert_Data]

/* Updated by Vishal Patil based on email from Triloki Khanna 17/06/2021 */
IF OBJECT_ID('TEMPDB..#TEMPTABLEICRABorrowerIDActualStockduedate') IS NOT NULL
DROP TABLE #TEMPTABLEICRABorrowerIDActualStockduedate

select ICRABorrowerID,min(ActualStockduedate) AS ActualStockduedate
INTO #TEMPTABLEICRABorrowerIDActualStockduedate
from PRO.StockStDate A
where (A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY)
GROUP BY ICRABorrowerID


UPDATE A SET StockStDt =B.ActualStockduedate
FROM PRO.ACCOUNTCAL A INNER JOIN PRO.CUSTOMERCAL E ON A.SOURCESYSTEMCUSTOMERID =E.SOURCESYSTEMCUSTOMERID
INNER JOIN #TEMPTABLEICRABorrowerIDActualStockduedate B ON B.ICRABorrowerID=E.IMAXID_CCUBE
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
INNER JOIN DimLineCodeStockStatement D ON C.SourceName=D.StockLineCodeGroup
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND (A.LineCode=D.StockLineCode or SUBSTRING(LINECODE,1,LEN(LINECODE)-1)=D.StockLineCode
or SUBSTRING(LINECODE,1,LEN(LINECODE)-2)=D.StockLineCode)
WHERE E.IMAXID_CCube IS NOT NULL



UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE STOCKSTATEMENT DATE THROUGH SOURCE SYSTEM'

/* PHASE III ENPA WORK  Added By Triloki Khanna 04/06/2021*/

/*------------------UPDATE STOCK DATE IN PRO.ACCOUNTCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE STOCKSTATEMENT DATE THROUGH EXCEL SHEET IN ACCOUNT LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

IF OBJECT_ID('TEMPDB..#STOCKSTDT') IS NOT NULL
  DROP TABLE #STOCKSTDT

 SELECT B.REFCUSTOMERID,MAX(STOCKSTATEMENTDATE) AS STOCKSTDT INTO #STOCKSTDT FROM [DATAUPLOAD].[STOCKSTATEMENTDATAUPLOAD] A
  INNER JOIN PRO.CUSTOMERCAL B ON A.CUSTOMERID=B.REFCUSTOMERID
  WHERE A.EFFECTIVETOTIMEKEY=49999
  GROUP BY B.REFCUSTOMERID
   ----'FCR'Commented on 08-05-2019 after discusion with Pramod shetty----
UPDATE B SET STOCKSTDT=A.STOCKSTDT
FROM #STOCKSTDT A INNER JOIN PRO.ACCOUNTCAL B ON A.REFCUSTOMERID=B.REFCUSTOMERID
INNER JOIN DIMSOURCEDB  C ON B.SOURCEALT_KEY=C.SOURCEALT_KEY AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY 
--WHERE C.SOURCENAME='FCR'


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE STOCKSTATEMENT DATE THROUGH EXCEL SHEET IN ACCOUNT LEVEL'


/*------------------5.UPDATE REPOSSESSION DATE  IN PRO.ACCOUNTCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE REPOSSESSION DATE IN ACCOUNT LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.REPOSSESSIONDATE=B.REPOSSESSIONDATE
FROM PRO.ACCOUNTCAL A INNER JOIN [DATAUPLOAD].[REPOSSESSEDACCOUNTDATAUPLOAD] B 
ON A.CUSTOMERACID=B.CUSTOMERACID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)

UPDATE A SET FINALASSETCLASSALT_KEY=2,FLGDEG='Y' ,DEGREASON='NPA DUE TO REPOSSESSION DATE' ,
OVERDUESINCEDT=REPOSSESSIONDATE,FINALNPADT=REPOSSESSIONDATE
FROM PRO.ACCOUNTCAL A  
WHERE FINALASSETCLASSALT_KEY=1 AND REPOSSESSIONDATE IS NOT NULL

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE REPOSSESSION DATE IN ACCOUNT LEVEL'



/*------------------6.UPDATE PROVISIONPERCENT IN ACCOUNT LEVEL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE PROVISIONPERCENT IN ACCOUNT LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.ADDLPROVISIONPER=B.PROVISIONPERCENT
FROM PRO.ACCOUNTCAL A INNER JOIN [DATAUPLOAD].[PROVISIONDATAUPLOAD] B 
ON A.CUSTOMERACID=B.CUSTOMERACID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE PROVISIONPERCENT IN ACCOUNT LEVEL'





/*------------------3.UPDATE FLGINFRA, DFVAMTIN ACCOUNT LEVEL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE FLGINFRA, DFVAMTIN ACCOUNT LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.FLGINFRA=B.INFRASTRUCTURE
             FROM PRO.ACCOUNTCAL A INNER JOIN [DATAUPLOAD].[RESTRUCTUREDATAUPLOAD] B 
ON A.CUSTOMERACID=B.CUSTOMERACID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE FLGINFRA='Y'

UPDATE A SET A.DFVAMT=B.DFVAMOUNT
FROM PRO.ACCOUNTCAL A INNER JOIN [DATAUPLOAD].[RESTRUCTUREDATAUPLOAD] B 
ON A.CUSTOMERACID=B.CUSTOMERACID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE B.DFVAMOUNT>0

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE FLGINFRA, DFVAMTIN ACCOUNT LEVEL'




----/*------------------3.INSERT AND UPDATE DATA INTO RESTRUCTUREDETAIL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) SELECT ORIGINAL_LOGIN(),'INSERT AND UPDATE DATA INTO RESTRUCTUREDETAIL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID



IF OBJECT_ID('TEMPDB..#ADVACRESTRUCTUREDETAIL') IS NOT NULL
   DROP TABLE #ADVACRESTRUCTUREDETAIL


CREATE TABLE [#ADVACRESTRUCTUREDETAIL](
	[ENTITYKEY] [INT] IDENTITY(1,1) NOT NULL,
	[ACCOUNTENTITYID] [INT] NULL,
	[RESTRUCTURETYPEALT_KEY] [SMALLINT] NULL,
	[RESTRUCTURECATGALT_KEY] [SMALLINT] NULL,
	[RESTRUCTUREPROPOSALDT] [DATE] NULL,
	[RESTRUCTUREDT] [DATE] NULL,
	[RESTRUCTUREAMT] [DECIMAL](18, 0) NULL,
	[APPROVINGAUTHALT_KEY] [SMALLINT] NULL,
	[RESTRUCTUREAPPROVALDT] [DATE] NULL,
	[RESTRUCTURESEQUENCEREFNO] [INT] NULL,
	[DIMINUTIONAMOUNT] [DECIMAL](18, 0) NULL,
	[RESTRUCTUREBYALT_KEY] [INT] NULL,
	[REFCUSTOMERID] [VARCHAR](20) NOT NULL,
	[REFSYSTEMACID] [VARCHAR](30) NULL,
	[AUTHORISATIONSTATUS] [CHAR](2) NULL,
	[EFFECTIVEFROMTIMEKEY] [INT] NULL,
	[EFFECTIVETOTIMEKEY] [INT] NULL,
	[CREATEDBY] [VARCHAR](20) NULL,
	[DATECREATED] [SMALLDATETIME] NULL,
	[MODIFIEDBY] [VARCHAR](20) NULL,
	[DATEMODIFIED] [SMALLDATETIME] NULL,
	[APPROVEDBY] [VARCHAR](20) NULL,
	[DATEAPPROVED] [SMALLDATETIME] NULL,
	[D2KTIMESTAMP] [TIMESTAMP] NOT NULL,
	[CDRFLG] [CHAR](1) NULL,
	[EXITCDRFLG] [CHAR](1) NULL,
	[CUTOFFDATE] [DATE] NULL,
	[REPAYMENTSTARTDATE] [DATE] NULL,
	[RESTRUCTUREREASON] [CHAR](3) NULL,
	[OVERDUESINCEDT] [DATE] NULL,
	[BANKAPPROVALDT] [DATE] NULL,
	[FORWARDDT] [DATE] NULL,
	[REMARK] [VARCHAR](250) NULL,
	[SDR_INVOKED] [CHAR](1) NULL,
	[SDR_REFER_DATE] [DATE] NULL
) ON [PRIMARY]

INSERT INTO #ADVACRESTRUCTUREDETAIL
 (
 ACCOUNTENTITYID
,RESTRUCTURETYPEALT_KEY
,RESTRUCTURECATGALT_KEY
,RESTRUCTUREPROPOSALDT
,RESTRUCTUREDT
,RESTRUCTUREAMT
,APPROVINGAUTHALT_KEY
,RESTRUCTUREAPPROVALDT
,RESTRUCTURESEQUENCEREFNO
,DIMINUTIONAMOUNT
,RESTRUCTUREBYALT_KEY
,REFCUSTOMERID
,REFSYSTEMACID
,AUTHORISATIONSTATUS
,EFFECTIVEFROMTIMEKEY
,EFFECTIVETOTIMEKEY
,CREATEDBY
,DATECREATED
,MODIFIEDBY
,DATEMODIFIED
,APPROVEDBY
,DATEAPPROVED
,CDRFLG
,EXITCDRFLG
,CUTOFFDATE
,REPAYMENTSTARTDATE
,RESTRUCTUREREASON
,OVERDUESINCEDT
,BANKAPPROVALDT
,FORWARDDT
,REMARK
,SDR_INVOKED
,SDR_REFER_DATE
)

SELECT		
 A.ACCOUNTENTITYID AS ACCOUNTENTITYID
,200 AS RESTRUCTURETYPEALT_KEY
,0 AS RESTRUCTURECATGALT_KEY
,NULL AS RESTRUCTUREPROPOSALDT
,RESTRUCTUREDATE AS RESTRUCTUREDT
,NULL AS RESTRUCTUREAMT
,NULL AS APPROVINGAUTHALT_KEY
,NULL AS RESTRUCTUREAPPROVALDT
,NULL AS RESTRUCTURESEQUENCEREFNO
,NULL AS DIMINUTIONAMOUNT
,NULL AS RESTRUCTUREBYALT_KEY
,CUSTOMERID AS REFCUSTOMERID
,A.CUSTOMERACID AS REFSYSTEMACID
,NULL AUTHORISATIONSTATUS
,@TIMEKEY AS EFFECTIVEFROMTIMEKEY
,49999 AS EFFECTIVETOTIMEKEY
,'SSISUSER' AS CREATEDBY
,GETDATE() AS DATECREATED
,NULL AS MODIFIEDBY
,NULL AS DATEMODIFIED
,NULL AS APPROVEDBY
,NULL AS DATEAPPROVED
,NULL AS CDRFLG
,NULL AS EXITCDRFLG
,NULL AS CUTOFFDATE
,NULL AS REPAYMENTSTARTDATE
,NULL AS RESTRUCTUREREASON
,NULL AS OVERDUESINCEDT
,NULL AS BANKAPPROVALDT
,NULL AS FORWARDDT
,NULL AS REMARK
,NULL AS SDR_INVOKED
,NULL AS SDR_REFER_DATE

FROM PRO.ACCOUNTCAL A 
INNER JOIN [DATAUPLOAD].[RESTRUCTUREDATAUPLOAD] B 
ON A.CUSTOMERACID=B.CUSTOMERACID 
 WHERE B.RESTRUCTUREDATE IS NOT NULL
 AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)

						
------*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
------INSERT DATA INTO [CURDAT].[ADVACRESTRUCTUREDETAIL] TABLE
------*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-


MERGE [CURDAT].[ADVACRESTRUCTUREDETAIL] AS O
USING #ADVACRESTRUCTUREDETAIL AS T
ON O.RESTRUCTUREDT=T.RESTRUCTUREDT  
AND O.REFSYSTEMACID=T.REFSYSTEMACID
AND O.EFFECTIVEFROMTIMEKEY<=@TIMEKEY  AND O.EFFECTIVETOTIMEKEY>=@TIMEKEY


 WHEN MATCHED AND 
								(  

										          ISNULL(O.[RESTRUCTUREDT],'01-01-1900')			<>	 ISNULL(T.[RESTRUCTUREDT],'01-01-1900')
												OR ISNULL(O.[REFCUSTOMERID],'0')					<>	 ISNULL(T.[REFCUSTOMERID],'0')
												OR ISNULL(O.[REFSYSTEMACID],'0')					<>	 ISNULL(T.[REFSYSTEMACID],'0')
											   )

THEN
UPDATE SET 
 O.EFFECTIVETOTIMEKEY=@TIMEKEY-1,
 O.DATEMODIFIED=CONVERT(DATE,GETDATE());

UPDATE AA
SET 
 EFFECTIVETOTIMEKEY = @TIMEKEY-1,
DATEMODIFIED=CONVERT(DATE,GETDATE(),103),
 MODIFIEDBY='SSISUSER' 

FROM [CURDAT].[ADVACRESTRUCTUREDETAIL] AA
WHERE AA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY  AND AA.EFFECTIVETOTIMEKEY>=@TIMEKEY
AND NOT EXISTS (SELECT 1 FROM #ADVACRESTRUCTUREDETAIL BB
				WHERE AA.REFSYSTEMACID=BB.REFSYSTEMACID
				AND AA.RESTRUCTUREDT=BB.RESTRUCTUREDT
				AND BB.EFFECTIVEFROMTIMEKEY<=@TIMEKEY  AND BB.EFFECTIVETOTIMEKEY>=@TIMEKEY
			   )

			   
MERGE [CURDAT].[ADVACRESTRUCTUREDETAIL] AR
USING #ADVACRESTRUCTUREDETAIL T_AR
ON AR.RESTRUCTUREDT=T_AR.RESTRUCTUREDT
AND AR.REFSYSTEMACID=T_AR.REFSYSTEMACID
AND AR.EFFECTIVEFROMTIMEKEY<=@TIMEKEY  AND AR.EFFECTIVETOTIMEKEY>=@TIMEKEY

WHEN NOT MATCHED
THEN
INSERT
(
 ACCOUNTENTITYID
,RESTRUCTURETYPEALT_KEY
,RESTRUCTURECATGALT_KEY
,RESTRUCTUREPROPOSALDT
,RESTRUCTUREDT
,RESTRUCTUREAMT
,APPROVINGAUTHALT_KEY
,RESTRUCTUREAPPROVALDT
,RESTRUCTURESEQUENCEREFNO
,DIMINUTIONAMOUNT
,RESTRUCTUREBYALT_KEY
,REFCUSTOMERID
,REFSYSTEMACID
,AUTHORISATIONSTATUS
,EFFECTIVEFROMTIMEKEY
,EFFECTIVETOTIMEKEY
,CREATEDBY
,DATECREATED
,MODIFIEDBY
,DATEMODIFIED
,APPROVEDBY
,DATEAPPROVED
,CDRFLG
,EXITCDRFLG
,CUTOFFDATE
,REPAYMENTSTARTDATE
,RESTRUCTUREREASON
,OVERDUESINCEDT
,BANKAPPROVALDT
,FORWARDDT
,REMARK
,SDR_INVOKED
,SDR_REFER_DATE
												
			)
VALUES
( 
 T_AR.ACCOUNTENTITYID
,T_AR.RESTRUCTURETYPEALT_KEY
,T_AR.RESTRUCTURECATGALT_KEY
,T_AR.RESTRUCTUREPROPOSALDT
,T_AR.RESTRUCTUREDT
,T_AR.RESTRUCTUREAMT
,T_AR.APPROVINGAUTHALT_KEY
,T_AR.RESTRUCTUREAPPROVALDT
,T_AR.RESTRUCTURESEQUENCEREFNO
,T_AR.DIMINUTIONAMOUNT
,T_AR.RESTRUCTUREBYALT_KEY
,T_AR.REFCUSTOMERID
,T_AR.REFSYSTEMACID
,T_AR.AUTHORISATIONSTATUS
,T_AR.EFFECTIVEFROMTIMEKEY
,T_AR.EFFECTIVETOTIMEKEY
,T_AR.CREATEDBY
,T_AR.DATECREATED
,T_AR.MODIFIEDBY
,T_AR.DATEMODIFIED
,T_AR.APPROVEDBY
,T_AR.DATEAPPROVED
,T_AR.CDRFLG
,T_AR.EXITCDRFLG
,T_AR.CUTOFFDATE
,T_AR.REPAYMENTSTARTDATE
,T_AR.RESTRUCTUREREASON
,T_AR.OVERDUESINCEDT
,T_AR.BANKAPPROVALDT
,T_AR.FORWARDDT
,T_AR.REMARK
,T_AR.SDR_INVOKED
,T_AR.SDR_REFER_DATE
);


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='INSERT AND UPDATE DATA INTO RESTRUCTUREDETAIL'

----/*------------------3.INSERT AND UPDATE DATA INTO ADVACPROJECTDETAIL------------------*/
----INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) SELECT ORIGINAL_LOGIN(),'INSERT AND UPDATE DATA INTO ADVACPROJECTDETAIL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


----DECLARE @PROJECTID INT
----SELECT @PROJECTID=ISNULL(MAX( CAST(ISNULL(PROJECTID,0) AS INT)),0) + 0 FROM   ADVACPROJECTDETAIL


----IF OBJECT_ID('TEMPDB..#ADVACPROJECTDETAIL') IS NOT NULL
----   DROP TABLE #ADVACPROJECTDETAIL


----	CREATE TABLE [#ADVACPROJECTDETAIL](
----	[ENTITYKEY] [INT] IDENTITY(1,1) NOT NULL,
----	[CUSTOMERENTITYID] [INT] NOT NULL,
----	[REFACCOUNTENTITYID] [VARCHAR](MAX) NOT NULL,
----	[PROJECTID] [INT] NULL,
----	[PROJECTNAME] [VARCHAR](100) NULL,
----	[PROJECTCATGALT_KEY] [SMALLINT] NULL,
----	[FINANCIALCLOSUREDT] [DATE] NULL,
----	[PAIDUPCAPITAL] [NUMERIC](18, 0) NULL,
----	[PROJECTPARTICULAR] [VARCHAR](500) NULL,
----	[ORIGINALENVISAGCOMPLETIONDT] [DATE] NULL,
----	[REVISEDCOMPLETIONDT] [DATE] NULL,
----	[ACTUALCOMPLETIONDT] [DATE] NULL,
----	[PROJECTCOSTBYINTERNALSOURCE] [DECIMAL](14, 2) NULL,
----	[PROJECTCOSTBYDEBT] [DECIMAL](14, 2) NULL,
----	[PROJECTCOSTBYEQUITY] [DECIMAL](14, 2) NULL,
----	[PROJECTCOSTBYOTHERMEANS] [DECIMAL](14, 2) NULL,
----	[PROJECTCOSTBYPPEQUITY] [DECIMAL](14, 2) NULL,
----	[PROJECTCOSTBYPPDEBT] [DECIMAL](14, 2) NULL,
----	[PROJCOSTUPTOPREVFINYEAR] [DECIMAL](14, 2) NULL,
----	[PROJCOSTCURFINYEAR] [DECIMAL](14, 2) NULL,
----	[PROJCOSTNEXTYEAR1] [DECIMAL](14, 2) NULL,
----	[PROJCOSTNEXTYEAR2] [DECIMAL](14, 2) NULL,
----	[PROJCOSTNEXTYEAR3] [DECIMAL](14, 2) NULL,
----	[PROJCOSTNEXTYEAR4] [DECIMAL](14, 2) NULL,
----	[PROJCOSTNEXTYEAR5] [DECIMAL](14, 2) NULL,
----	[PROJCOSTBEYOND5YEAR] [DECIMAL](14, 2) NULL,
----	[PROJECTCOSTREVISEDBYINTERNALSOURCE] [DECIMAL](14, 2) NULL,
----	[PROJECTCOSTREVISEDBYDEBT] [DECIMAL](14, 2) NULL,
----	[PROJECTCOSTREVISEDBYEQUITY] [DECIMAL](14, 2) NULL,
----	[PROJECTCOSTREVISEDBYOTHERMEANS] [DECIMAL](14, 2) NULL,
----	[PROJECTCURRENTSTATUS] [VARCHAR](250) NULL,
----	[REVPROJCOSTUPTOPREVFINYEAR] [DECIMAL](14, 2) NULL,
----	[REVPROJCOSTCURFINYEAR] [DECIMAL](14, 2) NULL,
----	[REVPROJCOSTNEXTYEAR1] [DECIMAL](14, 2) NULL,
----	[REVPROJCOSTNEXTYEAR2] [DECIMAL](14, 2) NULL,
----	[REVPROJCOSTNEXTYEAR3] [DECIMAL](14, 2) NULL,
----	[REVPROJCOSTNEXTYEAR4] [DECIMAL](14, 2) NULL,
----	[REVPROJCOSTNEXTYEAR5] [DECIMAL](14, 2) NULL,
----	[REVPROJCOSTBEYOND5YEAR] [DECIMAL](14, 2) NULL,
----	[REVPROJECTCOSTBYPPEQUITY] [DECIMAL](14, 2) NULL,
----	[REVPROJECTCOSTBYPPDEBT] [DECIMAL](14, 2) NULL,
----	[REFSYSTEMACID] [VARCHAR](30) NULL,
----	[AUTHORISATIONSTATUS] [VARCHAR](2) NULL,
----	[EFFECTIVEFROMTIMEKEY] [INT] NULL,
----	[EFFECTIVETOTIMEKEY] [INT] NOT NULL,
----	[CREATEDBY] [VARCHAR](20) NULL,
----	[DATECREATED] [SMALLDATETIME] NULL,
----	[MODIFIEDBY] [VARCHAR](20) NULL,
----	[DATEMODIFIED] [SMALLDATETIME] NULL,
----	[APPROVEDBY] [VARCHAR](20) NULL,
----	[DATEAPPROVED] [SMALLDATETIME] NULL,
----	[D2KTIMESTAMP] [TIMESTAMP] NOT NULL,
----	[MOCSTATUS] [CHAR](1) NULL,
----	[MOCDATE] [SMALLDATETIME] NULL,
----	[MOCTYPEALT_KEY] [INT] NULL,
----	[S4A_IMPLEMENTAION_FLG] [CHAR](1) NULL,
----	[S4A_REFERENCE_DATE] [DATE] NULL,
----	[S4A_RESOLUTION_DATE] [DATE] NULL
----) ON [PRIMARY]

----INSERT INTO #ADVACPROJECTDETAIL
---- (
----CUSTOMERENTITYID
----,REFACCOUNTENTITYID
----,PROJECTID
----,PROJECTNAME
----,PROJECTCATGALT_KEY
----,FINANCIALCLOSUREDT
----,PAIDUPCAPITAL
----,PROJECTPARTICULAR
----,ORIGINALENVISAGCOMPLETIONDT
----,REVISEDCOMPLETIONDT
----,ACTUALCOMPLETIONDT
----,PROJECTCOSTBYINTERNALSOURCE
----,PROJECTCOSTBYDEBT
----,PROJECTCOSTBYEQUITY
----,PROJECTCOSTBYOTHERMEANS
----,PROJECTCOSTBYPPEQUITY
----,PROJECTCOSTBYPPDEBT
----,PROJCOSTUPTOPREVFINYEAR
----,PROJCOSTCURFINYEAR
----,PROJCOSTNEXTYEAR1
----,PROJCOSTNEXTYEAR2
----,PROJCOSTNEXTYEAR3
----,PROJCOSTNEXTYEAR4
----,PROJCOSTNEXTYEAR5
----,PROJCOSTBEYOND5YEAR
----,PROJECTCOSTREVISEDBYINTERNALSOURCE
----,PROJECTCOSTREVISEDBYDEBT
----,PROJECTCOSTREVISEDBYEQUITY
----,PROJECTCOSTREVISEDBYOTHERMEANS
----,PROJECTCURRENTSTATUS
----,REVPROJCOSTUPTOPREVFINYEAR
----,REVPROJCOSTCURFINYEAR
----,REVPROJCOSTNEXTYEAR1
----,REVPROJCOSTNEXTYEAR2
----,REVPROJCOSTNEXTYEAR3
----,REVPROJCOSTNEXTYEAR4
----,REVPROJCOSTNEXTYEAR5
----,REVPROJCOSTBEYOND5YEAR
----,REVPROJECTCOSTBYPPEQUITY
----,REVPROJECTCOSTBYPPDEBT
----,REFSYSTEMACID
----,AUTHORISATIONSTATUS
----,EFFECTIVEFROMTIMEKEY
----,EFFECTIVETOTIMEKEY
----,CREATEDBY
----,DATECREATED
----,MODIFIEDBY
----,DATEMODIFIED
----,APPROVEDBY
----,DATEAPPROVED
----,MOCSTATUS
----,MOCDATE
----,MOCTYPEALT_KEY
----,S4A_IMPLEMENTAION_FLG
----,S4A_REFERENCE_DATE
----,S4A_RESOLUTION_DATE
----)

----SELECT		
---- A.CUSTOMERENTITYID
----,A.ACCOUNTENTITYID AS REFACCOUNTENTITYID
----,ROW_NUMBER () OVER (ORDER BY [ACCOUNTENTITYID ]) + @PROJECTID    AS PROJECTID 
----,B.CUSTOMERNAME AS PROJECTNAME
----,20 AS PROJECTCATGALT_KEY
----,NULL AS FINANCIALCLOSUREDT
----,NULL AS PAIDUPCAPITAL
----,NULL AS PROJECTPARTICULAR
----,ORIGINALDCCODATE AS ORIGINALENVISAGCOMPLETIONDT
----,EXTENDEDDCCODATE AS REVISEDCOMPLETIONDT
----,ACTUALDCCODATE AS ACTUALCOMPLETIONDT
----,NULL AS PROJECTCOSTBYINTERNALSOURCE
----,NULL AS PROJECTCOSTBYDEBT
----,NULL AS PROJECTCOSTBYEQUITY
----,NULL AS PROJECTCOSTBYOTHERMEANS
----,NULL AS PROJECTCOSTBYPPEQUITY
----,NULL AS PROJECTCOSTBYPPDEBT
----,NULL AS PROJCOSTUPTOPREVFINYEAR
----,NULL AS PROJCOSTCURFINYEAR
----,NULL AS PROJCOSTNEXTYEAR1
----,NULL AS PROJCOSTNEXTYEAR2
----,NULL AS PROJCOSTNEXTYEAR3
----,NULL AS PROJCOSTNEXTYEAR4
----,NULL AS PROJCOSTNEXTYEAR5
----,NULL AS PROJCOSTBEYOND5YEAR
----,NULL AS PROJECTCOSTREVISEDBYINTERNALSOURCE
----,NULL AS PROJECTCOSTREVISEDBYDEBT
----,NULL AS PROJECTCOSTREVISEDBYEQUITY
----,NULL AS PROJECTCOSTREVISEDBYOTHERMEANS
----,NULL AS PROJECTCURRENTSTATUS
----,NULL AS REVPROJCOSTUPTOPREVFINYEAR
----,NULL AS REVPROJCOSTCURFINYEAR
----,NULL AS REVPROJCOSTNEXTYEAR1
----,NULL AS REVPROJCOSTNEXTYEAR2
----,NULL AS REVPROJCOSTNEXTYEAR3
----,NULL AS REVPROJCOSTNEXTYEAR4
----,NULL AS REVPROJCOSTNEXTYEAR5
----,NULL AS REVPROJCOSTBEYOND5YEAR
----,NULL AS REVPROJECTCOSTBYPPEQUITY
----,NULL AS REVPROJECTCOSTBYPPDEBT
----,A.CUSTOMERACID AS REFSYSTEMACID
----,AUTHORISATIONSTATUS
----,@TIMEKEY AS EFFECTIVEFROMTIMEKEY
----,49999 AS EFFECTIVETOTIMEKEYY
----,'SSISUSER' AS CREATEDBY
----,GETDATE() AS DATECREATED
----,NULL AS MODIFIEDBY
----,NULL AS DATEMODIFIED
----,NULL AS APPROVEDBY
----,NULL AS DATEAPPROVED
----,NULL AS MOCSTATUS
----,NULL AS MOCDATE
----,NULL AS MOCTYPEALT_KEY
----,NULL AS S4A_IMPLEMENTAION_FLG
----,NULL AS S4A_REFERENCE_DATE
----,NULL AS S4A_RESOLUTION_DATE

----FROM PRO.ACCOUNTCAL A 
----INNER JOIN [DATAUPLOAD].[RESTRUCTUREDATAUPLOAD] B 
----ON A.CUSTOMERACID=B.CUSTOMERACID 
---- WHERE B.ORIGINALDCCODATE IS NOT NULL
---- AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)

						
----------*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
----------INSERT DATA INTO ADVACPROJECTDETAIL TABLE
----------*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-


----MERGE ADVACPROJECTDETAIL AS O
----USING #ADVACPROJECTDETAIL AS T
----ON O.ORIGINALENVISAGCOMPLETIONDT=T.ORIGINALENVISAGCOMPLETIONDT  
----AND O.REFSYSTEMACID=T.REFSYSTEMACID
----AND O.EFFECTIVEFROMTIMEKEY<=@TIMEKEY  AND O.EFFECTIVETOTIMEKEY>=@TIMEKEY


---- WHEN MATCHED AND 
----								(  

----										  ISNULL(O.ORIGINALENVISAGCOMPLETIONDT,'01-01-1900')	<>	 ISNULL(T.ORIGINALENVISAGCOMPLETIONDT,'01-01-1900')
----												OR ISNULL(O.REVISEDCOMPLETIONDT,'01-01-1900')	<>	 ISNULL(T.REVISEDCOMPLETIONDT,'01-01-1900')
----												OR  ISNULL(O.ACTUALCOMPLETIONDT,'01-01-1900')	<>	 ISNULL(T.ACTUALCOMPLETIONDT,'01-01-1900')
----												OR ISNULL(O.REFSYSTEMACID,'0')				<>	 ISNULL(T.REFSYSTEMACID,'0')
----											   )

----THEN
----UPDATE SET 
---- O.EFFECTIVETOTIMEKEY=@TIMEKEY-1,
---- O.DATEMODIFIED=CONVERT(DATE,GETDATE());

----UPDATE AA
----SET 
---- EFFECTIVETOTIMEKEY = @TIMEKEY-1,
---- DATEMODIFIED=CONVERT(DATE,GETDATE(),103),
---- MODIFIEDBY='SSISUSER' 

----FROM ADVACPROJECTDETAIL AA
----WHERE AA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY  AND AA.EFFECTIVETOTIMEKEY>=@TIMEKEY
----AND NOT EXISTS (SELECT 1 FROM #ADVACPROJECTDETAIL BB
----				WHERE AA.REFSYSTEMACID=BB.REFSYSTEMACID
----				AND AA.ORIGINALENVISAGCOMPLETIONDT=BB.ORIGINALENVISAGCOMPLETIONDT
----				AND BB.EFFECTIVEFROMTIMEKEY<=@TIMEKEY  AND BB.EFFECTIVETOTIMEKEY>=@TIMEKEY
----			   )

			   
----MERGE ADVACPROJECTDETAIL AR
----USING #ADVACPROJECTDETAIL T_AR
----ON AR.ORIGINALENVISAGCOMPLETIONDT=T_AR.ORIGINALENVISAGCOMPLETIONDT
----AND AR.REFSYSTEMACID=T_AR.REFSYSTEMACID
----AND AR.EFFECTIVEFROMTIMEKEY<=@TIMEKEY  AND AR.EFFECTIVETOTIMEKEY>=@TIMEKEY

----WHEN NOT MATCHED
----THEN
----INSERT
----(
---- CUSTOMERENTITYID
----,REFACCOUNTENTITYID
----,PROJECTID
----,PROJECTNAME
----,PROJECTCATGALT_KEY
----,FINANCIALCLOSUREDT
----,PAIDUPCAPITAL
----,PROJECTPARTICULAR
----,ORIGINALENVISAGCOMPLETIONDT
----,REVISEDCOMPLETIONDT
----,ACTUALCOMPLETIONDT
----,PROJECTCOSTBYINTERNALSOURCE
----,PROJECTCOSTBYDEBT
----,PROJECTCOSTBYEQUITY
----,PROJECTCOSTBYOTHERMEANS
----,PROJECTCOSTBYPPEQUITY
----,PROJECTCOSTBYPPDEBT
----,PROJCOSTUPTOPREVFINYEAR
----,PROJCOSTCURFINYEAR
----,PROJCOSTNEXTYEAR1
----,PROJCOSTNEXTYEAR2
----,PROJCOSTNEXTYEAR3
----,PROJCOSTNEXTYEAR4
----,PROJCOSTNEXTYEAR5
----,PROJCOSTBEYOND5YEAR
----,PROJECTCOSTREVISEDBYINTERNALSOURCE
----,PROJECTCOSTREVISEDBYDEBT
----,PROJECTCOSTREVISEDBYEQUITY
----,PROJECTCOSTREVISEDBYOTHERMEANS
----,PROJECTCURRENTSTATUS
----,REVPROJCOSTUPTOPREVFINYEAR
----,REVPROJCOSTCURFINYEAR
----,REVPROJCOSTNEXTYEAR1
----,REVPROJCOSTNEXTYEAR2
----,REVPROJCOSTNEXTYEAR3
----,REVPROJCOSTNEXTYEAR4
----,REVPROJCOSTNEXTYEAR5
----,REVPROJCOSTBEYOND5YEAR
----,REVPROJECTCOSTBYPPEQUITY
----,REVPROJECTCOSTBYPPDEBT
----,REFSYSTEMACID
----,AUTHORISATIONSTATUS
----,EFFECTIVEFROMTIMEKEY
----,EFFECTIVETOTIMEKEY
----,CREATEDBY
----,DATECREATED
----,MODIFIEDBY
----,DATEMODIFIED
----,APPROVEDBY
----,DATEAPPROVED
----,MOCSTATUS
----,MOCDATE
----,MOCTYPEALT_KEY
----,S4A_IMPLEMENTAION_FLG
----,S4A_REFERENCE_DATE
----,S4A_RESOLUTION_DATE
												
----			)
----VALUES
----( 
---- T_AR.CUSTOMERENTITYID
----,T_AR.REFACCOUNTENTITYID
----,T_AR.PROJECTID
----,T_AR.PROJECTNAME
----,T_AR.PROJECTCATGALT_KEY
----,T_AR.FINANCIALCLOSUREDT
----,T_AR.PAIDUPCAPITAL
----,T_AR.PROJECTPARTICULAR
----,T_AR.ORIGINALENVISAGCOMPLETIONDT
----,T_AR.REVISEDCOMPLETIONDT
----,T_AR.ACTUALCOMPLETIONDT
----,T_AR.PROJECTCOSTBYINTERNALSOURCE
----,T_AR.PROJECTCOSTBYDEBT
----,T_AR.PROJECTCOSTBYEQUITY
----,T_AR.PROJECTCOSTBYOTHERMEANS
----,T_AR.PROJECTCOSTBYPPEQUITY
----,T_AR.PROJECTCOSTBYPPDEBT
----,T_AR.PROJCOSTUPTOPREVFINYEAR
----,T_AR.PROJCOSTCURFINYEAR
----,T_AR.PROJCOSTNEXTYEAR1
----,T_AR.PROJCOSTNEXTYEAR2
----,T_AR.PROJCOSTNEXTYEAR3
----,T_AR.PROJCOSTNEXTYEAR4
----,T_AR.PROJCOSTNEXTYEAR5
----,T_AR.PROJCOSTBEYOND5YEAR
----,T_AR.PROJECTCOSTREVISEDBYINTERNALSOURCE
----,T_AR.PROJECTCOSTREVISEDBYDEBT
----,T_AR.PROJECTCOSTREVISEDBYEQUITY
----,T_AR.PROJECTCOSTREVISEDBYOTHERMEANS
----,T_AR.PROJECTCURRENTSTATUS
----,T_AR.REVPROJCOSTUPTOPREVFINYEAR
----,T_AR.REVPROJCOSTCURFINYEAR
----,T_AR.REVPROJCOSTNEXTYEAR1
----,T_AR.REVPROJCOSTNEXTYEAR2
----,T_AR.REVPROJCOSTNEXTYEAR3
----,T_AR.REVPROJCOSTNEXTYEAR4
----,T_AR.REVPROJCOSTNEXTYEAR5
----,T_AR.REVPROJCOSTBEYOND5YEAR
----,T_AR.REVPROJECTCOSTBYPPEQUITY
----,T_AR.REVPROJECTCOSTBYPPDEBT
----,T_AR.REFSYSTEMACID
----,T_AR.AUTHORISATIONSTATUS
----,T_AR.EFFECTIVEFROMTIMEKEY
----,T_AR.EFFECTIVETOTIMEKEY
----,T_AR.CREATEDBY
----,T_AR.DATECREATED
----,T_AR.MODIFIEDBY
----,T_AR.DATEMODIFIED
----,T_AR.APPROVEDBY
----,T_AR.DATEAPPROVED
----,T_AR.MOCSTATUS
----,T_AR.MOCDATE
----,T_AR.MOCTYPEALT_KEY
----,T_AR.S4A_IMPLEMENTAION_FLG
----,T_AR.S4A_REFERENCE_DATE
----,T_AR.S4A_RESOLUTION_DATE
----);


----UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='INSERT AND UPDATE DATA INTO ADVACPROJECTDETAIL'


/*------------------UPDATE INTSERVICESDT IN PRO.ACCOUNTCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE INTNOTSERVICEDDT IN PRO.ACCOUNTCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.OVERDUEAMT=B.DEMANDAMT
            ,A.INTNOTSERVICEDDT=B.DEMANDDATE
FROM PRO.ACCOUNTCAL A INNER JOIN 
(
SELECT  UCIF_ID ,SUM(DEMANDAMT) DEMANDAMT,MIN(DEMANDDATE) DEMANDDATE FROM PRO.ADVACCCDEMANDDETAIL_CURNT
GROUP BY UCIF_ID
) B  ON A.UCIF_ID=B.UCIF_ID 
AND A.UCIF_ID<>'0'
AND A.SourceAlt_Key=1 AND A.EFFECTIVEFROMTIMEKEY<=26724 -- Due to OutofOrder 10-03-2023

-----New Condition Added on 19/11/2021 as per Phase iv Requirement Triloki Khanna to exclude Product -----
----Condition comment only Cred Avenue Integration 09/03/2022
----and A.ProductCode NOT in('623','660','661','702','878','879','884','885','889','906','918','919')


----Condition comment only Cred Avenue Integration 09/03/2022
-----New Condition Added on 19/11/2021 as per Phase iv Requirement Triloki Khanna  for Below  Product Accounts wise Demand Calcualtion -----

----Due to OutofOrder 10-03-2023------------------
UPDATE A SET A.OVERDUEAMT=B.DEMANDAMT
            ,A.INTNOTSERVICEDDT=B.DEMANDDATE
FROM PRO.ACCOUNTCAL A  
INNER JOIN 
		(
			SELECT  CUSTOMERACID ,SUM(isnull(BalanceDemand,0)) DEMANDAMT,MIN(DemandDate) DEMANDDATE 
			FROM CurDat.AdvAcDemandDetail
			where EffectiveFromTimeKey<=@timekey AND EffectiveToTimeKey>=@timekey
			and ISNULL(BalanceDemand,0) > 0
			AND DemandDate<=@ProcessingDate
			GROUP BY CUSTOMERACID
		) B  ON A.CUSTOMERACID=B.CUSTOMERACID 
		
WHERE  A.SourceAlt_Key=1 and A.ProductCode in('660','661','889','681','682','693','694','695','696','715','716','717','718',
			     '755','756','758','763','764','765','766','787','788','789','795','796',
			     '797','798','799','220','237','740','235') AND A.EFFECTIVEFROMTIMEKEY>26724 -- ---Removed ProductCode 778 Confirmed by Pankaj Mailed	
AND ISNULL(A.Balance,0)>0



--For 90 days Credit and Debit Amount
EXEC [PRO].[UpdateCADCADURefBalRecovery] @TimeKey=@TimeKey

DECLARE @MinTIMEKEY int =(SELECT MIN(EffectiveFromTimeKey) FROM  YBL_ACS.pro.AcDebitDetail_Cal)

delete from YBL_ACS.pro.AcDebitDetail_Cal where EffectiveFromTimeKey=@MinTIMEKEY
delete from YBL_ACS.pro.AcDebitDetail_Cal where EffectiveFromTimeKey=@TIMEKEY

insert into YBL_ACS.pro.AcDebitDetail_Cal
(
AccountEntityID,
CustomerAcID,
EffectiveFromTimeKey,
EffectiveToTimeKey
)
select 
AccountEntityID,
CustomerAcID,
EffectiveFromTimeKey,
EffectiveToTimeKey
from YBL_ACS.pro.AccountCal
where SourceAlt_Key=1 and Balance >0

--------------------Day 1 considered 12-JUL-2023  by Tushar---

IF OBJECT_ID('TEMPDB..#last90DebitBalance') IS NOT NULL
   DROP TABLE #last90DebitBalance

		
select CustomerAcID,count(1) cnt into #last90DebitBalance from YBL_ACS.pro.AcDebitDetail_Cal
where  EffectiveFromTimeKey  >= @Timekey1 and EffectiveFROMTimeKey <=@Timekey  
group by CustomerAcID

IF OBJECT_ID('TEMPDB..#last90DebitBalance2') IS NOT NULL
   DROP TABLE #last90DebitBalance2
select CustomerAcID into #last90DebitBalance2  from #last90DebitBalance where cnt>=@LookBackPeriod


--------------------------------------------------------------------
Update A set LastCrDate=DATEADD(DAY,-@LookBackPeriod,@PROCESSINGDATE)
FROM PRO.ACCOUNTCAL A
INNER JOIN #last90DebitBalance2 B on A.customeracid=b.customeracid
 where SourceAlt_Key=1 and LastCrDate is null and ISNULL(A.Balance,0)>0 
AND A.ProductCode not in('660','661','889','681','682','693','694','695','696','715','716','717','718',
			     '755','756','758','763','764','765','766','787','788','789','795','796',
			     '797','798','799','220','237','869','219','819','891','703','704','705','209','605','740','235') -- ---Removed ProductCode 778 Confirmed by Pankaj Mailed	


 ------Last 3 month interest 
 Declare  @LastMonthDateKey INT
         ,@LastMonthDate DATE
	 ,@PreLastMonthDateKey INT
         ,@PreLastMonthDate DATE
	 ,@PreToPreLastMonthDateKey INT
         ,@PreToPreLastMonthDate DATE

IF ( @PROCESSDATE=EOMONTH(@PROCESSDATE))
Begin

SELECT  @LastMonthDateKey=Timekey,@LastMonthDate=Date FROM SysDayMatrix WHERE TimeKey=@TIMEKEY
SELECT  @PreLastMonthDateKey=LastMonthDateKey,@PreLastMonthDate=LastMonthDate FROM SysDayMatrix WHERE TimeKey=@LastMonthDateKey
SELECT  @PreToPreLastMonthDateKey=LastMonthDateKey,@PreToPreLastMonthDate=LastMonthDate FROM SysDayMatrix WHERE TimeKey=@PreLastMonthDateKey


END
Else
Begin
SELECT  @LastMonthDateKey=LastMonthDateKey,@LastMonthDate=LastMonthDate FROM SysDayMatrix WHERE TimeKey=@TIMEKEY
SELECT  @PreLastMonthDateKey=LastMonthDateKey,@PreLastMonthDate=LastMonthDate FROM SysDayMatrix WHERE TimeKey=@LastMonthDateKey
SELECT  @PreToPreLastMonthDateKey=LastMonthDateKey,@PreToPreLastMonthDate=LastMonthDate FROM SysDayMatrix WHERE TimeKey=@PreLastMonthDateKey
END

IF OBJECT_ID('Tempdb..#Last3monthendDebit') IS NOT NULL
	DROP TABLE #Last3monthendDebit

SELECT a.CustomerAcID,count(1) cnt 
	into #Last3monthendDebit 
/*from [dbo].[AcDailyTxnDetail] A --19072023 COMMENTED BY AMAR FOR OPTIMISATION	*/
FROM Pro.[AcDailyTxnDetail_Cal] A /*ADDED BY AMAR FOR OPTIMISATION */
	inner join Pro.accountcal b on a.customeracid=b.customeracid 
where TxnType='DEBIT' AND TxnSubType='INTEREST' and b.sourcealt_key=1
	AND TxnValueDate in (@LastMonthDate,@PreLastMonthDate,@PreToPreLastMonthDate)
	--and CustomerAcID='000163700003656'
GROUP BY a.CustomerAcID

 IF OBJECT_ID('Tempdb..#Last3monthendDebit1') IS NOT NULL
	DROP TABLE #Last3monthendDebit1
		select * into #Last3monthendDebit1 from #Last3monthendDebit where cnt>=2
--------------------------

UPDATE A SET A.InttServiced='Y'
            ,A.INTNOTSERVICEDDT= DATEADD(DAY,-@LookBackPeriod,@PROCESSINGDATE) 
	    ,A.UnserviedInt= ISNULL(A.DebitAmt,0) - ISNULL(A.CreditAmt,0)
	    --,A.OVERDUEAMT= ISNULL(A.DebitAmt,0) - ISNULL(A.CreditAmt,0)
FROM PRO.ACCOUNTCAL A
INNER JOIN #last90DebitBalance2 B on A.customeracid=b.customeracid
Inner JOIN #Last3monthendDebit1 D on a.customeracid=d.customeracid
	 INNER JOIN DIMSOURCEDB C ON A.SOURCEALT_KEY=C.SOURCEALT_KEY
WHERE ISNULL(A.Balance,0)>0  AND ISNULL(A.CreditAmt,0)<ISNULL(A.DebitAmt,0) 
 --AND Asset_Norm<>'ALWYS_STD'
 AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY
 AND C.SourceName IN('FCR')
and A.ProductCode not in('660','661','889','681','682','693','694','695','696','715','716','717','718',
			     '755','756','758','763','764','765','766','787','788','789','795','796',
			     '797','798','799','220','237','869','219','819','891','703','704','705','209','605','740','235') AND A.EFFECTIVEFROMTIMEKEY>26724 -- ---Removed ProductCode 778 Confirmed by Pankaj Mailed	


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE INTNOTSERVICEDDT IN PRO.ACCOUNTCAL'


--/*------------------UPDATE DATEOFDATA IN ACCOUNT CAL TABLE------------------*/
--INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
--SELECT ORIGINAL_LOGIN(),'UPDATE DATEOFDATA IN ACCOUNT CAL TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

--UPDATE A SET A.DATEOFDATA=B.DATA_DATE
--FROM PRO.CUSTOMERCAL A INNER JOIN  YBL_ACS_MIS..CUSTOMERDATA B 
--ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID

--UPDATE A SET A.DATEOFDATA=B.DATA_DATE
--FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B 
--ON A.CUSTOMERACID=B.ACCOUNTID


-- UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE DATEOFDATA IN ACCOUNT CAL TABLE'


 /*------------------date 20-April-2021 UPDATE BALANCE IN ACCOUNT CAL TABLE for ecbf,eifs and ecfs from FCR account Balance mail from Sapna CDAG ------------------*/

 update A set Balance=0,BalanceInCrncy =0  
 FROM pro.AccountCal A INNER JOIN  
 YBL_ACS_MIS.dbo.AccountData  B on A.customeracid=b.AccountID where A.sourcealt_key in (5,6,9) AND b.sourcesystemname in ('FCR')--ADDED BY BALA


 ---Balance update for ecbf and eifs
 Update A set Balance = ISNULL(B.TOTALBALANCEOUTSTANDINGINR,0.00) * -1
from pro.AccountCal A  inner join YBL_ACS_MIS.dbo.AccountData  B on A.customeracid=b.AccountID
where A.sourcealt_key in (5,6) and b.sourcesystemname in ('FCR')  -- ADDED BY BALA ON 20250515

-----Balance update for ecfs

Update A set Balance = ISNULL(C.TOTALBALANCEOUTSTANDINGINR,0.00) * -1
from pro.AccountCal A  inner join YBL_ACS_MIS.dbo.AccountData  B on A.customeracid=b.AccountID
inner join YBL_ACS_MIS.dbo.AccountData c on c.ContractRefNo =b.ContractRefNo
where A.sourcealt_key in (9) and c.sourcesystemname in ('FCR')

  /*------------------date 20-April-2021 UPDATE BALANCE IN ACCOUNT CAL TABLE for ecbf,eifs and ecfs from FCR account Balance End------------------*/


---3) In ECFS System , calculate Overduesincedt    based minimum date of overduesincedate and Interestoverduedate AS PER MAIL Changes in ENPA system as per Audit Observatio 29/12/2021

/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

Update A set Balance = ISNULL(C.TOTALBALANCEOUTSTANDINGINR,0.00) * -1
from pro.AccountCal A  
inner join YBL_ACS_MIS.dbo.AccountData_FinSmart  B 
on A.customeracid=B.AccountID
inner join YBL_ACS_MIS.dbo.AccountData C 
on C.ContractRefNo =B.ContractRefNo
where A.sourcealt_key in (12) and C.sourcesystemname in ('FCR')

/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

/*------------------UPDATE OVERDUE SINCE DATE FOR ECFS ACCOUNT DATA------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE OVERDUE SINCE DATE FOR ECFS ACCOUNT DATA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

IF OBJECT_ID('TEMPDB..#TEMPTABLEMINOVERDUEDTECFS') IS NOT NULL
    DROP TABLE #TEMPTABLEMINOVERDUEDTECFS

SELECT CUSTOMERACID,PRO.GETMINIMUMDATE(OVERDUESINCEDT,IntOverdueSinceDt,NULL) AS MINOVERDUE 
INTO #TEMPTABLEMINOVERDUEDTECFS
FROM PRO.ACCOUNTCAL  A INNER JOIN DIMSOURCEDB B ON A.SOURCEALT_KEY=B.SOURCEALT_KEY WHERE B.SOURCENAME='ECFS' 
AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY >=@TIMEKEY)

UPDATE PRO.ACCOUNTCAL SET OVERDUESINCEDT=B.MINOVERDUE
FROM  PRO.ACCOUNTCAL A 
INNER JOIN #TEMPTABLEMINOVERDUEDTECFS B ON A.CUSTOMERACID=B.CUSTOMERACID AND B.MINOVERDUE < = @PROCESSINGDATE


/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

IF OBJECT_ID('TEMPDB..#TEMPTABLEMINOVERDUEDTSFIN') IS NOT NULL
    DROP TABLE #TEMPTABLEMINOVERDUEDTSFIN

SELECT CUSTOMERACID,PRO.GETMINIMUMDATE(OVERDUESINCEDT,IntOverdueSinceDt,NULL) AS MINOVERDUE 
INTO #TEMPTABLEMINOVERDUEDTSFIN
FROM PRO.ACCOUNTCAL  A INNER JOIN DIMSOURCEDB B ON A.SOURCEALT_KEY=B.SOURCEALT_KEY WHERE B.SOURCENAME='SFIN' 
AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY >=@TIMEKEY)

UPDATE PRO.ACCOUNTCAL SET OVERDUESINCEDT=B.MINOVERDUE
FROM  PRO.ACCOUNTCAL A 
INNER JOIN #TEMPTABLEMINOVERDUEDTSFIN B ON A.CUSTOMERACID=B.CUSTOMERACID AND B.MINOVERDUE < = @PROCESSINGDATE

/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/



UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE'
 WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND 
  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE OVERDUE SINCE DATE FOR ECFS ACCOUNT DATA'

 /*------------------UPDATE BALANCEINCRNCY IN ACCOUNT CAL TABLE------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE BALANCEINCRNCY IN ACCOUNT CAL TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

 UPDATE PRO.ACCOUNTCAL SET BALANCEINCRNCY=ISNULL(BALANCE,0) WHERE CURRENCYALT_KEY=62

	  UPDATE A SET BALANCEINCRNCY=(ISNULL(A.BALANCE,0)/CONVRATE)
	  FROM PRO.ACCOUNTCAL A 
	INNER JOIN DIMCURCOVRATE B
	ON A.CURRENCYALT_KEY=B.CURRENCYALT_KEY
		WHERE (A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY)
	 AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
	  AND A.CURRENCYALT_KEY<>62 AND ISNULL(A.BALANCE,0)<>0


 UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE BALANCEINCRNCY IN ACCOUNT CAL TABLE'






IF OBJECT_ID('TEMPDB..#CHFL') IS NOT NULL
  DROP TABLE #CHFL

SELECT A.FCR_CUSTOMERID,MAX(A.MAXDPD) AS MAXDPD INTO #CHFL  
FROM YBL_ACS_MIS..ACCOUNTDATA A WITH(NOLOCK) WHERE SOURCESYSTEMNAME='FCC' AND PRODUCTCODE='CHFL'
AND    A.MAXDPD>0
GROUP BY  A.FCR_CUSTOMERID

UPDATE A SET A.OVERDUESINCEDT=DATEADD(DAY,-MAXDPD,@PROCESSINGDATE)
 FROM PRO.ACCOUNTCAL A WITH(NOLOCK) 
INNER JOIN #CHFL  B ON  A.REFCUSTOMERID=B.FCR_CUSTOMERID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY
 WHERE C.SOURCEDBNAME='FCR' AND A.PRODUCTCODE='869'
  

 UPDATE PRO.CUSTOMERCAL SET REFCUSTOMERID=SOURCESYSTEMCUSTOMERID WHERE REFCUSTOMERID IS NULL AND SOURCEALT_KEY =10
 UPDATE PRO.CUSTOMERCAL SET REFCUSTOMERID=SOURCESYSTEMCUSTOMERID WHERE REFCUSTOMERID='' AND SOURCEALT_KEY =10

 UPDATE PRO.ACCOUNTCAL SET REFCUSTOMERID=SOURCESYSTEMCUSTOMERID WHERE REFCUSTOMERID IS NULL AND SOURCEALT_KEY =10
 UPDATE PRO.ACCOUNTCAL SET REFCUSTOMERID=SOURCESYSTEMCUSTOMERID WHERE REFCUSTOMERID='' AND SOURCEALT_KEY =10

/*ADDED By Sourangshu BRNET ON LOCAL 20250101 ON UAT 20250107*/
 UPDATE PRO.CUSTOMERCAL SET REFCUSTOMERID=SOURCESYSTEMCUSTOMERID WHERE REFCUSTOMERID IS NULL AND SOURCEALT_KEY =13
 UPDATE PRO.CUSTOMERCAL SET REFCUSTOMERID=SOURCESYSTEMCUSTOMERID WHERE REFCUSTOMERID='' AND SOURCEALT_KEY =13

 UPDATE PRO.ACCOUNTCAL SET REFCUSTOMERID=SOURCESYSTEMCUSTOMERID WHERE REFCUSTOMERID IS NULL AND SOURCEALT_KEY =13
 UPDATE PRO.ACCOUNTCAL SET REFCUSTOMERID=SOURCESYSTEMCUSTOMERID WHERE REFCUSTOMERID='' AND SOURCEALT_KEY =13
/*ADDED By Sourangshu BRNET ON LOCAL 20250101 ON UAT 20250107 END*/
		 UPDATE A SET  ACCOUNTBLKCODE1='X'
		FROM  PRO.ACCOUNTCAL A  INNER JOIN  DIMSOURCEDB B ON A.SOURCEALT_KEY=B.SOURCEALT_KEY
		AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
		AND B.SOURCENAME='VISIONPLUS'
		 AND ACCOUNTBLKCODE1=''
		 
		UPDATE A SET  ACCOUNTBLKCODE2='X'
		FROM  PRO.ACCOUNTCAL A  INNER JOIN  DIMSOURCEDB B ON A.SOURCEALT_KEY=B.SOURCEALT_KEY
		AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
		AND B.SOURCENAME='VISIONPLUS'
		 AND ACCOUNTBLKCODE2=''

		--- UPDATE BANKASSETCLASS='WRITEOFF' WHEER  ACCOUNTSTATUS='Z' AND  AccountBlkCode2='F'  17/02/2020 TRILOKI KHANNA AS PER BANK POINT
		---Added and ISNULL(TotalBalanceOutstandingINR,0) > 0 as per mail dated 04-Mar-2021 ,19-Mar-2021

		UPDATE A SET  BANKASSETCLASS='WRITEOFF'
		FROM  PRO.ACCOUNTCAL A  INNER JOIN  DIMSOURCEDB B ON A.SOURCEALT_KEY=B.SOURCEALT_KEY
		AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
		AND B.SOURCENAME='VISIONPLUS' AND A.ACCOUNTSTATUS='Z' and ISNULL(BALANCE,0) > 0---TotalBalanceOutstandingINR Change to BALANCE ENPA System column

	    UPDATE A SET  BANKASSETCLASS='WRITEOFF'
		FROM  PRO.ACCOUNTCAL A  INNER JOIN  DIMSOURCEDB B ON A.SOURCEALT_KEY=B.SOURCEALT_KEY
		AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
		AND B.SOURCENAME='VISIONPLUS' AND A.AccountBlkCode2='F'

         --CHANGES Audit 01/06/2022 
		--UPDATE A SET  BANKASSETCLASS='WRITEOFF'
		--FROM  PRO.ACCOUNTCAL A  
		--where  A.productcode in ('WA01','WA02','WA03','WA04' )
		
		UPDATE A SET  BANKASSETCLASS='WRITEOFF'
		FROM  PRO.ACCOUNTCAL A  
		where A.productcode like 'WA%' 



		UPDATE A SET DEGREASON='EXISTING WRITE OFF' + ' ' + C.SOURCEDBNAME + '  ' + + 'CUST ID  '+ A.REFCUSTOMERID
		FROM PRO.ACCOUNTCAL A INNER JOIN PRO.CUSTOMERCAL B ON A.SOURCESYSTEMCUSTOMERID =B.SOURCESYSTEMCUSTOMERID
		INNER JOIN DIMSOURCEDB  C ON C.SOURCEALT_KEY=B.SOURCEALT_KEY
		AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
		WHERE (B.FLGPROCESSING='N')  AND (A.FLGDEG='N')  AND A.FINALASSETCLASSALT_KEY>1	 AND A.BANKASSETCLASS='WRITEOFF'

	 IF OBJECT_ID('TEMPDB..#TEMPEXISTINGWRITEOFF') IS NOT NULL
		DROP TABLE #TEMPEXISTINGWRITEOFF

	 SELECT RefCustomerID ,SourceAlt_Key
	  INTO #TEMPEXISTINGWRITEOFF
	  FROM  PRO.AccountCal WHERE DegReason LIKE '%EXISTING WRITE OFF%'

	UPDATE A SET DEGREASON='PERCOLATION BY WRITE OFF' + ' ' + C.SOURCEDBNAME + '  ' + + 'CUST ID  '+ A.REFCUSTOMERID
	FROM PRO.ACCOUNTCAL A INNER JOIN #TEMPEXISTINGWRITEOFF B ON A.REFCUSTOMERID =B.REFCUSTOMERID
		INNER JOIN DIMSOURCEDB  C ON C.SOURCEALT_KEY=B.SOURCEALT_KEY
	AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
	WHERE  (A.FLGDEG='N') AND A.FINALASSETCLASSALT_KEY>1
	 AND A.DEGREASON LIKE '%PERCOLATION BY%'



	 ----Added on 19-Mar-2021 eIFS Interest arrears logic

	 update A set DerecognisedInterest1 = UnAdjustSubSidy From Pro.accountcal A inner join YBL_ACS_MIS..ACCOUNTDATA B on A.customeracid= b.AccountID
		where B.SourceSystemName ='EIFS' and ISNULL(UnAdjustSubSidy,0) > 0

	----End eIFS interest arrears logic

	 --------------Covid-19 Implementation on 03July2020-----------------------------


--------INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
--------SELECT ORIGINAL_LOGIN(),'FOR COVID LOGIC WORK','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

--	 IF OBJECT_ID('TEMPDB..#COVID19BaseDataSourceNpa') IS NOT NULL
--      DROP TABLE #COVID19BaseDataSourceNpa
--select CustomerEntityId,SysAssetClassAlt_Key as Cust_AssetClassAlt_Key,SysNPA_Dt as NPADt,RefCustomerID,EffectiveFromTimeKey,EffectiveToTimeKey,DegReason as NPA_Reason,SourceSystemCustomerID
--,'Y' AS Exclusion
--INTO #COVID19BaseDataSourceNpa
-- from  pro.customercal
-- where SysNPA_Dt>='2020-03-01'
--order by CustomerEntityId



--------IF OBJECT_ID('TEMPDB..#ProductCodeExclusion') IS NOT NULL
--------      DROP TABLE #ProductCodeExclusion

--------select 
--------AccountEntityID,UcifEntityID,	CustomerEntityID	,CustomerAcID	,RefCustomerID	,SourceSystemCustomerID	,
--------UCIF_ID	,BranchCode ,DPD_Max, InitialNpaDt,	FinalNpaDt ,InitialAssetClassAlt_Key,	FinalAssetClassAlt_Key ,ProductCode,SourceAlt_Key,'N' AS Exclusion
--------INTO #ProductCodeExclusion
--------from  pro.accountcal 
--------where  Productcode in ('BM08','BM17','SLC5','SLC6','GM06','NSLR','NSLI','NSLB','TREC')


--UPDATE A SET Exclusion=B.Exclusion
--FROM #COVID19BaseDataSourceNpa A
--INNER JOIN #ProductCodeExclusion B
--ON A.SourceSystemCustomerID=B.SourceSystemCustomerID


--------IF OBJECT_ID('TEMPDB..#BranchCodeExclusion') IS NOT NULL
--------      DROP TABLE #BranchCodeExclusion

--------select 
--------AccountEntityID,UcifEntityID,	CustomerEntityID	,CustomerAcID	,RefCustomerID	,SourceSystemCustomerID	,
--------UCIF_ID	,BranchCode ,DPD_Max, InitialNpaDt,	FinalNpaDt ,InitialAssetClassAlt_Key,	FinalAssetClassAlt_Key ,ProductCode,A.SourceAlt_Key,'N' AS Exclusion
--------INTO #BranchCodeExclusion
--------from  pro.accountcal  A
--------INNER JOIN DimSourceDB B
--------ON A.SourceAlt_Key=B.SourceAlt_Key
--------where  BranchCode='801'  AND A.SourceAlt_Key=2


--UPDATE A SET Exclusion=B.Exclusion
--FROM #COVID19BaseDataSourceNpa A
--INNER JOIN #BranchCodeExclusion B
--ON A.SourceSystemCustomerID=B.SourceSystemCustomerID



--------IF OBJECT_ID('TEMPDB..#MurexExclusion') IS NOT NULL
--------      DROP TABLE #MurexExclusion

--------select 
--------AccountEntityID,UcifEntityID,	CustomerEntityID	,CustomerAcID	,RefCustomerID	,SourceSystemCustomerID	,
--------UCIF_ID	,BranchCode ,DPD_Max, InitialNpaDt,	FinalNpaDt ,InitialAssetClassAlt_Key,	FinalAssetClassAlt_Key ,ProductCode,A.SourceAlt_Key,'N' AS Exclusion
--------INTO #MurexExclusion
--------from  pro.accountcal  A
--------INNER JOIN DimSourceDB B ON A.SourceAlt_Key=B.SourceAlt_Key
--------where A.SourceAlt_Key=7


--UPDATE A SET Exclusion=B.Exclusion
--FROM #COVID19BaseDataSourceNpa A
--INNER JOIN #MurexExclusion B
--ON A.SourceSystemCustomerID=B.SourceSystemCustomerID




----IF OBJECT_ID('TEMPDB..#TreasuryProductCodeExclusion') IS NOT NULL
----      DROP TABLE #TreasuryProductCodeExclusion

----select 
----AccountEntityID,UcifEntityID,	CustomerEntityID	,CustomerAcID	,RefCustomerID	,SourceSystemCustomerID	,
----UCIF_ID	,BranchCode ,DPD_Max, InitialNpaDt,	FinalNpaDt ,InitialAssetClassAlt_Key,	FinalAssetClassAlt_Key ,ProductCode,SourceAlt_Key,'N' AS Exclusion
----INTO #TreasuryProductCodeExclusion
----from  pro.accountcal 
----where  Productcode in ('NSLR','NSLI','NSLB','TREC' )


----UPDATE A SET Exclusion=B.Exclusion
----FROM #COVID19BaseDataSourceNpa A
----INNER JOIN #TreasuryProductCodeExclusion B
----ON A.SourceSystemCustomerID=B.SourceSystemCustomerID





----IF OBJECT_ID('TEMPDB..#StockStatementExclusion') IS NOT NULL
----      DROP TABLE #StockStatementExclusion

----select 
----AccountEntityID,UcifEntityID,	CustomerEntityID	,A.CustomerAcID	,a.RefCustomerID	,SourceSystemCustomerID	,
----UCIF_ID	,BranchCode ,DPD_Max, InitialNpaDt,	FinalNpaDt ,InitialAssetClassAlt_Key,	FinalAssetClassAlt_Key ,ProductCode,A.SourceAlt_Key,'N' AS Exclusion
----INTO #StockStatementExclusion
----from  pro.accountcal  A 
----inner join [DATAUPLOAD].[STOCKSTATEMENTDATAUPLOAD]  c 
----on a.REFCUSTOMERID=c.CustomerID
----INNER JOIN DimSourceDB B ON A.SourceAlt_Key=B.SourceAlt_Key
----where c.EffectiveToTimeKey=49999
----AND A.STOCKSTDT IS NOT NULL-- AND FINALASSETCLASSALT_KEY>1


----UPDATE A SET Exclusion=B.Exclusion
----FROM #COVID19BaseDataSourceNpa A
----INNER JOIN #StockStatementExclusion B
----ON A.SourceSystemCustomerID=B.SourceSystemCustomerID




----IF OBJECT_ID('TEMPDB..#REVIEWExclusion') IS NOT NULL
----      DROP TABLE #REVIEWExclusion

----select 
----AccountEntityID,UcifEntityID,	CustomerEntityID	,a.CustomerAcID	,a.RefCustomerID	,SourceSystemCustomerID	,
----UCIF_ID	,BranchCode ,DPD_Max, InitialNpaDt,	FinalNpaDt ,InitialAssetClassAlt_Key,	FinalAssetClassAlt_Key ,ProductCode,A.SourceAlt_Key,'N' AS Exclusion
----INTO #REVIEWExclusion
----from  pro.accountcal  A 
----inner join [DATAUPLOAD].[REVIEWRENEWALDATAUPLOAD]  c 
----on a.REFCUSTOMERID=c.CustomerID
----INNER JOIN DimSourceDB B ON A.SourceAlt_Key=B.SourceAlt_Key
----where c.EffectiveToTimeKey=49999
----and a.ReviewDueDt is not null --and FinalAssetClassAlt_Key>1


----UPDATE A SET Exclusion=B.Exclusion
----FROM #COVID19BaseDataSourceNpa A
----INNER JOIN #REVIEWExclusion B
----ON A.SourceSystemCustomerID=B.SourceSystemCustomerID


----IF OBJECT_ID('TEMPDB..#WriteOffBANKASSETCLASSCodeExclusion') IS NOT NULL
----      DROP TABLE #WriteOffBANKASSETCLASSCodeExclusion

----select 
----AccountEntityID,UcifEntityID,	CustomerEntityID	,CustomerAcID	,RefCustomerID	,SourceSystemCustomerID	,
----UCIF_ID	,BranchCode ,DPD_Max, InitialNpaDt,	FinalNpaDt ,InitialAssetClassAlt_Key,	FinalAssetClassAlt_Key ,ProductCode,SourceAlt_Key,'N' AS Exclusion
----INTO #WriteOffBANKASSETCLASSCodeExclusion
----from  pro.accountcal 
----where  BANKASSETCLASS='WRITEOFF' 


----UPDATE A SET Exclusion=B.Exclusion
----FROM #COVID19BaseDataSourceNpa A
----INNER JOIN #WriteOffBANKASSETCLASSCodeExclusion B
----ON A.SourceSystemCustomerID=B.SourceSystemCustomerID





----IF OBJECT_ID('TEMPDB..#MOCCUSTOMERExclusion') IS NOT NULL
----      DROP TABLE #MOCCUSTOMERExclusion

----select 
----AccountEntityID,UcifEntityID,	CustomerEntityID	,A.CustomerAcID	,a.RefCustomerID	,A.SourceSystemCustomerID	,
----UCIF_ID	,BranchCode ,DPD_Max, InitialNpaDt,	FinalNpaDt ,InitialAssetClassAlt_Key,	FinalAssetClassAlt_Key ,ProductCode,A.SourceAlt_Key,'N' AS Exclusion
----INTO #MOCCUSTOMERExclusion
----from  pro.accountcal  A 
----inner join [DATAUPLOAD].MOCCUSTOMERDATAUPLOAD  c 
----on a.REFCUSTOMERID=c.CustomerID
----where c.EffectiveToTimeKey=49999
----AND C.DateCreated>'2020-07-01'

----UPDATE A SET Exclusion=B.Exclusion
----FROM #MOCCUSTOMERExclusion A
----INNER JOIN #WriteOffBANKASSETCLASSCodeExclusion B
----ON A.SourceSystemCustomerID=B.SourceSystemCustomerID



----update A  SET SysAssetClassAlt_Key=1,SplCatg4Alt_Key=127,SysNPA_Dt=NULL,DegReason='Removed DUE TO COVID',Asset_Norm='ALWYS_STD'
----from pro.CustomerCal a 
----inner join #COVID19BaseDataSourceNpa b on a.SourceSystemCustomerID =b.SourceSystemCustomerID
----where b.Exclusion='Y'

----update A  SET FinalAssetClassAlt_Key=1,SplCatg4Alt_Key=127,FinalNpaDt=NULL,DegReason='Removed DUE TO COVID',Asset_Norm='ALWYS_STD'
----from pro.AccountCal a 
----inner join #COVID19BaseDataSourceNpa b on a.SourceSystemCustomerID =b.SourceSystemCustomerID
----where b.Exclusion='Y'

------EXCEPTION HANDLE WRITE OF ACCOUNT NOT BECOME NPA DUE TO NORMAL COVID PROCESS--

----UPDATE B SET FinalAssetClassAlt_Key=2,SplCatg4Alt_Key=0,DegReason=NULL,Asset_Norm='NORMAL',FinalNpaDt=A.FinalNpaDt   ---Add FinalNpaDt 16-July-2020
----FROM #WriteOffBANKASSETCLASSCodeExclusion A
----INNER JOIN pro.AccountCal B
----ON A.REFCUSTOMERID=B.REFCUSTOMERID
----WHERE B.SplCatg4Alt_Key=127

----UPDATE B SET SysAssetClassAlt_Key=2,SplCatg4Alt_Key=0,DegReason=NULL,Asset_Norm='NORMAL',SysNPA_Dt=A.FinalNpaDt    ---Add SysNPA_Dt 16-July-2020
----FROM #WriteOffBANKASSETCLASSCodeExclusion A
----INNER JOIN pro.CUSTOMERCAL B
----ON A.REFCUSTOMERID=B.REFCUSTOMERID
----WHERE B.SplCatg4Alt_Key=127



 --------UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND
 -------- DESCRIPTION='FOR COVID LOGIC WORK'


 --------------End Covid-19 Implementation on 03July2020-----------------------------



 
--------------Start Covid-19 Implementation Phase II --------------

-------- INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
--------SELECT ORIGINAL_LOGIN(),'FOR COVID Phase II DPD_Moratorium_Adjusted','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


--------Truncate table  DPD_Moratorium_Adjusted

--------INSERT INTO DPD_Moratorium_Adjusted
--------( 
--------BranchCode
--------,UCIF_ID
--------,UcifEntityID
--------,RefCustomerID
--------,SourceSystemCustomerID
--------,CustomerAcID
--------,AccountEntityID
--------,SourceAlt_Key
--------,FacilityType
--------,Frozen_ContiExcessDt
--------,Actual_ContiExcessDt
--------,Adjusted_ContiExcessDt
--------,Frozen_DPD_ContiExcessDt
--------,Actual_DPD_ContiExcessDt
--------,Adjusted_DPD_ContiExcessDt
--------,Frozen_StockStDt
--------,Actual_StockStDt
--------,Adjusted_StockStDt
--------,Frozen_DPD_StockStDt
--------,Actual_DPD_StockStDt
--------,Adjusted_DPD_StockStDt
--------,Frozen_ReviewDueDt
--------,Actual_ReviewDueDt
--------,Adjusted_ReviewDueDt
--------,Frozen_DPD_ReviewDueDt
--------,Actual_DPD_ReviewDueDt
--------,Adjusted_DPD_ReviewDueDt
--------,Frozen_IntNotServicedDt
--------,Actual_IntNotServicedDt
--------,Adjusted_IntNotServicedDt
--------,Frozen_DPD_IntNotServicedDt
--------,Actual_DPD_IntNotServicedDt
--------,Adjusted_DPD_IntNotServicedDt
--------,Frozen_OverDueSinceDt
--------,Actual_OverDueSinceDt
--------,Adjusted_OverDueSinceDt
--------,Frozen_DPD_OverDueSinceDt
--------,Actual_DPD_OverDueSinceDt
--------,Adjusted_DPD_OverDueSinceDt
--------,Exclusion
--------,TimeKey
--------,FinalAssetClassAlt_Key
--------)
--------select 
-------- A.BranchCode
--------,A.UCIF_ID
--------,A.UcifEntityID
--------,A.RefCustomerID
--------,A.SourceSystemCustomerID
--------,A.CustomerAcID
--------,A.AccountEntityID
--------,A.SourceAlt_Key
--------,A.FacilityType
--------,NULL AS Frozen_ContiExcessDt
--------,A.ContiExcessDt AS Actual_ContiExcessDt
--------,NULL AS Adjusted_ContiExcessDt
--------,0 AS Frozen_DPD_ContiExcessDt
--------,0 AS Actual_DPD_ContiExcessDt
--------,0 AS Adjusted_DPD_ContiExcessDt
--------,NULL AS Frozen_StockStDt
--------,A.StockStDt  AS Actual_StockStDt
--------,NULL AS Adjusted_StockStDt
--------,0 AS Frozen_DPD_StockStDt
--------,0 AS Actual_DPD_StockStDt
--------,0 AS Adjusted_DPD_StockStDt
--------,NULL AS Frozen_ReviewDueDt
--------,A.ReviewDueDt AS  Actual_ReviewDueDt
--------,NULL AS Adjusted_ReviewDueDt
--------,0 AS Frozen_DPD_ReviewDueDt
--------,0 AS Actual_DPD_ReviewDueDt
--------,0 AS Adjusted_DPD_ReviewDueDt
--------,NULL AS Frozen_IntNotServicedDt
--------,A.IntNotServicedDt AS Actual_IntNotServicedDt
--------,NULL AS  Adjusted_IntNotServicedDt
--------,0 AS  Frozen_DPD_IntNotServicedDt
--------,0 AS  Actual_DPD_IntNotServicedDt
--------,0 AS  Adjusted_DPD_IntNotServicedDt
--------,NULL AS  Frozen_OverDueSinceDt
--------,A.OverDueSinceDt AS Actual_OverDueSinceDt
--------,NULL AS  Adjusted_OverDueSinceDt
--------,0 AS  Frozen_DPD_OverDueSinceDt
--------,0 AS  Actual_DPD_OverDueSinceDt
--------,0 AS  Adjusted_DPD_OverDueSinceDt
--------,'Y' Exclusion
--------,A.EffectiveFromTimeKey AS TimeKey
--------,A.FinalAssetClassAlt_Key
--------from PRO.ACCOUNTCAL A
--------where A.SourceAlt_Key IN (1,2,4,5,7,8,9) --EXCELUDE FinnOne/GANASEVA/EIFS


--------UPDATE A SET Exclusion=B.Exclusion
--------FROM DPD_Moratorium_Adjusted A
--------INNER JOIN #ProductCodeExclusion B
--------ON A.CustomerAcID=B.CustomerAcID


--------UPDATE A SET Exclusion=B.Exclusion
--------FROM DPD_Moratorium_Adjusted A
--------INNER JOIN #BranchCodeExclusion B
--------ON A.CustomerAcID=B.CustomerAcID



--------UPDATE A SET Exclusion=B.Exclusion
--------FROM DPD_Moratorium_Adjusted A
--------INNER JOIN #MurexExclusion B
--------ON A.CustomerAcID=B.CustomerAcID


--------UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND
--------  DESCRIPTION='FOR COVID Phase II DPD_Moratorium_Adjusted'



--------INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
--------SELECT ORIGINAL_LOGIN(),'FOR COVID Phase II Frozen Dates/DPD Updation','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


--------UPDATE A SET
-------- Frozen_ContiExcessDt=ContiExcessDt
--------,Frozen_StockStDt=StockStDt
--------,Frozen_ReviewDueDt=ReviewDueDt
--------,Frozen_IntNotServicedDt=IntNotServicedDt
--------,Frozen_OverDueSinceDt=OverDueSinceDt
--------,Frozen_DPD_ContiExcessDt=DPD_Overdrawn
--------,Frozen_DPD_StockStDt=DPD_StockStmt
--------,Frozen_DPD_ReviewDueDt=DPD_Renewal
--------,Frozen_DPD_IntNotServicedDt=DPD_IntService
--------,Frozen_DPD_OverDueSinceDt=DPD_Overdue
--------from DPD_Moratorium_Adjusted  A
--------INNER JOIN DPD_Start_Moratorium B
--------ON A.CustomerAcID=B.CustomerAcID
--------WHERE A.TimeKey=@TIMEKEY AND A.TimeKey=@TIMEKEY

--------UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND
-------- DESCRIPTION='FOR COVID Phase II Frozen Dates/DPD Updation'


--------INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
--------SELECT ORIGINAL_LOGIN(),'FOR COVID Phase II Actual DPD Calculation','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


--------/*---------- CALCULATED ALL ACTUAL DPD IN DPD_Moratorium_Adjusted TABLE ---------------------------------------------------------*/

--------UPDATE C SET  C.Actual_DPD_IntNotServicedDt =(CASE WHEN  C.Actual_IntNotServicedDt IS NOT NULL THEN DATEDIFF(DAY,C.Actual_IntNotServicedDt,@PROCESSDATE)  ELSE 0 end)			   
--------             ,C.Actual_DPD_ContiExcessDt= (CASE WHEN   C.Actual_ContiExcessDt IS NOT NULL    THEN DATEDIFF(DAY,C.Actual_ContiExcessDt,  @PROCESSDATE)   ELSE 0 END)
--------			 ,C.Actual_DPD_OverDueSinceDt =   (CASE WHEN  C.Actual_OverDueSinceDt IS NOT NULL   THEN  DATEDIFF(DAY,C.Actual_OverDueSinceDt,  @PROCESSDATE) ELSE 0 END)
--------			-- ,C.Actual_DPD_ReviewDueDt =   (CASE WHEN  C.Actual_ReviewDueDt IS NOT NULL      THEN DATEDIFF(DAY,C.Actual_ReviewDueDt, @PROCESSDATE)      ELSE 0 END)
--------			-- ,C.Actual_DPD_StockStDt= (CASE WHEN  C.Actual_StockStDt IS NOT NULL         THEN   DATEDIFF(DAY,C.Actual_StockStDt,@PROCESSDATE)       ELSE 0 END)
--------FROM PRO.AccountCal A 
--------inner join DPD_Moratorium_Adjusted C ON A.AccountEntityID=C.AccountEntityID 



--------UPDATE C SET Actual_DPD_OverDueSinceDt= isnull((CASE WHEN  A.DebitSinceDt IS NOT NULL   THEN  DATEDIFF(DAY,A.DebitSinceDt,  @PROCESSDATE) ELSE 0 END),0),
--------             Actual_OverDueSinceDt= A.DebitSinceDt
--------FROM PRO.AccountCal A
--------INNER JOIN DimProduct B ON  A.ProductAlt_Key=B.ProductAlt_Key AND (B.EffectiveFromTimeKey<=@TimeKey AND B.EffectiveToTimeKey>=@TimeKey)
--------inner join DPD_Moratorium_Adjusted C ON A.AccountEntityID=C.AccountEntityID
--------WHERE DebitSinceDt IS NOT NULL AND ISNULL(SrcSysProductCode,'N')='SAVING'




---------------------------ECBF DPD increase by 1 day as per user observation Ashish Pathak 21-05-2019-------------
--------UPDATE C SET Actual_DPD_OverDueSinceDt= isnull((CASE WHEN  C.Actual_OverDueSinceDt IS NOT NULL   THEN  DATEDIFF(DAY,C.Actual_OverDueSinceDt,  @PROCESSDATE) ELSE 0 END),0)+0--1 CHNAGED AS PER BANK MAIL DATED 23/03/2022
--------FROM PRO.AccountCal A
--------inner join DPD_Moratorium_Adjusted C ON A.AccountEntityID=C.AccountEntityID
--------WHERE OverDueSinceDt IS NOT NULL and A.SourceAlt_Key = 5

--------/*--------------IF ANY DPD IS NEGATIVE THEN ZERO---------------------------------*/

-------- UPDATE DPD_Moratorium_Adjusted SET Actual_DPD_IntNotServicedDt=0 WHERE isnull(Actual_DPD_IntNotServicedDt,0)<0
-------- UPDATE DPD_Moratorium_Adjusted SET Actual_DPD_ContiExcessDt=0 WHERE isnull(Actual_DPD_ContiExcessDt,0)<0
-------- UPDATE DPD_Moratorium_Adjusted SET Actual_DPD_OverDueSinceDt=0 WHERE isnull(Actual_DPD_OverDueSinceDt,0)<0
-------- UPDATE DPD_Moratorium_Adjusted SET Actual_DPD_ReviewDueDt=0 WHERE isnull(Actual_DPD_ReviewDueDt,0)<0
-------- UPDATE DPD_Moratorium_Adjusted SET Actual_DPD_StockStDt=0 WHERE isnull(Actual_DPD_StockStDt,0)<0


 
--------/*------------DPD IS ZERO FOR  PRODUCT CODE 605 AND 869 EXCLUDE ONLY FOR OUT OF ORDER  ------------------------------------*/

--------UPDATE C SET Actual_DPD_IntNotServicedDt=0,Actual_IntNotServicedDt=NULL   FROM PRO.ACCOUNTCAL  A  INNER JOIN DIMPRODUCT B ON A.PRODUCTALT_KEY=B.PRODUCTALT_KEY
--------  AND (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey >=@TIMEKEY) 
--------  inner join DPD_Moratorium_Adjusted C ON A.AccountEntityID=C.AccountEntityID
--------   WHERE B.PRODUCTCODE IN ('605','869')

--------/*------------DPD IS ZERO FOR  LINE CODE 2940D EXCLUDE ONLY FOR OUT OF ORDER  ------------------------------------*/
--------UPDATE C SET Actual_DPD_IntNotServicedDt=0,Actual_IntNotServicedDt=NULL   FROM PRO.ACCOUNTCAL  A 
--------inner join DPD_Moratorium_Adjusted C ON A.AccountEntityID=C.AccountEntityID
--------WHERE SUBSTRING(LineCode,1,5)='294OD'

-------- /*------------DPD IS ZERO FOR  BACKED BY FD ACCOUNT  EXCLUDE ONLY FOR OUT OF ORDER  ------------------------------------*/
--------UPDATE C SET Actual_DPD_IntNotServicedDt=0,Actual_IntNotServicedDt=NULL   FROM PRO.ACCOUNTCAL  A INNER JOIN YBL_ACS_MIS..ODS_FCR_CH_OD_LIMIT B
-------- ON A.CustomerAcID=B.Cod_acct_no 
-------- inner join DPD_Moratorium_Adjusted C ON A.AccountEntityID=C.AccountEntityID
--------  WHERE B.flg_internal_fd='Y'
 
-------- UPDATE  C SET Actual_OverDueSinceDt=@PROCESSDATE,Actual_DPD_OverDueSinceDt=1
--------		 from pro.accountcal A 
--------		 inner join DPD_Moratorium_Adjusted C ON A.AccountEntityID=C.AccountEntityID
--------		 where A.sourcealt_key=4
--------		 AND (ACCOUNTBLKCODE1 ='A' 	AND CD IN (2,3,4) AND ISNULL(ACCOUNTSTATUS,'N')<>'Z')
--------		AND InitialAssetClassAlt_Key>1	AND ISNULL(Actual_DPD_OverDueSinceDt,0)=0

			

--------UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND
-------- DESCRIPTION='FOR COVID Phase II Actual DPD Calculation'
 



-------- INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
--------SELECT ORIGINAL_LOGIN(),'FOR COVID Phase II Adjusted DPD Calculation','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID



---Contionus Excess since date---

--Existing logic change  on 24/02/2021

----UPDATE A SET ADJUSTED_DPD_CONTIEXCESSDT=CASE WHEN ISNULL(FROZEN_DPD_CONTIEXCESSDT,0)=0 AND ISNULL(ACTUAL_DPD_CONTIEXCESSDT,0)>0 THEN  DATEDIFF(DAY,@EFFECTIVETODATEMOT,  @PROCESSDATE)									
----WHEN ISNULL(FROZEN_DPD_CONTIEXCESSDT,0)>0 AND ISNULL(ACTUAL_DPD_CONTIEXCESSDT,0)>0 AND ACTUAL_DPD_CONTIEXCESSDT<=@MOROTORIUM_DAYS THEN DATEDIFF(DAY,@EFFECTIVETODATEMOT,  @PROCESSDATE)											
----WHEN ISNULL(FROZEN_DPD_CONTIEXCESSDT,0)>0 AND ISNULL(ACTUAL_DPD_CONTIEXCESSDT,0)>0 AND ACTUAL_DPD_CONTIEXCESSDT>@MOROTORIUM_DAYS THEN (ACTUAL_DPD_CONTIEXCESSDT-@MOROTORIUM_DAYS)											
----WHEN ISNULL(FROZEN_DPD_CONTIEXCESSDT,0)>0 AND ISNULL(ACTUAL_DPD_CONTIEXCESSDT,0)=0 THEN 0										
										
----END  
----FROM DPD_MORATORIUM_ADJUSTED  A											
----WHERE FINALASSETCLASSALT_KEY=1 AND EXCLUSION='Y' 
----AND FROZEN_DPD_CONTIEXCESSDT >= 0 AND ACTUAL_DPD_CONTIEXCESSDT > 0 


--------UPDATE A SET ADJUSTED_DPD_CONTIEXCESSDT=CASE WHEN Actual_ContiExcessDt>='2020-09-01' THEN Actual_DPD_ContiExcessDt
--------WHEN Actual_ContiExcessDt >= '2020-03-01' and Actual_ContiExcessDt <='2020-08-31' THEN (Actual_DPD_ContiExcessDt-(DATEDIFF(DAY,Actual_ContiExcessDt,@EffectiveToDateMot )))
--------WHEN Actual_ContiExcessDt<='2020-02-29' THEN (Actual_DPD_ContiExcessDt-@MOROTORIUM_DAYS) else 0
--------END 
--------FROM DPD_MORATORIUM_ADJUSTED A											
--------WHERE FINALASSETCLASSALT_KEY=1 AND EXCLUSION='Y' 
--------AND ISNULL(Actual_DPD_ContiExcessDt,0) > 0 


--------UPDATE  A SET ADJUSTED_DPD_CONTIEXCESSDT=0 FROM DPD_MORATORIUM_ADJUSTED A										
--------WHERE FINALASSETCLASSALT_KEY=1 AND EXCLUSION='Y' AND ACTUAL_DPD_CONTIEXCESSDT = 0 

-----------Interest not service



--UPDATE A SET ADJUSTED_DPD_IntNotServicedDt=CASE WHEN ISNULL(FROZEN_DPD_IntNotServicedDt,0)=0 AND ISNULL(ACTUAL_DPD_IntNotServicedDt,0)>0 THEN  DATEDIFF(DAY,@EFFECTIVETODATEMOT,  @PROCESSDATE)									
--WHEN ISNULL(FROZEN_DPD_IntNotServicedDt,0)>0 AND ISNULL(ACTUAL_DPD_IntNotServicedDt,0)>0 AND ACTUAL_DPD_IntNotServicedDt<=@MOROTORIUM_DAYS THEN DATEDIFF(DAY,@EFFECTIVETODATEMOT,  @PROCESSDATE)											
--WHEN ISNULL(FROZEN_DPD_IntNotServicedDt,0)>0 AND ISNULL(ACTUAL_DPD_IntNotServicedDt,0)>0 AND ACTUAL_DPD_IntNotServicedDt>@MOROTORIUM_DAYS THEN (ACTUAL_DPD_IntNotServicedDt-@MOROTORIUM_DAYS)											
--WHEN ISNULL(FROZEN_DPD_IntNotServicedDt,0)>0 AND ISNULL(ACTUAL_DPD_IntNotServicedDt,0)=0 THEN 0										
										
--END  
--FROM DPD_MORATORIUM_ADJUSTED A											
--WHERE FINALASSETCLASSALT_KEY=1 AND EXCLUSION='Y' 
--AND FROZEN_DPD_IntNotServicedDt >= 0 AND ACTUAL_DPD_IntNotServicedDt > 0 


--------UPDATE A SET ADJUSTED_DPD_IntNotServicedDt=CASE WHEN Actual_IntNotServicedDt>='2020-09-01' THEN ACTUAL_DPD_IntNotServicedDt
--------WHEN Actual_IntNotServicedDt >= '2020-03-01' and Actual_IntNotServicedDt <='2020-08-31' THEN (ACTUAL_DPD_IntNotServicedDt-(DATEDIFF(DAY,Actual_IntNotServicedDt,@EffectiveToDateMot )))
--------WHEN Actual_IntNotServicedDt<='2020-02-29' THEN (ACTUAL_DPD_IntNotServicedDt-@MOROTORIUM_DAYS) else 0
--------END 
--------FROM DPD_MORATORIUM_ADJUSTED A											
--------WHERE FINALASSETCLASSALT_KEY=1 AND EXCLUSION='Y' 
--------AND ISNULL(ACTUAL_DPD_IntNotServicedDt,0) > 0 





--------UPDATE  A SET ADJUSTED_DPD_IntNotServicedDt=0 FROM DPD_MORATORIUM_ADJUSTED A										
--------WHERE FINALASSETCLASSALT_KEY=1 AND EXCLUSION='Y' AND ACTUAL_DPD_IntNotServicedDt = 0  and SourceAlt_Key=1



-------Overdue since date


--UPDATE A SET ADJUSTED_DPD_OverDueSinceDt=CASE WHEN ISNULL(FROZEN_DPD_OverDueSinceDt,0)=0 AND ISNULL(ACTUAL_DPD_OverDueSinceDt,0)>0 THEN  DATEDIFF(DAY,@EFFECTIVETODATEMOT,  @PROCESSDATE)									
--WHEN ISNULL(FROZEN_DPD_OverDueSinceDt,0)>0 AND ISNULL(ACTUAL_DPD_OverDueSinceDt,0)>0 AND ACTUAL_DPD_OverDueSinceDt<=@MOROTORIUM_DAYS THEN DATEDIFF(DAY,@EFFECTIVETODATEMOT,  @PROCESSDATE)											
--WHEN ISNULL(FROZEN_DPD_OverDueSinceDt,0)>0 AND ISNULL(ACTUAL_DPD_OverDueSinceDt,0)>0 AND ACTUAL_DPD_OverDueSinceDt>@MOROTORIUM_DAYS THEN (ACTUAL_DPD_OverDueSinceDt-@MOROTORIUM_DAYS)											
--WHEN ISNULL(FROZEN_DPD_OverDueSinceDt,0)>0 AND ISNULL(ACTUAL_DPD_OverDueSinceDt,0)=0 THEN 0										
										
--END  
--FROM DPD_MORATORIUM_ADJUSTED A											
--WHERE FINALASSETCLASSALT_KEY=1 AND EXCLUSION='Y' 
--AND FROZEN_DPD_OverDueSinceDt >= 0 AND ACTUAL_DPD_OverDueSinceDt > 0 

--------UPDATE A SET ADJUSTED_DPD_OverDueSinceDt=CASE WHEN Actual_OverDueSinceDt>='2020-09-01' THEN Actual_DPD_OverDueSinceDt
--------WHEN Actual_OverDueSinceDt >= '2020-03-01' and Actual_OverDueSinceDt <='2020-08-31' THEN (Actual_DPD_OverDueSinceDt-(DATEDIFF(DAY,Actual_OverDueSinceDt,@EffectiveToDateMot )))
--------WHEN Actual_OverDueSinceDt<='2020-02-29' THEN (ACTUAL_DPD_OverDueSinceDt-@MOROTORIUM_DAYS)
-------- else 0 END					
								
  
--------FROM DPD_MORATORIUM_ADJUSTED A											
--------WHERE FINALASSETCLASSALT_KEY=1 AND EXCLUSION='Y' 
-------- AND isnull(ACTUAL_DPD_OverDueSinceDt,0) > 0 



--------UPDATE  A SET ADJUSTED_DPD_OverDueSinceDt=0 FROM DPD_MORATORIUM_ADJUSTED A										
--------WHERE FINALASSETCLASSALT_KEY=1 AND EXCLUSION='Y' AND ACTUAL_DPD_OverDueSinceDt =0




--------UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND
--------DESCRIPTION='FOR COVID Phase II Adjusted DPD Calculation'



--------INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
--------SELECT ORIGINAL_LOGIN(),'FOR COVID Phase II Adjusted Dates Calculation','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

------------Remove +1 condition on 19-Mar-2021 as per issue mail from user (pramod) 08-Mar-2021

--------UPDATE A SET A.Adjusted_ContiExcessDt=DATEADD(DAY,-Adjusted_DPD_ContiExcessDt,@PROCESSINGDATE) FROM DPD_Moratorium_Adjusted A WHERE  Exclusion='Y' AND Adjusted_DPD_ContiExcessDt >0
--------UPDATE A SET A.Adjusted_IntNotServicedDt=DATEADD(DAY,-Adjusted_DPD_IntNotServicedDt,@PROCESSINGDATE) FROM DPD_Moratorium_Adjusted A  WHERE  Exclusion='Y' AND Adjusted_DPD_IntNotServicedDt >0
--------UPDATE A SET A.Adjusted_OverDueSinceDt=DATEADD(DAY,-Adjusted_DPD_OverDueSinceDt,@PROCESSINGDATE) FROM DPD_Moratorium_Adjusted A WHERE Exclusion='Y' AND Adjusted_DPD_OverDueSinceDt >0


--------End 19-Mar-2021

-- For new account disburese during the monatorium ---
----Commented on 24-Feb-2021

--update a set Adjusted_ContiExcessDt='2020-09-01' from DPD_Moratorium_Adjusted a inner join  pro.accountcal b on a.AccountEntityID=b.AccountEntityID
--where AcOpenDt>=@EffectiveFromDateMot and AcOpenDt <=@EffectiveToDateMot and ContiExcessDt>=@EffectiveFromDateMot and ContiExcessDt <=@EffectiveToDateMot and Exclusion='Y'

--update a set Adjusted_IntNotServicedDt='2020-09-01'from DPD_Moratorium_Adjusted a inner join  pro.accountcal b on a.AccountEntityID=b.AccountEntityID
--where AcOpenDt>=@EffectiveFromDateMot and AcOpenDt <=@EffectiveToDateMot and IntNotServicedDt>=@EffectiveFromDateMot and IntNotServicedDt <=@EffectiveToDateMot and Exclusion='Y'

--update a set Adjusted_OverDueSinceDt='2020-09-01'from DPD_Moratorium_Adjusted a inner join  pro.accountcal b on a.AccountEntityID=b.AccountEntityID
--where AcOpenDt>=@EffectiveFromDateMot and AcOpenDt <=@EffectiveToDateMot and OverDueSinceDt>=@EffectiveFromDateMot and OverDueSinceDt <=@EffectiveToDateMot and Exclusion='Y'






--------UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND
--------  DESCRIPTION='FOR COVID Phase II Adjusted Dates Calculation'



--------INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
--------SELECT ORIGINAL_LOGIN(),'FOR COVID Phase II Update Dates In Pro.Accountcal','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

--------UPDATE  A 
--------		SET    Adjusted_ContiExcessDt=Actual_ContiExcessDt
--------               ,Adjusted_IntNotServicedDt=Actual_IntNotServicedDt
--------			   , Adjusted_OverDueSinceDt=Actual_OverDueSinceDt
--------			   , Adjusted_ReviewDueDt=Actual_ReviewDueDt
--------			   , Adjusted_StockStDt=Actual_StockStDt
--------			    FROM DPD_Moratorium_Adjusted A WHERE Exclusion='N'

--------	UPDATE  A 
--------		SET    Adjusted_ContiExcessDt=Actual_ContiExcessDt
--------               ,Adjusted_IntNotServicedDt=Actual_IntNotServicedDt
--------			   , Adjusted_OverDueSinceDt=Actual_OverDueSinceDt
--------			   , Adjusted_ReviewDueDt=Actual_ReviewDueDt
--------			   , Adjusted_StockStDt=Actual_StockStDt
--------			    FROM DPD_Moratorium_Adjusted A WHERE FinalAssetClassAlt_Key>1

-----------Logic to handle due date after 01-Sep-2020

 
--------update a set Adjusted_ContiExcessDt=b.ContiExcessDt from DPD_Moratorium_Adjusted a inner join  pro.accountcal b on a.AccountEntityID=b.AccountEntityID

--------where ContiExcessDt>@EffectiveToDateMot and Exclusion='Y' and ISNULL(FROZEN_DPD_CONTIEXCESSDT,0) =0

 
--------update a set Adjusted_IntNotServicedDt=b.IntNotServicedDt   from DPD_Moratorium_Adjusted a inner join  pro.accountcal b on a.AccountEntityID=b.AccountEntityID

--------where IntNotServicedDt >@EffectiveToDateMot and Exclusion='Y' and ISNULL(FROZEN_DPD_IntNotServicedDt,0)=0

 
--------update a set Adjusted_OverDueSinceDt=b.OverDueSinceDt  from DPD_Moratorium_Adjusted a inner join  pro.accountcal b on a.AccountEntityID=b.AccountEntityID

--------where  OverDueSinceDt >@EffectiveToDateMot and Exclusion='Y' and ISNULL(FROZEN_DPD_OverDueSinceDt,0)=0



			
--------	UPDATE B SET 
--------			CONTIEXCESSDT=ADJUSTED_CONTIEXCESSDT
--------			,INTNOTSERVICEDDT=ADJUSTED_INTNOTSERVICEDDT
--------			,OVERDUESINCEDT=ADJUSTED_OVERDUESINCEDT
--------			FROM DPD_MORATORIUM_ADJUSTED  A
--------			INNER JOIN PRO.ACCOUNTCAL B
--------			ON A.CUSTOMERACID=B.CUSTOMERACID
--------			WHERE EXCLUSION='Y'




--------UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND
--------  DESCRIPTION='FOR COVID Phase II Update Dates In Pro.Accountcal'


  /* PHASE III ENPA WORK  Added By Triloki Khanna 04/06/2021*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'Insert ACCOUNTSTATUSDebitFreeze In Pro.Accountcal','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE  A SET ACCOUNTSTATUSDebitFreeze=b.AccountStatus
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS.dbo.CustomerAccountDetail B 
ON A.CUSTOMERACID=B.ACCOUNTID

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND
  DESCRIPTION='Insert ACCOUNTSTATUSDebitFreeze In Pro.Accountcal'



  /*---------UPDATE PRVQTRRV AT CUSTOMER LEVEL--------------------- */    
 
 INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
 SELECT ORIGINAL_LOGIN(),'UPDATE PRVQTRRV AT CUSTOMER LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID


IF OBJECT_ID('TEMPDB..#PRVQTRRV') IS NOT NULL
DROP TABLE #PRVQTRRV

select CustomerEntityID,CurntQtrRv
into #PRVQTRRV
from pro.CustomerCal_Hist   A
--where A.EffectiveFromTimeKey=@LastFinYearKey and A.EffectiveToTimeKey=@LastFinYearKey 
where A.EffectiveFromTimeKey=@LastQtrDateKey and A.EffectiveToTimeKey=@LastQtrDateKey ---Change Condition as per New BRD (1.01 BDTS_Business_Case_ENPA_Security Erosion) Dated 30092022 Triloki Khanna 
and ISNULL(CurntQtrRv,0)>0 


 
UPDATE B SET PrvQtrRV=A.CurntQtrRv
FROM #PRVQTRRV A
INNER JOIN pro.CustomerCal B
ON A.CustomerEntityID=B.CustomerEntityID


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND
  DESCRIPTION='UPDATE PRVQTRRV AT CUSTOMER LEVEL'


  --------As per bank mail 16/03/2022 Modification  ----------

UPDATE A SET PrincOutStd= (ISNULL(B.TOTALBALANCEOUTSTANDINGINR,0.00) * -1)- isnull(B.INTERESTOVERDUE,0)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B
ON A.CUSTOMERACID=B.ACCOUNTID
where b.SourceSystemName='FCR' and A.SourceAlt_Key=1

---FCC Added logic Audit Point
UPDATE A SET Balance= ISNULL(B.PrincipalOutstanding,0.00) + isnull(B.INTERESTOVERDUE,0)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B
ON A.CUSTOMERACID=B.ACCOUNTID
where b.SourceSystemName='FCC' and A.SourceAlt_Key=2

---Added Penal Int on Balance for Finnone 11MAR2024
UPDATE A SET Balance = (ISNULL(A.Balance,0.00)) + ISNULL(B.OTHEROVERDUE,0.00)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B
ON A.CUSTOMERACID=B.ACCOUNTID
where b.SourceSystemName='FINNONE' and A.SourceAlt_Key=3


UPDATE A SET IntOverdue= ISNULL(B.TOTALBALANCEOUTSTANDINGINR,0.00)- ISNULL(B.PRINCIPALOUTSTANDING,0.00)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B
ON A.CUSTOMERACID=B.ACCOUNTID
where b.SourceSystemName='VISIONPLUS'




---Cred Pos= PRINCIPALOUTSTANDING + PRINCIPALOVERDUE

UPDATE A SET PrincOutStd= ISNULL(B.PrincipalOutstanding,0.00)+isnull(B.PrincipalOverdue,0)
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_CA B
ON A.CUSTOMERACID=B.ACCOUNTID
where A.SourceAlt_Key=11

/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/
--UPDATE A SET PrincOutStd= ISNULL(B.PrincipalOutstanding,0.00)+isnull(B.PrincipalOverdue,0)
--FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..AccountData_FinSmart B
--ON A.CUSTOMERACID=B.ACCOUNTID
--where A.SourceAlt_Key=12
/*------- FOR SFIN AccountData_FinSmart 15102023---------------------------------*/

  --------------END  Covid-19 Implementation Phase II --------------

   
 
 INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
 SELECT ORIGINAL_LOGIN(),'UPDATE ALWYS_STD AT Account Level Where Secured_FD_CC','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID


UPDATE  A SET FinalAssetClassAlt_Key=1,FinalNpaDt=NULL,ASSET_NORM='ALWYS_STD'
FROM PRO.AccountCal A
INNER JOIN YBL_ACS_MIS.[DBO].ACCOUNTDATA B ON A.CustomerAcID=B.AccountID
WHERE B.SourceSystemName='VISIONPLUS' AND B.Secured_FD_CC='SE'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND
 DESCRIPTION='UPDATE ALWYS_STD AT Account Level Where Secured_FD_CC'
 


 --------As Per Bank Mail dated 01/09/2022 Modification Done By Triloki Khanna--------
  INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
 SELECT ORIGINAL_LOGIN(),'UPDATE Buyout_Code AT Account Level','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID


 UPDATE A SET A.Buyout_Code=B.Buyout_Code
FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS_MIS..ACCOUNTDATA B ON A.CUSTOMERACID=B.ACCOUNTID
INNER JOIN DIMSOURCEDB C ON C.SOURCEALT_KEY=A.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
WHERE C.SOURCENAME='FINNONE'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND
 DESCRIPTION='UPDATE Buyout_Code AT Account Level'

  INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
 SELECT ORIGINAL_LOGIN(),'UPDATE BuyoutPercentageSold AT Account Level','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID


 UPDATE A SET 
A.balance=isnull(A.balance,0)*C.PercentageSold/100
,A.BalanceInCrncy=isnull(A.BalanceInCrncy,0)*C.PercentageSold/100
,A.CurrentLimit=isnull(A.CurrentLimit,0)*C.PercentageSold/100
,A.DisbAmount=isnull(A.DisbAmount,0)*C.PercentageSold/100
,A.DrawingPower=isnull(A.DrawingPower,0)*C.PercentageSold/100
,A.GovtGtyAmt=isnull(A.GovtGtyAmt,0)*C.PercentageSold/100
,A.IntOverdue=isnull(A.IntOverdue,0)*C.PercentageSold/100
,A.OtherOverdue=isnull(A.OtherOverdue,0)*C.PercentageSold/100
,A.OverdueAmt=isnull(A.OverdueAmt,0)*C.PercentageSold/100
,A.PrincOutStd=isnull(A.PrincOutStd,0)*C.PercentageSold/100
,A.PrincOverdue=isnull(A.PrincOverdue,0)*C.PercentageSold/100
,A.UnAdjSubSidy=isnull(A.UnAdjSubSidy,0)*C.PercentageSold/100
,A.WriteOffAmount=isnull(A.WriteOffAmount,0)*C.PercentageSold/100
,A.Mtm_Value=isnull(A.Mtm_Value,0)*C.PercentageSold/100
,A.SecurityValue=isnull(A.SecurityValue,0)*C.PercentageSold/100
,A.DFVAmt=isnull(A.DFVAmt,0)*C.PercentageSold/100
,A.DerecognisedInterest1=isnull(A.DerecognisedInterest1,0)*C.PercentageSold/100
,A.DerecognisedInterest2=isnull(A.DerecognisedInterest2,0)*C.PercentageSold/100

FROM PRO.ACCOUNTCAL A 
INNER JOIN DIMSOURCEDB B ON A.SOURCEALT_KEY=B.SOURCEALT_KEY
AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
INNER JOIN DimAssignmentDealMaster C ON A.SOURCEALT_KEY=C.SOURCEALT_KEY
AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND A.Buyout_Code=C.AssignmentDeal
 WHERE  ISNULL(C.PercentageSold,0)>0
--AND A.FinalAssetClassAlt_Key>1 


 IF OBJECT_ID('TEMPDB..#CUSTMOCDATA') IS NOT NULL
   DROP TABLE #CUSTMOCDATA
   
 SELECT CUSTOMERENTITYID ,SUM(ISNULL(BALANCE,0))  AS BALANCE  INTO #CUSTMOCDATA        FROM PRO.ACCOUNTCAL
 GROUP BY CUSTOMERENTITYID

 UPDATE PRO.CUSTOMERCAL SET TOTOSCUST=0
UPDATE A SET TOTOSCUST=BALANCE FROM PRO.CUSTOMERCAL A
INNER  JOIN #CUSTMOCDATA B
ON A.CUSTOMERENTITYID=B.CUSTOMERENTITYID

 UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND
 DESCRIPTION='UPDATE BuyoutPercentageSold AT Account Level'
 

  ---New Condition Added as Per bank BRD 01/09/2022 Modification done by Triloki Khanna 07/09/2022

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'Update Pos For Npa Account For Murex','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET  A.PRINCOUTSTD= CASE WHEN ISNULL(B.CURRENTCAPITAL1STLEG,0)<ISNULL(B.MTM_VALUE,0) THEN  isnull(B.CURRENTCAPITAL1STLEG,0) ELSE isnull(B.MTM_VALUE,0) END 
FROM PRO.ACCOUNTCAL  A INNER JOIN YBL_ACS_MIS..ODS_MUREX_DPD_NPA B 
ON A.CUSTOMERACID=CAST(TRNINTERNALTRADENO AS VARCHAR(50))
where B.EXPOSURETYPE in('BOND_NON_SLR', 'BOND_NON-SLR','BOND_IBU_BOND') 
  --and A.FinalAssetClassAlt_Key>1
 
 UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='Update Pos For Npa Account For Murex'


INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'Update CustomerPartnerSegment Data','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET  A.CustomerPartnerSegment=b.CustomerPartnerSegment
FROM PRO.CustomerCal  A INNER JOIN YBL_ACS_MIS.dbo.CUSTOMERDATA B 
ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID

 
 UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='Update CustomerPartnerSegment Data'



 --------------------

   DROP TABLE #TEMPTABLEFINNONE_ASSETCLASS
   DROP TABLE #MAXNPADPDFINNONE
   DROP TABLE #TEMPTABLEGANASEVA_ASSETCLASS
   DROP TABLE #TEMPTABLEFCC_ASSETCLASS
   --DROP TABLE #TEMPTABLE_VISIONPLUS_ASSETCLASS
   --DROP TABLE #MAXDPD
   DROP TABLE #TEMPTABLEPANCARD
   DROP TABLE #TEMPTABLE_ADHARCARD
   DROP TABLE #TEMPTABLE_JOINTACCOUNTFLAG
   DROP TABLE #TEMPTABLEREFCUSTOMERID
   DROP TABLE #TEMPTABLE_UCFIC
   DROP TABLE #TEMPTABLEREFCUSTOMERID_MUREX
   DROP TABLE #TEMPTABLEMINDATE
   DROP TABLE #TEMPTABLEUCIFID
   DROP TABLE #TRIMLINECODE
   DROP TABLE #TEMPTABLEINTERESTCALCDATE
   DROP TABLE #TEMPTABLEMINDATEECBF
   DROP TABLE #TEMPTABLEMINOVERDUEDT
   DROP TABLE #TEMPTABLE_BILL_DETAIL
   --DROP TABLE #TEMPODS_VW_SECURITY_FOR_NPASYSTEM
   --DROP TABLE #IMAXID_CCUBETOTALCOUNT
   DROP TABLE #TEMPTABLE_UCFIC1
   DROP TABLE #STOCKSTDT
   DROP TABLE #REVIEWDT   
   DROP TABLE #CUSTMOCDATA
   DROP TABLE #CHFL
   DROP TABLE #TEMPTABLEFCC_ASSETCLASSWF
   DROP TABLE #TEMPTABLEMurex_ASSETCLASS
   DROP TABLE #TEMPTABLE_ECBFInt   -----Added on 01-Feb-2021
   DROP TABLE #TEMPTABLEMINOVERDUEDTecbf ----Added on 12-Feb-2021
   DROP TABLE #TEMPTABLE_VISIONPLUS_SourceSystemCustomerID
   DROP TABLE #TEMPTABLEEIFSECFS_ASSETCLASS 
   DROP TABLE #TEMPTABLEEIFSECFS_ASSETCLASSWRITEOFF
  -- DROP TABLE #TEMPAdvSecurityDetailCollateralTag
  -- DROP TABLE #FDBackedBalanceAccountTotal
  -- DROP TABLE #FDBackedBalanceUcifTotal
   
  
 --------------START Covid-19 Implementation on 03July2020-----------------------------
 ----   DROP TABLE #COVID19BaseDataSourceNpa
	----DROP TABLE #ProductCodeExclusion
	----DROP TABLE #BranchCodeExclusion
	----DROP TABLE #MurexExclusion
	----DROP TABLE #TreasuryProductCodeExclusion
	----DROP TABLE #StockStatementExclusion
	----DROP TABLE #REVIEWExclusion
	----DROP TABLE #WriteOffBANKASSETCLASSCodeExclusion
	----DROP TABLE #MOCCUSTOMERExclusion


	
 --------------End Covid-19 Implementation on 03July2020-----------------------------
 	
 ------Insert data in Fraud Details in table
        INSERT INTO FraudAccountsDetails
                (
                 UCIF_ID
                ,CustomerID
                ,CustomerAcID
                ,DateofFraud
                ,AmountofFraud
                ,InitialNpaDt
                ,FinalNpaDt
                ,InitialAssetClassAlt_Key
                ,FinalAssetClassAlt_Key
                ,ActualAssetClassAlt_Key
                ,ProvisionPer
                ,QTR
                ,ProcessDate
				,ProvisionAmtAtFraud
                ,EffectiveFromTimeKey
                ,EffectiveToTimeKey
                
                )
                select
                 B.UCIF_ID AS UCIF_ID
                ,B.REFCUSTOMERID as CustomerID
                ,A.CustomerAcID
                ,B.FRAUDDT AS DateofFraud
                ,B.FRAUDAMOUNT as AmountofFraud
                ,A.InitialNpaDt
                ,A.FinalNpaDt
                ,A.InitialAssetClassAlt_Key
                ,A.FinalAssetClassAlt_Key
                , A.InitialAssetClassAlt_Key as ActualAssetClassAlt_Key
                ,NULL AS ProvisionPer
                ,0 as QTR
                ,@PROCESSINGDATE
				,ISNULL(A.PROVSECURED,0)+ISNULL(A.PROVUNSECURED,0) AS ProvisionAmtAtFraud
                ,B.EffectiveFromTimeKey AS EffectiveFromTimeKey
                ,49999 AS EffectiveToTimeKey
                from PRO.ACCOUNTCAL A
                INNER JOIN PRO.CustomerCal B
                ON A.SOURCESYSTEMCUSTOMERID=B.SOURCESYSTEMCUSTOMERID
                LEFT JOIN FraudAccountsDetails C ON A.CustomerAcID=C.CustomerAcID
				--Left JOIN CURDAT.ADVCUSTNPADETAIL d on d.refcustomerID=B.REFCUSTOMERID and d.refcustomerID=a.REFCUSTOMERID
				--AND D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY
                where A.SPLCATG1ALT_KEY=870 AND C.CustomerAcID IS NULL
                
                ---- insert all accounts which are tagged at ucif level with Fraud accounts -- PRANAY,AMAR SIR --2022-12-06
                IF OBJECT_ID('TEMPDB..#UCIF_ID') IS NOT NULL
                DROP TABLE #UCIF_ID
                SELECT DISTINCT UCIF_ID into #UCIF_ID FROM FraudAccountsDetails
                INSERT INTO FraudAccountsDetails
                (
                 UCIF_ID
                ,CustomerID
                ,CustomerAcID
                ,DateofFraud
                ,AmountofFraud
                ,InitialNpaDt
                ,FinalNpaDt
                ,InitialAssetClassAlt_Key
                ,FinalAssetClassAlt_Key
                ,ActualAssetClassAlt_Key
                ,ProvisionPer
                ,QTR
                ,ProcessDate
				,ProvisionAmtAtFraud
                ,EffectiveFromTimeKey
                ,EffectiveToTimeKey
                )
                SELECT
                 A.UCIF_ID AS UCIF_ID
                ,A.RefCustomerID as CustomerID
                ,A.CustomerAcID
                ,NULL AS DateofFraud
                ,NULL as AmountofFraud
                ,A.InitialNpaDt
                ,A.FinalNpaDt
                ,A.InitialAssetClassAlt_Key
                ,A.FinalAssetClassAlt_Key
                ,A.InitialAssetClassAlt_Key as ActualAssetClassAlt_Key
                ,NULL AS ProvisionPer
                ,0 as QTR
                ,@PROCESSINGDATE
				,ISNULL(A.PROVSECURED,0)+ISNULL(A.PROVUNSECURED,0) as ProvisionAmtAtFraud
                ,A.EffectiveFromTimeKey AS EffectiveFromTimeKey
                ,49999 AS EffectiveToTimeKey
                from PRO.ACCOUNTCAL A
                INNER JOIN #UCIF_ID B ON A.UCIF_ID=B.UCIF_ID
                LEFT JOIN FraudAccountsDetails C ON A.CustomerAcID=C.CustomerAcID
			    --Left JOIN CURDAT.ADVCUSTNPADETAIL d on d.refcustomerID=C.REFCUSTOMERID and d.refcustomerID=a.REFCUSTOMERID
				--AND D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY
                WHERE  C.CustomerAcID IS NULL
                
--IF( (month(@PROCESSINGDATE) in(3,12) and day(@PROCESSINGDATE)=31 )
--       OR (month(@PROCESSINGDATE) in(6,9) and day(@PROCESSINGDATE)=30 ))
--AND
IF(
        (select CurQtrDate from sysdaymatrix
                where date =@PrevProcessingDate)
        <=
        (select CurQtrDate from sysdaymatrix
        where date =@PROCESSINGDATE)
)
BEGIN
                
        --update a set QTR= isnull(QTR,0)+1
        --        FROM FraudAccountsDetails a
        --        where isnull(QTR,0)<4


                
        update a set QTR= case when isnull(QTR,0)=0 then isnull(QTR,0)+1
		 when isnull(QTR,0)<>0  and (select CurQtrDate from sysdaymatrix
                where date =@PrevProcessingDate)=(select CurQtrDate from sysdaymatrix
        where date =@PROCESSINGDATE) then isnull(QTR,0)
		 else isnull(QTR,0)+1 end
                FROM FraudAccountsDetails a
                where isnull(QTR,0)<4
                
        UPDATE B SET
            B.FinalAssetClassAlt_Key=A.CUST_ASSETCLASSALT_KEY
			,B.FinalNpaDt=A.NPADT 
			,B.ActualAssetClassAlt_Key=A.CUST_ASSETCLASSALT_KEY --,B.InitialAssetClassAlt_Key=A.CUST_ASSETCLASSALT_KEY   /*Changed by D2k 19FEB24 - Shubham - changed the join */
	FROM CURDAT.ADVCUSTNPADETAIL A INNER JOIN FraudAccountsDetails B ON A.RefCustomerID=B.CustomerID
		AND A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY
		AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
	WHERE FinalAssetClassAlt_Key is not null and QTR=1 and A.CUST_ASSETCLASSALT_KEY<>6


/*Changed by D2k 19FEB24 - Shubham - added below code */
 UPDATE B SET B.ActualAssetClassAlt_Key=1
	 FROM FraudAccountsDetails B left Outer JOIN CURDAT.ADVCUSTNPADETAIL A ON A.RefCustomerID=B.CustomerID
	AND A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY
	AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
	where FinalAssetClassAlt_Key is not null 
		and QTR=1 and A.CUST_ASSETCLASSALT_KEY<>6 and a.RefCustomerID is null




END
------ update and revert Asset class in fraud table, AccountCal and customerCal --- 2022-12-05 Amar sir & Pranay
update  a set ProcessDate=@PROCESSINGDATE from FraudAccountsDetails a where ProcessDate=@PrevProcessingDate
UPDATE A SET
            a.FinalAssetClassAlt_Key=B.FinalAssetClassAlt_Key
                        ,A.FinalNpaDt=B.FinalNpaDt                
FROM pro.AccountCal A INNER JOIN FraudAccountsDetails B ON A.RefCustomerID=B.CustomerID
AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
--select FinalAssetClassAlt_Key,FinalNpaDt,*  delete from FraudAccountsDetails
UPDATE A SET
            a.SysAssetClassAlt_Key=B.FinalAssetClassAlt_Key
                        ,A.SysNPA_Dt=B.FinalNpaDt                
FROM pro.CustomerCal A INNER JOIN FraudAccountsDetails B ON A.RefCustomerID=B.CustomerID
AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
------------------------------------------------------
--select * from FraudAccountsDetails
--select ProvisionSecured from DimProvision_Seg where Segment='IRAC'
 -------------------------------------------------------

;WITH FraudAccountsDetails_CTE AS  
(  
   SELECT *, ROW_NUMBER() over (PARTITION BY Customeracid ORDER BY entitykey) as abc  
   FROM FraudAccountsDetails  
)  
DELETE FROM FraudAccountsDetails_CTE WHERE abc >1 


;WITH accountcal_CTE AS  
(  
   SELECT *, ROW_NUMBER() over (PARTITION BY AccountEntityID ORDER BY entitykey) as abcd  
   FROM pro.accountcal 
)  
DELETE FROM accountcal_CTE WHERE abcd>1 

IF OBJECT_ID('TEMPDB..#PrevDayDegDate') IS NOT NULL
DROP TABLE #PrevDayDegDate

select CustomerEntityID,DegDate
into #PrevDayDegDate
from pro.CustomerCal_Hist a
where A.EffectiveFromTimeKey=@TIMEKEY-1 and DegDate is not null

update a set DegDate=b.DegDate
from pro.CustomerCal a
inner join #PrevDayDegDate b
on a.CustomerEntityID=b.CustomerEntityID


IF OBJECT_ID('TEMPDB..##TempTableCurrentDayFreshMark') IS NOT NULL
DROP TABLE ##TempTableCurrentDayFreshMark

select UcifEntityID,CustomerEntityID,RefCustomerID,PANNO,degdate 
into ##TempTableCurrentDayFreshMark
from YBL_ACS.pro.CustomerCal 
where DegDate is not null

   
update b set degdate=a.degdate
from ##TempTableCurrentDayFreshMark a
inner join YBL_ACS.pro.CustomerCal  b
on a.UcifEntityID=b.UcifEntityID
where b.degdate is null


update b set degdate=a.degdate
from ##TempTableCurrentDayFreshMark a
inner join YBL_ACS.pro.CustomerCal  b
on a.RefCustomerID=b.RefCustomerID
where b.degdate is null


update b set degdate=a.degdate
from ##TempTableCurrentDayFreshMark a
inner join YBL_ACS.pro.CustomerCal  b
on a.PANNO=b.PANNO
where b.degdate is null

/*FOR OTS CR ADDED BY ZAIN  ON LOCAL 20250213*/
/*INSERTING OTS DATA FROM STAGE TO MAIN*/

UPDATE A SET A.EFFECTIVETOTIMEKEY=@TIMEKEY-1 
	FROM YBL_ACS.DBO.OTS_DATA A INNER JOIN YBL_ACS_MIS.DBO.OTS_DATA B ON A.ACCOUNTID=B.ACCOUNTID
	WHERE (ISNULL(A.OTS_SETTLEMENT_FLAG,'')<>ISNULL(B.OTS_SETTLEMENT_FLAG ,'')
			OR 
			ISNULL(A.OTS_SETTLEMENT_DATE,'')<>ISNULL(B.OTS_SETTLEMENT_DATE,'')
			)

 INSERT INTO YBL_ACS.DBO.OTS_DATA(
					SOURCESYSTEMNAME
					,FCR_CUSTOMERID
					,ACCOUNTID
					,OTS_SETTLEMENT_FLAG
					,OTS_SETTLEMENT_DATE
					,ETL_DATE
					,DATA_DATE
					,EFFECTIVEFROMTIMEKEY
					,EFFECTIVETOTIMEKEY
					)
				SELECT SOURCESYSTEMNAME
					,FCR_CUSTOMERID
					,ACCOUNTID
					,OTS_SETTLEMENT_FLAG
					,OTS_SETTLEMENT_DATE
					,ETL_DATE
					,DATA_DATE
					,@TIMEKEY
					,49999
				FROM YBL_ACS_MIS.DBO.OTS_DATA
				WHERE ACCOUNTID NOT IN (SELECT ACCOUNTID FROM YBL_ACS.DBO.OTS_DATA
										WHERE EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)

UPDATE A SET A.OTS_Settlement_Flag=B.OTS_Settlement_Flag,A.OTS_Settlement_Date=B.OTS_Settlement_Date,A.Asset_Norm=CASE WHEN B.OTS_Settlement_Flag='Y' THEN 'ALWYS_NPA' ELSE 'NORMAL' END
	FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS.DBO.OTS_DATA B 
	ON A.CustomerAcID=B.ACCOUNTID
	WHERE A.EffectiveFromTimeKey<=@TIMEKEY
			AND A.EffectiveToTimeKey>=@TIMEKEY
			AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY
			AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
			AND A.Asset_Norm<>'ALWYS_STD'

UPDATE A SET EffectiveToTimeKey=@TIMEKEY-1
	FROM CURDAT.AdvCustNPAdetail A 
		INNER JOIN PRO.ACCOUNTCAL B ON A.RefCustomerID=B.RefCustomerID
		INNER JOIN YBL_ACS_MIS..OTS_DATA C ON B.CustomerAcID=C.AccountID
	WHERE A.EffectiveFromTimeKey<=@TIMEKEY
		AND A.EffectiveToTimeKey>=@TIMEKEY
		AND ISNULL(C.OTS_Settlement_Flag,'N')<>'Y'
		AND B.Asset_Norm<>'ALWYS_STD'


/*FOR OTS CR ADDED BY ZAIN  ON LOCAL 20250213 END*/

												/*OTS UPGRADE THROUGH MOC ADDED BY ZAIN ON 20250301*/

													/*CREATING TEMP TABLE TO STORE PREVIOUS VALUE*/
													SELECT A.* INTO #OTS_MOC
													FROM YBL_ACS.DBO.OTS_DATA A INNER JOIN DATAUPLOAD.MocCustomerDataUpload B
														ON A.FCR_CustomerID=B.CustomerID
														AND A.OTS_Settlement_Flag='Y' AND B.AssetClassification = 'STD'
														WHERE A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EffectiveToTimeKey=49999
													/*CREATING TEMP TABLE TO STORE PREVIOUS VALUE END*/

													/*EXPIRING EFFECTIVETOTIMEKEY AS ON T-1 DAY TO KEEP THE NPA STATUS LIVE TILL T-1 DAY*/
													UPDATE #OTS_MOC SET EFFECTIVETOTIMEKEY=@TIMEKEY-1
													/*EXPIRING EFFECTIVETOTIMEKEY AS ON T-1 DAY TO KEEP THE NPA STATUS LIVE TILL T-1 DAY*/

													/* UPDATING OTS FLG AS NULL IF CUSTOMER WAS PASSED AS STD IN MOC*/
													UPDATE A SET OTS_Settlement_Flag=NULL,OTS_Settlement_Date=NULL,EFFECTIVEFROMTIMEKEY=@TIMEKEY
													FROM YBL_ACS.DBO.OTS_DATA A INNER JOIN DATAUPLOAD.MocCustomerDataUpload B
														ON A.FCR_CustomerID=B.CustomerID
														AND A.OTS_Settlement_Flag='Y' AND B.AssetClassification = 'STD'
														WHERE A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EffectiveToTimeKey=49999
													/* UPDATING OTS FLG AS NULL IF CUSTOMER WAS PASSED AS STD IN MOC END*/

													/*INSERTING NPA STATUS LIVE TILL T-1 DAY*/
													INSERT INTO YBL_ACS.DBO.OTS_DATA
													SELECT * FROM #OTS_MOC
													/*INSERTING NPA STATUS LIVE TILL T-1 DAY*/
												/*OTS UPGRADE THROUGH MOC ADDED BY ZAIN ON 20250301 END*/

/*FOR DCCO CR ADDED BY ZAIN  ON LOCAL 20250302*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) SELECT ORIGINAL_LOGIN(),'UPDATE NPA DUE TO DCCO','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

			UPDATE A SET A.EFFECTIVETOTIMEKEY=@TIMEKEY-1 
				FROM YBL_ACS.DBO.DCCO_MAIN A INNER JOIN YBL_ACS_MIS.DBO.DCCO_STG B ON A.UCIC=B.UCIC
				WHERE (ISNULL(A.Final_DCCO,'')<>ISNULL(B.Final_DCCO,'')
						)

				INSERT INTO YBL_ACS.DBO.DCCO_MAIN(
													UCIC
													,Cust_ID
													,Line_ID
													,Utilisation
													,Project_Loan
													,Infra_NonInfra
													,Complied_Status
													,Date_of_Completion
													,Due_Date
													,Deferral_Date
													,Max_Due_Date
													,Default_Extension
													,Final_DCCO
													,EFFECTIVEFROMTIMEKEY
													,EFFECTIVETOTIMEKEY
													,CREATED_DATE
													,MODIFY_DATE
													,ETL_DATE
													,DATA_DATE
													)
												SELECT 
													UCIC
													,Cust_ID
													,Line_ID
													,Utilisation
													,Project_Loan
													,Infra_NonInfra
													,Complied_Status
													,Date_of_Completion
													,Due_Date
													,Deferral_Date
													,Max_Due_Date
													,Default_Extension
													,Final_DCCO
													,@TIMEKEY
													,49999
													,CAST(GETDATE() AS DATE)
													,CAST(GETDATE() AS DATE)
													,CAST(GETDATE() AS DATE)
													,CAST(GETDATE()-1 AS DATE)
												FROM YBL_ACS_MIS.DBO.DCCO_STG
													WHERE UCIC NOT IN (SELECT UCIC FROM YBL_ACS.DBO.DCCO_MAIN 
																			WHERE EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)



--UPDATE A SET 	A.ASSET_NORM='ALWYS_NPA'
--            	,A.DEGREASON= ' DEGRADE BY DCCO FOR UCIC/FCR_CUSTOMERID ' + D.SourceName+' '+A.RefCustomerID
--				,FlgDeg='Y'
--				,DegDate=@PROCESSDATE
--		,A.SYSASSETCLASSALT_KEY=CASE WHEN SYSASSETCLASSALT_KEY=1 THEN 2 ELSE A.SYSASSETCLASSALT_KEY END --2  If Already Npa Customer resturcture marking done than asset class change based on updated Npa date
--     		,A.SYSNPA_DT=@PROCESSINGDATE
--FROM PRO.CUSTOMERCAL A INNER JOIN YBL_ACS..DCCO_MAIN B 
--		ON A.REFCUSTOMERID=B.Cust_ID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
--	INNER JOIN DimSourceDB D ON A.SourceAlt_Key=D.SourceAlt_Key
--			AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
--AND (DATEDIFF(DAY,B.Final_DCCO,@PROCESSDATE)+1)>0
--AND B.Utilisation>0


UPDATE A SET-- A.ASSET_NORM='ALWYS_NPA'
            -- ,A.FINALASSETCLASSALT_KEY=CASE WHEN FinalAssetClassAlt_Key=1 THEN 2 ELSE A.FinalAssetClassAlt_Key END 
			-- ,A.DEGREASON=' DEGRADE BY DCCO FOR UCIC/FCR_CUSTOMERID ' + D.SourceName+' '+A.RefCustomerID
			--,FlgDeg='Y'
			--,A.FINALNPADT=@PROCESSINGDATE
			A.DPD_DCCO=(DATEDIFF(DAY,B.Final_DCCO,@PROCESSDATE)+1)
			,A.FIN_DCCO_DATE=B.Final_DCCO
			,A.Utilisation=B.Utilisation
	FROM PRO.ACCOUNTCAL A INNER JOIN YBL_ACS..DCCO_MAIN B 
		ON A.RefCustomerID=B.Cust_ID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
	INNER JOIN DimSourceDB D ON A.SourceAlt_Key=D.SourceAlt_Key
			AND (D.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND D.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND (DATEDIFF(DAY,B.Final_DCCO,@PROCESSDATE)+1)>0
AND B.Utilisation>0

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE ALWYS_NPA DUE TO DCCO'
 
  

/*FOR DCCO CR ADDED BY ZAIN  ON LOCAL 20250302 END*/

		UPDATE PRO.ACLRUNNINGPROCESSSTATUS 
		SET COMPLETED='Y',ERRORDATE=NULL,ERRORDESCRIPTION=NULL,COUNT=ISNULL(COUNT,0)+1
		WHERE RUNNINGPROCESSNAME='INSERTDATAFORASSETCLASSFICATIONYES'

END TRY
BEGIN  CATCH

		UPDATE PRO.ACLRUNNINGPROCESSSTATUS 
		SET COMPLETED='N',ERRORDATE=GETDATE(),ERRORDESCRIPTION=ERROR_MESSAGE(),COUNT=ISNULL(COUNT,0)+1
		WHERE RUNNINGPROCESSNAME='INSERTDATAFORASSETCLASSFICATIONYES'

END CATCH
END



GO