SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO



CREATE PROCEDURE  [dbo].[LineCode_Upload_InUp]
	@Timekey INT,
	@XMLDocument XML='',
	
	@UserLoginID VARCHAR(100),
	@OperationFlag INT,
	@MenuId INT,
	@AuthMode	CHAR(1),
	--@filepath VARCHAR(MAX),
	@EffectiveFromTimeKey INT,
	@EffectiveToTimeKey	INT,
    @Result		INT=0 OUTPUT,
	@UniqueUploadID INT
	--@Authlevel varchar(5)

AS

--DECLARE @Timekey INT=24928,
--	@UserLoginID VARCHAR(100)='FNAOPERATOR',
--	@OperationFlag INT=1,
--	@MenuId INT=163,
--	@AuthMode	CHAR(1)='N',
--	@filepath VARCHAR(MAX)='',
--	@EffectiveFromTimeKey INT=24928,
--	@EffectiveToTimeKey	INT=49999,
--    @Result		INT=0 ,
--	@UniqueUploadID INT=41
BEGIN
SET DATEFORMAT DMY
	SET NOCOUNT ON;
	Declare @CollIDAutoGenerated   Int
    Declare @CollateralID		   varchar(30)=''
   --DECLARE @Timekey INT
   --SET @Timekey=(SELECT MAX(TIMEKEY) FROM dbo.SysProcessingCycle
			--	WHERE ProcessType='Quarterly')

			Set @Timekey=(
			select CAST(B.timekey as int)from SysDataMatrix A
			Inner Join SysDayMatrix B ON A.TimeKey=B.TimeKey
			 where A.CurrentStatus='C'
			 )

	PRINT @TIMEKEY

	SET @EffectiveFromTimeKey=@TimeKey
	SET @EffectiveToTimeKey=49999


--Declare @Year INT
--Declare @FromDate Varchar(10)
--Declare @ToDate Varchar(10)
--SET @Year=DATEPART(YEAR,Getdate())

--SET @FromDate=Convert(Varchar(4),(@Year-1))+'-04-01' 
--SET @ToDate=Convert(Varchar(4),(@Year))+'-03-31' 

DECLARE @FileUpload	VARCHAR(100)
	--DECLARE @FilePathUpload	VARCHAR(100)
	--			   SET @FilePathUpload=@UserLoginId+'_'+@filepath
	--				PRINT '@FilePathUpload'
	--				PRINT @FilePathUpload


		BEGIN TRY

		--BEGIN TRAN
		
IF (@MenuId=109942)
BEGIN
 --Set @FilePathUpload='mismaker_CollateralUpload_3.xlsx'

	IF (@OperationFlag=1)

	BEGIN


IF OBJECT_ID('TEMPDB..#LINECODEUPLOAD') IS NOT NULL
        DROP TABLE #LINECODEUPLOAD

SELECT 
 C.value('./SLNO [1]','VARCHAR(30)') SLNO
,C.value('./SOURCESYSTEM [1]','VARCHAR(30)') SOURCESYSTEM 
,C.value('./CODEVALUE [1]','VARCHAR(50)') CODEVALUE     
,C.value('./CODETYPE [1]','VARCHAR(200)') CODETYPE
,C.value('./CODEDESCRIPTION [1]','VARCHAR(100)') CODEDESCRIPTION


INTO #LINECODEUPLOAD
FROM @XMLDocument.nodes('/DataSet/Gridrow') AS t(c)

--select '#LINECODEUPLOAD',* from #LINECODEUPLOAD
Declare @RecordCount INT =0

Select @RecordCount=Count(1) from #LINECODEUPLOAD

IF @RecordCount<>0
BEGIN
	INSERT INTO ExcelUploadHistory
	(
		UploadedBy	
		,DateofUpload	
		,AuthorisationStatus	
		--,Action	
		,UploadType
		,EffectiveFromTimeKey	
		,EffectiveToTimeKey	
		,CreatedBy	
		,DateCreated	
		
	)

	SELECT @UserLoginID
		   ,GETDATE()
		   ,'NP'
		   --,'NP'
		   ,'LineCode Upload'
		   ,@EffectiveFromTimeKey
		   ,@EffectiveToTimeKey
		   ,@UserLoginID
		   ,GETDATE()

		   --sp
			   PRINT @@ROWCOUNT

		   DECLARE @ExcelUploadId INT
	SET 	@ExcelUploadId=(
	SELECT MAX(UniqueUploadID) FROM  ExcelUploadHistory
	)
		SET @FileUpload='S'+'_'+Convert(Varchar(99),@ExcelUploadId)
			Insert into UploadStatus (FileNames,UploadedBy,UploadDateTime,UploadType)
		Values(@FileUpload,@UserLoginID ,GETDATE(),'LineCode Upload') 
		PRINT 'LineCodeMaster_stg'
				
		INSERT INTO LineCodeMaster_stg
		(
		SLNO,
		 SOURCESYSTEM,
		   CODEVALUE,
		   CODETYPE,
		    CODEDESCRIPTION,
		  
		   sheetname
		 
		   )

		   SELECT
		SLNO,
		 SOURCESYSTEM,
		   CODEVALUE,
		   CODETYPE,
		    CODEDESCRIPTION,
		  
		   
		   @ExcelUploadId
		 

		   from #LINECODEUPLOAD

		   

END
Select 'LineCodeMaster_stg',* from LineCodeMaster_stg

		IF NOT (EXISTS (SELECT 1 FROM LineCodeMaster_stg  where sheetname=@ExcelUploadId))

							BEGIN
									 --Rollback tran
									SET @Result=-8

								RETURN @Result
							END
			
                   Print 'Sachin'
				   
		IF EXISTS(SELECT 1 FROM LineCodeMaster_stg WHERE sheetname=@ExcelUploadId)

			
		BEGIN
		


--		Declare @LoginPassword Varchar(Max)
--		Select @LoginPassword=ParameterValue from syssolutionParameter
--where ParameterName ='DefaultPassword'
		--select * from DimUserInfo_Mod
					Declare @ReviewLineCodeAlt_Key          bigINT =NULL 

Select @ReviewLineCodeAlt_Key=  MAX(ISNULL(ReviewLineCodeAlt_Key,0))
      from(  
      select max(ReviewLineCodeAlt_Key) ReviewLineCodeAlt_Key from DimLineCodeReview_Mod  
        UNION  
        select max(ReviewLineCodeAlt_Key) ReviewLineCodeAlt_Key from DimLineCodeReview 
        )A  
		    

		   
	 SET dateformat DMY
	 
		INSERT INTO [DimLineCodeReview_Mod]
		(
						ReviewLineCodeAlt_Key,
						UploadID,
						ReviewLineCodeGroup,
						ReviewLineCode,
						CodeType,
						ReviewLineCodeName,
						CreatedBy,
						DateCreated,
						AuthorisationStatus,
						EffectiveFromTimeKey,
						EffectiveToTimeKey,
						ScreenFlag
						
						)
						
		
		SELECT
		@ReviewLineCodeAlt_Key++Row_Number()Over(order by (Select 1)),
			@ExcelUploadId,
		   UPPER(SourceSystem),
		   CodeValue,
		   
		   CODETYPE,
		   CodeDescription,
		   @UserLoginID,
			GETDATE(),
			'NP',
			@Timekey,
			49999,
			'U'
				
		FROM LineCodeMaster_stg A
		where sheetname=@ExcelUploadId
		AND CODETYPE='CAM Renewal Code'


	Declare @StockLineCodeAlt_Key          bigINT =NULL 

Select @StockLineCodeAlt_Key=  MAX(ISNULL(StockLineCodeAlt_Key,0)) 
      from(  
      select max(StockLineCodeAlt_Key) StockLineCodeAlt_Key from DimLinecodeStockStatement_Mod  
        UNION  
        select max(StockLineCodeAlt_Key) StockLineCodeAlt_Key from DimLinecodeStockStatement 
        )A 

		INSERT INTO [DimLinecodeStockStatement_Mod]
		(
						StockLineCodeAlt_Key,
						UploadID,
						StockLineCodeGroup,
						StockLineCode,
						CodeType,
						StockLineCodeName,
						CreatedBy,
						DateCreated,
						AuthorisationStatus,
						EffectiveFromTimeKey,
						EffectiveToTimeKey,
						ScreenFlag
						
						)
						
		
		SELECT
		@StockLineCodeAlt_Key++Row_Number()Over(order by (Select 1)),
			@ExcelUploadId,
		   UPPER(SourceSystem),
		   CodeValue,
		   
		   CODETYPE,
		   CodeDescription,
		   @UserLoginID,
			GETDATE(),
			'NP',
			@Timekey,
			49999,
			'U'
		
		FROM LineCodeMaster_stg A
	   where sheetname=@ExcelUploadId
		AND CODETYPE='Stock Statement Code'

		Declare @ReviewLineProductCodeAlt_Key         bigINT =NULL 

Select @ReviewLineProductCodeAlt_Key=  MAX(ISNULL(ReviewLineProductCodeAlt_Key,0))
      from(  
      select max(ReviewLineProductCodeAlt_Key) ReviewLineProductCodeAlt_Key from DimLineProductCodeReview_Mod  
        UNION  
        select max(ReviewLineProductCodeAlt_Key) ReviewLineProductCodeAlt_Key from DimLineProductCodeReview 
        )A

		PRINT '@ReviewLineProductCodeAlt_Key'
		PRINT @ReviewLineProductCodeAlt_Key

		PRINT '@ExcelUploadId'
		PRINT @ExcelUploadId

		INSERT INTO [DimLineProductCodeReview_Mod]
		(
						ReviewLineProductCodeAlt_Key,
						UploadID,
						ReviewLineProductCodeGroup,
						ReviewLineProductCode,
						CodeType,
						ReviewLineProductCodeName,
						CreatedBy,
						DateCreated,
						AuthorisationStatus,
						EffectiveFromTimeKey,
						EffectiveToTimeKey,
						ScreenFlag
						
						)
						
		
		SELECT
		@ReviewLineProductCodeAlt_Key++Row_Number()Over(order by (Select 1)),
			@ExcelUploadId,
		   UPPER(SourceSystem),
		   CodeValue,
		   CODETYPE,
		   CodeDescription,
		   @UserLoginID,
			GETDATE(),
			'NP',
			@Timekey,
			49999,
			'U'
			
			
		FROM LineCodeMaster_stg A
		where sheetname=@ExcelUploadId
		AND CODETYPE='Product Code'
		
		---DELETE FROM STAGING DATA Sachin
		 DELETE FROM LineCodeMaster_stg
		 WHERE sheetname=@ExcelUploadId

END
	
	END
--------------------------------------------
	IF (@OperationFlag=16)----AUTHORIZE

	BEGIN
		PRINT 'SACHINTEST111 '
		UPDATE 
			[DimLineCodeReview_Mod] 
			SET 
			AuthorisationStatus	='A'
			,ApprovedBy	=@UserLoginID  
			,DateApproved	=GETDATE()     
			
			WHERE UploadId=@UniqueUploadID
---------- 2 table
UPDATE 
			[DimLinecodeStockStatement_Mod] 
			SET 
			AuthorisationStatus	='A'
			,ApprovedBy	=@UserLoginID 
			,DateApproved	=GETDATE()    
			
			WHERE UploadId=@UniqueUploadID
-----------3 tab
UPDATE 
			[DimLineProductCodeReview_Mod] 
			SET 
			AuthorisationStatus	='A'
			,ApprovedBy	=@UserLoginID  
			,DateApproved	=GETDATE()     
			
			WHERE UploadId=@UniqueUploadID

			
			   UPDATE   ExcelUploadHistory
		   SET AuthorisationStatus='A'
		  ,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
		   where UniqueUploadID=@UniqueUploadID
		   AND UploadType='CAM Renewal code'

    END 
	/*
	IF (@OperationFlag=20)----AUTHORIZE

	BEGIN
		
		UPDATE 
			[DimLineCodeReview_Mod] 
			SET 
			AuthorisationStatus	='A'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			
			WHERE UploadId=@UniqueUploadID
----tab 2
UPDATE 
			[DimLinecodeStockStatement_Mod] 
			SET 
			AuthorisationStatus	='A'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			
			WHERE UploadId=@UniqueUploadID
----tab 3
UPDATE 
			[DimLineProductCodeReview_Mod] 
			SET 
			AuthorisationStatus	='A'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			WHERE UploadId=@UniqueUploadID
								
*/
						 SET dateformat DMY

			INSERT INTO [DimLineCodeReview]
		(             ReviewLineCodeAlt_Key,
			            ReviewLineCodeGroup,
						ReviewLineCode,
						CodeType,
						ReviewLineCodeName,
						
					 AuthorisationStatus,
						 EffectiveFromTimeKey,
						EffectiveToTimeKey,
						CreatedBy,
						DateCreated,
						ModifiedBy,
						DateModified,
						ApprovedBy,
				        DateApproved
						)
			SELECT 
			           ReviewLineCodeAlt_Key,
						ReviewLineCodeGroup,
						ReviewLineCode,
						CodeType,
						ReviewLineCodeName,
						
						A.AuthorisationStatus,
					@Timekey,
					49999,
					A.CreatedBy,
					A.DateCreated,
					A.ModifiedBy,
					A.DateModified,
					@UserLoginID,
					Getdate()
					--ScreenFlag,
					--	'Y'						
			FROM [DimLineCodeReview_Mod] A
						
			WHERE  A.UploadId=@UniqueUploadID and A.EffectiveToTimeKey>=@Timekey 
	----------------Tab 2
	INSERT INTO DimLinecodeStockStatement
		(             StockLineCodeAlt_Key,
						StockLineCodeGroup,
						StockLineCode,
						CodeType,
						StockLineCodeName,
						
					 AuthorisationStatus,
						 EffectiveFromTimeKey,
						EffectiveToTimeKey,
						CreatedBy,
						DateCreated,
						ModifiedBy,
						DateModified,
						ApprovedBy,
					    DateApproved
						)
			SELECT 
			           StockLineCodeAlt_Key,
						StockLineCodeGroup,
						StockLineCode,
						CodeType,
						StockLineCodeName,
						
						A.AuthorisationStatus,
					@Timekey,
					49999,
					A.CreatedBy,
					A.DateCreated,
					A.ModifiedBy,
					A.DateModified,
					@UserLoginID,
					Getdate()
					--ScreenFlag,
					--	'Y'						
			FROM [DimLineCodeStockStatement_Mod] A
						
			WHERE  A.UploadId=@UniqueUploadID and A.EffectiveToTimeKey>=@Timekey 
		------------Tab 3
	INSERT INTO DimLineProductCodeReview
		(             ReviewLineProductCodeAlt_Key,
						ReviewLineProductCodeGroup,
						ReviewLineProductCode,
						CodeType,
						ReviewLineProductCodeName,
						
					 AuthorisationStatus,
						 EffectiveFromTimeKey,
						EffectiveToTimeKey,
						CreatedBy,
						DateCreated,
						ModifiedBy,
						DateModified,
						ApprovedBy,
				        DateApproved
						)
			SELECT 
			           ReviewLineProductCodeAlt_Key,
						ReviewLineProductCodeGroup,
						ReviewLineProductCode,
						CodeType,
						ReviewLineProductCodeName,
						
						A.AuthorisationStatus,
					@Timekey,
					49999,
					A.CreatedBy,
					A.DateCreated,
					A.ModifiedBy,
					A.DateModified,
					@UserLoginID,
					Getdate()
					--ScreenFlag,
					--	'Y'						
			FROM [DimLineProductCodeReview_Mod] A
						
			WHERE  A.UploadId=@UniqueUploadID and A.EffectiveToTimeKey>=@Timekey	
			

				UPDATE
				ExcelUploadHistory
				SET AuthorisationStatus='A',ApprovedBy=@UserLoginID,DateApproved=GETDATE()
				WHERE EffectiveFromTimeKey<=@Timekey AND EffectiveToTimeKey>=@Timekey
				AND UniqueUploadID=@UniqueUploadID
				AND UploadType='LineCode Upload'
	END
	IF (@OperationFlag=17)----REJECT

	BEGIN
		UPDATE 
			[DimLineCodeReview_Mod] 
			SET 
			AuthorisationStatus	='R'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			,EffectiveToTimeKey=EffectiveFromTimeKey-1
			WHERE UploadId=@UniqueUploadID
			AND AuthorisationStatus='NP'
	----tab 2
	UPDATE 
			[DimLinecodeStockStatement_Mod] 
			SET 
			AuthorisationStatus	='R'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			,EffectiveToTimeKey=EffectiveFromTimeKey-1
			WHERE UploadId=@UniqueUploadID
			AND AuthorisationStatus='NP'
	----tab 3
	
	UPDATE 
			[DimLineProductCodeReview_Mod] 
			SET 
			AuthorisationStatus	='R'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			,EffectiveToTimeKey=EffectiveFromTimeKey-1
			WHERE UploadId=@UniqueUploadID
			AND AuthorisationStatus='NP'		
----------------
			UPDATE
				ExcelUploadHistory
				SET AuthorisationStatus='R',ApprovedBy=@UserLoginID,DateApproved=GETDATE()
				WHERE EffectiveFromTimeKey<=@Timekey AND EffectiveToTimeKey>=@Timekey
				AND UniqueUploadID=@UniqueUploadID
				AND UploadType='LineCode Upload'



	--END

IF (@OperationFlag=21)----REJECT

	BEGIN
		
			UPDATE 
			[DimLineCodeReview_Mod] 
			SET 
			AuthorisationStatus	='R'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			,EffectiveToTimeKey=EffectiveFromTimeKey-1
			WHERE UploadId=@UniqueUploadID
			AND AuthorisationStatus in('NP','1A')
			----SELECT * FROM IBPCPoolDetail
----tab 2

UPDATE 
			[DimLinecodeStockStatement_Mod] 
			SET 
			AuthorisationStatus	='R'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			,EffectiveToTimeKey=EffectiveFromTimeKey-1
			WHERE UploadId=@UniqueUploadID
			AND AuthorisationStatus in('NP','1A')

----tab 3
UPDATE 
			[DimLineProductCodeReview_Mod] 
			SET 
			AuthorisationStatus	='R'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			,EffectiveToTimeKey=EffectiveFromTimeKey-1
			WHERE UploadId=@UniqueUploadID
			AND AuthorisationStatus in('NP','1A')
			-------------------------
			UPDATE
				ExcelUploadHistory
				SET AuthorisationStatus='R',ApprovedBy=@UserLoginID,DateApproved=GETDATE()
				WHERE EffectiveFromTimeKey<=@Timekey AND EffectiveToTimeKey>=@Timekey
				AND UniqueUploadID=@UniqueUploadID
				AND UploadType='LineCode Upload'
END
END
	--COMMIT TRAN
		---SET @Result=CASE WHEN  @OperationFlag=1 THEN @UniqueUploadID ELSE 1 END
		SET @Result=CASE WHEN  @OperationFlag=1 AND @MenuId=109942 THEN @ExcelUploadId 
					ELSE 1 END
		
		 Update UploadStatus Set InsertionOfData='Y',InsertionCompletedOn=GETDATE() where FileNames=@FileUpload -- Sac

		 ---- IF EXISTS(SELECT 1 FROM IBPCPoolDetail_stg WHERE filEname=@FilePathUpload)
		 ----BEGIN
			----	 DELETE FROM IBPCPoolDetail_stg
			----	 WHERE filEname=@FilePathUpload

			----	 PRINT 'ROWS DELETED FROM IBPCPoolDetail_stg'+CAST(@@ROWCOUNT AS VARCHAR(100))
		 ----END
		 

		RETURN @Result
		--RETURN @ExcelUploadId
	END TRY
	BEGIN CATCH 
	   
	   Delete from ExcelUploadHistory WHERE UniqueUploadID=@ExcelUploadId
				--AND UniqueUploadID=@UniqueUploadID
				--AND UploadType='User Upload'
	SELECT ERROR_MESSAGE(),ERROR_LINE()
	SET @Result=-1
	 Update UploadStatus Set InsertionOfData='Y',InsertionCompletedOn=GETDATE() where FileNames=@FileUpload --Sac
	RETURN -1
	END CATCH

END

GO